<?php
/**
 * @file
 * Provide a search system into the old Vaxia archives.
 */

/**
 * Implements hook_permission().
 */
function archives_permission() {
  return array(
    'search old archives'=> array(
      'title' => t('search old archives'),
      'description' => t('Search old archives.'),
    ),
    'administer old archives'=> array(
      'title' => t('administer old archives'),
      'description' => t('Administer old archives.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function archives_menu() {
  $items['archives'] = array(
    'title' => 'Archives',
    'description' => 'Flat file archives',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('search old archives'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('archives_form'),
  );
  $items['admin/config/search/archives'] = array(
    'title' => 'Archive configurations',
    'description' => 'Flat file archive configurations',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer old archives'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('archives_admin_form'),
  );
  $items['admin/config/search/archives/settings'] = array(
    'title' => 'Archive configurations',
    'description' => 'Flat file archive configurations',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer old archives'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('archives_admin_form'),
  );
  $items['admin/config/search/archives/archive_posts'] = array(
    'title' => 'Archive posts',
    'description' => 'Archive posts currently in the system into the archive files',
    'type' =>  MENU_LOCAL_TASK,
    'access arguments' => array('administer old archives'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('archive_posts_form'),
  );
  return $items;
}

/**
 * Menu callback for search page.
 */
function archives_form($form, &$form_state) {
  $root = variable_get('archives_flat_file_path', '');
  // Generate form.
  $form = array();
  $form['archives_style'] = array(
    '#type' => 'item',
    '#markup' => '<style>' .
      '#archives-form .form-type-textfield{float:left;margin-left:1em;height:40px;}' .
      '#archives-form .form-type-select{float:left;margin-left:1em;height:40px;}' .
      '#archives-form .form-type-select select{width:12em;}' .
      '#archives-form .form-type-radios{float:left;margin-left:1em;height:40px;}' .
      '#archives-form #edit-archives-date{float:left;margin-left:1em;height:40px;}' .
      '#archives-form #edit-archives-date select{width:5em;}' .
      '#archives-form #edit-archives-date .form-type-select{float:left;margin-left:1em;}' .
      '#archives-form #edit-vaxia-archives-submit{clear:left;}' .
      '</style>',
  );
  $form['search_fieldset'] = array(
    '#type' => 'fieldset',
  );
  $form['search_fieldset']['archives_specifics'] = array(
    '#title' => t('Specifics'),
    '#type' => 'fieldset',
    //'#description' => t('Enter a date to limit results to that date.'),
  );
  $form['search_fieldset']['archives_specifics']['archives_date'] = array(
    '#title' => t('Date'),
    '#type' => 'fieldset',
    //'#description' => t('Enter a date to limit results to that date.'),
  );
  $form['search_fieldset']['archives_specifics']['archives_date']['archives_date_month'] = array(
    '#type' => 'select',
    '#options' => array(
      'any' => '--',
      '01' => 'Jan',
      '02' => 'Feb',
      '03' => 'Mar',
      '04' => 'Apr',
      '05' => 'May',
      '06' => 'Jun',
      '07' => 'Jul',
      '08' => 'Aug',
      '09' => 'Sep',
      '10' => 'Oct',
      '11' => 'Nov',
      '12' => 'Dec',
    ),
  );
  $day_ranges = range(1, 31);
  foreach ($day_ranges as $day_range) {
    if ($day_range < 10) {
      $day_range = '0' . $day_range;
    }
    $days[$day_range] = $day_range;
  }
  $days = array_combine($days, $days);
  $days = array('any' => '--') + $days;
  $form['search_fieldset']['archives_specifics']['archives_date']['archives_date_day'] = array(
    '#type' => 'select',
    '#options' => $days,
  );
  $years = array_combine(range(2004, date('Y')), range(2004, date('Y')));
  $years = array('any' => '--') + $years;
  $form['search_fieldset']['archives_specifics']['archives_date']['archives_date_year'] = array(
    '#type' => 'select',
    '#options' => $years,
  );
  $location = _archives_read_data_file($root .'/d/location.data');
  asort($location);
  $location = array('any' => '--') + $location;
  $form['search_fieldset']['archives_specifics']['archives_location'] = array(
    '#title' => t('Location'),
    '#type' => 'select',
    //'#description' => t('Enter a location to search for the location in the archive filename.'),
    '#options' => $location,
    '#default_value' => 'any',
  );
  $character = _archives_read_data_file($root .'/d/character.data');
  asort($character);
  $character = array('any' => '--') + $character;
  $form['search_fieldset']['archives_specifics']['archives_character'] = array(
    '#title' => t('Character'),
    '#type' => 'select',
    //'#description' => t('Enter a character to search for the location in the archive filename and text.'),
    '#options' => $character,
    '#default_value' => 'any',
  );
  $player = _archives_read_data_file($root .'/d/player.data');
  asort($player);
  $player = array('any' => '--') + $player;
  $form['search_fieldset']['archives_specifics']['archives_player'] = array(
    '#title' => t('Player'),
    '#type' => 'select',
    //'#description' => t('Enter a character to search for the location in the archive filename and text.'),
    '#options' => $player,
    '#default_value' => 'any',
    '#suffix' => '<div style="clear:both;">&nbsp;</div>',
  );
  $form['search_fieldset']['archives_contents'] = array(
    '#title' => t('Contents'),
    '#type' => 'fieldset',
    //'#description' => t('Enter a date to limit results to that date.'),
  );
  $form['search_fieldset']['archives_contents']['archives_text'] = array(
    '#title' => t('Text'),
    '#type' => 'textfield',
    //'#description' => t('Enter any string to search for the location in the archive text.'),
    '#size' => 15,
  );
  $form['search_fieldset']['archives_contents']['archives_type'] = array(
    '#title' => t('Type'),
    '#type' => 'radios',
    //'#description' => t('Enter any string to search for the location in the archive text.'),
    '#options' => array(
      'any' => t('Any Post'),
      'room' => t('Chat Room Post'),
      'forum' => t('Forum Post'),
    ),
    '#default_value' => 'any',
    '#suffix' => '<div style="clear:both;">&nbsp;</div>',
  );
  $form['archives_submit'] = array(
    '#type' => 'button',
    '#value' => t('Search archives'),
    '#ajax' => array(
      'callback' => 'archives_form_ajax',
      'wrapper' => 'archives_results',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  $search_results = t('No search performed.');
  if (!empty($form_state['values']['archives_date_month']) ||
    !empty($form_state['values']['archives_date_day']) ||
    !empty($form_state['values']['archives_date_year']) ||
    !empty($form_state['values']['archives_type']) ||
    !empty($form_state['values']['archives_location']) ||
    !empty($form_state['values']['archives_character']) ||
    !empty($form_state['values']['archives_player']) ||
    !empty($form_state['values']['archives_text'])) {
    $search_results = _archives_search(
      $form_state['values']['archives_date_month'],
      $form_state['values']['archives_date_day'],
      $form_state['values']['archives_date_year'],
      $form_state['values']['archives_type'],
      $form_state['values']['archives_location'],
      $form_state['values']['archives_character'],
      $form_state['values']['archives_player'],
      $form_state['values']['archives_text']
    );
  }
  $form['archives_results'] = array(
    '#title' => t('Seach results'),
    '#type' => 'item',
    '#markup' => $search_results,
    '#prefix' => '<div id="archives_results">',
    '#suffix' => '</div>',
  );
  if (!empty($root)) {
    $form['archives_raw'] = array(
      '#title' => t('Raw files'),
      '#type' => 'item',
      '#markup' => '<br/>' .
        '<b><i><a href="' . $root . '" target="_blank">Direct link to archives</a></i></b>' .
        '<br/><br/>' .
        '<iframe src="' . $root . '" width="100%" height="500px" style="background:#FFF;"></iframe>',
      '#prefix' => '<div id="archives_raw">',
      '#suffix' => '</div>',
    );
  }
  // Generate display of general index - iframe.
  return $form;
}

/**
 * AJAX callback for search form.
 */
function archives_form_ajax($form, &$form_state) {
  return $form['archives_results'];
}

/**
 * Menu callback for admin page.
 */
function archives_admin_form($form, &$form_state) {
  $form = array();
  $form['archives_flat_file_path'] = array(
    '#title' => t('Location'),
    '#description' => t('Flat file archive location, the directory the archives are stored in. Be sure to end the path with a /.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('archives_flat_file_path', ''),
  );
  $form['archives_date'] = array(
    '#title' => t('Timeframe'),
    '#description' => t('Timeframe to keep in the database before moving to archives. Use the same strings as date().'),
    '#type' => 'textfield',
    '#default_value' => variable_get('archives_date', '6 months'),
  );
  return system_settings_form($form);
}

/**
 * Menu callback for archive form.
 */
function archive_posts_form($form, &$form_state) {
  $form = array();
  $date = variable_get('archives_last_run', 'never');
  $form['archive_date'] = array(
    '#markup' => '<div>' . t('Archives last run') . ': ' . $date . '</div>',
  );
  $form['archive'] = array(
    '#type' => 'submit',
    '#value' => t('Archive All Posts'),
  );
  return $form;
}

/**
 * Implements hook_cron().
 */
function archive_cron() {
  return _archives_posts_archive();
}

/**
 * Submit handler for archive form.
 */
function archive_posts_form_submit($form, &$form_state) {
  return _archives_posts_archive();
}

/**
 * Helper function, archive things.
 */
function _archives_posts_archive() {
  // And now we get all complicated! It may take a bit to get through them all.
  // But we archive for all the posts on the site into the file system.
  // First get the date of the oldest comment posted on the site to chat or forum.
  $oldest = db_query('SELECT c.created FROM {comment} c ' .
    'LEFT JOIN {node} n ON c.nid = n.nid ' .
    'WHERE n.type = \'rpg_chatroom\' OR n.type = \'forum\' ' . // Session posts are NOT touched. On purpose.
    'ORDER BY c.created ASC LIMIT 0, 1');
  $begin = strtotime('now');
  foreach ($oldest as $date) {
    // Back up a date further just to make sure we got it all.
    $begin = strtotime('-1 day', $date->created);
    // And make sure it's on a midnight.
    $begin = strtotime(date('m/d/Y 00:00:01', $begin));
  }
  drupal_set_message('Archiving comments, started looking from: ' . date('m/d/Y 00:00:01', $begin) . '.');

  // And now we work our way forward day by day.
  $root = variable_get('archives_flat_file_path', '');
  // Back it to our selected timeframe for cutoff.
  $now = strtotime(variable_get('archives_date', '6 months') . ' ago');
  while ($begin < $now) {
    // Set our time out for each loop...
    set_time_limit(600);
    // Set the mysql timeout as well:
    // SET GLOBAL innodb_lock_wait_timeout = 3000; SET GLOBAL wait_timeout = 3000;
    // Add 24 hours to the day and look again.
    $end = strtotime('+1 day', $begin);

    // Grab our set of comments to work through by forum and id.
    $pages = _archives_get_comments('rpg_chatroom', 'room', $begin, $end);
    _archives_write_files($pages, $begin, $end);

    // Grab our set of comments to work through by forum and id.
    $pages = _archives_get_comments('forum', 'forum', $begin, $end, TRUE);
    _archives_write_files($pages, $begin, $end);

    // Set the loop up for the next round.
    //  PHP caches the information those functions return in order to provide faster performance.
    // So got to reset this cache for each loop.
    clearstatcache(); // See: http://us3.php.net/manual/en/function.clearstatcache.php
    $begin = $end;
  }
  drupal_set_message('Archive complete.');
  $date = variable_set('archives_last_run', date('m/d/Y H:i:s'));
}

/**
 * Helper fuction, write results.
 */
function _archives_write_files($pages, $begin, $end) {
  // And now we work our way forward day by day.
  $root = variable_get('archives_flat_file_path', '');
  // Write the comments.
  if (isset($pages['pages']) && isset($pages['d'])) {
    foreach ($pages['pages'] as $page_path => $page_content) {
      $filepath = DRUPAL_ROOT . '/' . $root . $page_path;
      if (!is_dir(dirname($filepath))) {
        mkdir(dirname($filepath), 0755, TRUE);
      }
      $error_free = file_put_contents($filepath, $page_content);
      chmod($filepath, 0755);
      // MUST be explicit about the === FALSE, in case 0 bytes were written.
      // Which otherwise might register as a false negative.
      if ($error_free === FALSE && is_readable($filepath)) {
        $error_free = TRUE; // Not an error
        // This is actually ok. The page doesn't get written without full
        // Information on hand. If the comments only partially loaded before time out
        // then this file would not get written.
        watchdog('archives', 'Archive page for ' . $filepath . ' already exists.');
        drupal_set_message('Archive page for ' . $filepath . ' already exists.');
      }
      elseif($error_free === FALSE ) {
        watchdog('archives', 'Archive page for ' . $filepath . ' had an unknown error.');
        drupal_set_message('Archive page for ' . $filepath . ' had an unknown error.');
      }
    }
    // Add to the character index.
    foreach ($pages['d']['character'] as $character => $search_data) {
      if (!empty($character) && !empty($search_data)) {
        $filepath =  DRUPAL_ROOT . '/' . $root . 'd/character.' . $character . '.data';
        if (!is_dir(dirname($filepath))) {
          mkdir(dirname($filepath), 0755, TRUE);
        }
        $error_free_c = file_put_contents($filepath, $search_data, FILE_APPEND);
        chmod($filepath, 0755);
        if ($error_free_c === FALSE ) {
          watchdog('archives', 'Archive write to chracter ' . $character . ' with ' . $search_data . ' had an unknown error.');
          drupal_set_message('Archive write to chracter ' . $character . ' with ' . $search_data . ' had an unknown error.');
        }
      }
    }
    // Add to the location index.
    foreach ($pages['d']['location'] as $location => $search_data) {
      if (!empty($location) && !empty($search_data)) {
        $filepath =  DRUPAL_ROOT . '/' . $root . 'd/location.' . $location . '.data';
        if (!is_dir(dirname($filepath))) {
          mkdir(dirname($filepath), 0755, TRUE);
        }
        $error_free_l = file_put_contents($filepath, $search_data, FILE_APPEND);
        chmod($filepath, 0755);
        if ($error_free_l === FALSE ) {
          watchdog('archives', 'Archive write to location ' . $location . ' with ' . $search_data . ' had an unknown error.');
          drupal_set_message('Archive write to location ' . $location . ' with ' . $search_data . ' had an unknown error.');
        }
      }
    }
    // Add to the player archives.
    foreach ($pages['d']['player'] as $player => $search_data) {
      if (!empty($player) && !empty($search_data)) {
        $filepath =  DRUPAL_ROOT . '/' . $root . 'd/player.' . $player . '.data';
        if (!is_dir(dirname($filepath))) {
          mkdir(dirname($filepath), 0755, TRUE);
        }
        $error_free_p = file_put_contents($filepath, $search_data, FILE_APPEND);
        chmod($filepath, 0755);
        if ($error_free_p === FALSE ) {
          watchdog('archives', 'Archive write to player ' . $player . ' with ' . $search_data . ' had an unknown error.');
          drupal_set_message('Archive write to player ' . $player . ' with ' . $search_data . ' had an unknown error.');
        }
      }
    }

    // Cleanup, and check for errors. Will be FALSE if an error.
    if ($error_free === FALSE || $error_free_c === FALSE || $error_free === FALSE_l || $error_free_p === FALSE) {
      $errors = array();
      if ($error_free === FALSE) {
        $errors[] = 'Page';
      }
      if ($error_free_c === FALSE) {
        $errors[] = 'Character';
      }
      if ($error_free_l === FALSE) {
        $errors[] = 'Location';
      }
      if ($error_free_p === FALSE) {
        $errors[] = 'Player';
      }
      drupal_set_message('Archiving comments from: ' . date('m/d/Y 00:00:01', $begin) . ' to: ' . date('m/d/Y 00:00:01', $end) . '.');
      watchdog('archives', 'Error writing archive file for forums. ' . implode(', ', $errors), array(), WATCHDOG_CRITICAL);
      drupal_set_message('Error while archiving forum comments: ' . implode(', ', $errors));
    }
    else {
      foreach ($pages['delete_comments'] as $cid) {
        comment_delete($cid); // comment_delete_multiple can time out on large sets.
      }
      drupal_set_message('Archiving comments from: ' . date('m/d/Y 00:00:01', $begin) . ' to: ' . date('m/d/Y 00:00:01', $end) . '.');
      drupal_set_message('Archived ' . count($pages['delete_comments']) . ' forum comments.');
    }
  }
}

/**
 * Helper functions, grab the comments for day and type.
 */
function _archives_get_comments($type, $category, $begin, $end, $include_node = FALSE) {
  // Grab our set of comments to work through by room and id.
  $found_comments =  db_query('SELECT c.cid, c.nid FROM {comment} c ' .
    'LEFT JOIN {node} n ON c.nid = n.nid ' .
    'WHERE n.type = \'' . $type . '\' ' .
    'AND c.created BETWEEN ' . $begin . ' AND ' . $end . ' ' .
    'ORDER BY c.nid ASC, c.created ASC');

  // Process all found for this day.
  $comments = array();
  $nodes = array();
  $players = array();
  $characters = array();
  $comment_displays = array();
  foreach ($found_comments as $found_comment) {
    // Get the comment and node.
    $comment = comment_load($found_comment->cid);
    $node = node_load($found_comment->nid);
    if (!empty($node) && !empty($comment)) {
      // Save all the data we need for later.
      $nodes[$node->nid] = $node;
      $comments[$comment->cid] = $comment;
      // Get derived info.
      $char_id = isset($comment->field_comment_character[$comment->language][0]['nid']) ?
        $comment->field_comment_character[$comment->language][0]['nid'] : '';
      if (!empty($char_id)) {
        $characters[$comment->cid] = node_load($char_id);
      }
      $players[$comment->cid] = user_load($comment->uid);
      // And generate the comment display.
      $view = comment_view($comment, $node);
      // Remove things from the display array before we render.
      unset($view['links']);
      // Render it.
      $comment_display = drupal_render($view);
      $comment_displays[$node->nid][$comment->cid] = $comment_display;
    }
    else {
      if (empty($node)) {
        drupal_set_message('Missing node #' . $found_comment->nid . ' for processing.');
      }
      if (empty($comment)) {
        drupal_set_message('Missing comment #' . $found_comment->cid . ' for processing.');
      }
    }
  }

  // Record how many we found.
  if (count($comments) > 0) {
    drupal_set_message('Found ' . count($comments) . ' ' . $type . ' comments.');
  }

  // Process each room now.
  $pages = array();
  $path = date('Y', $begin) . '/' . date('m', $begin) . '/' . date ('d', $begin) . '/';
  foreach ($comment_displays as $nid => $comments) {
     foreach ($comments as $cid => $comment_display) {
      // Calculate the data.
      $node = isset($nodes[$nid]) ? $nodes[$nid] : '';
      $comment = isset($comment_displays[$nid][$cid]) ? $comment_displays[$nid][$cid] : '';
      if (!empty($node) && !empty($comment)) {
        // Figure out the extra info.
        $character = isset($characters[$cid]->title) ? trim($characters[$cid]->title) : '';
        $location = _archives_prepare_string($node->title);
        $player = trim($players[$cid]->name);
        // Get additional location info.
        $realm = '';
        if (!empty($node->field_realm[$node->language][0]['value'])) {
          $realm = trim($node->field_realm[$node->language][0]['value']);
          if (!empty($realm)) {
            $realm .= '-';
          }
        }
        $parent = '';
        $parent = isset($node->field_parent[$node->language][0]['nid']) ? node_load($node->field_parent[$node->language][0]['nid']) : '';
        if (!empty($parent)) {
          $parent = _archives_prepare_string($parent->title);
          if (!empty($parent)) {
            $parent .= '-';
          }
        }
        // And setup the display,
        $page_title = $path . $category . '/' . strtolower($realm . $parent . $location) . '.html';
        // Set the data if empty.
        if ( empty($pages['pages'][$page_title]) ) {
          $pages['pages'][$page_title] = "\n" . '<html>' .
            '<body style="background:white;"> '.
            '<style> ' .
              '.post{border:solid 1px #000;margin:0.25em;padding:0.25em;}' .
              'article.comment header{width:150px;float:left;}' .
              'article.comment header img{display:none;}' .
              'article.comment .comment-spacer{clear:both;}' .
              'article.comment .field-name-comment-body{margin-left:155px;}'.
              'article.comment .dice_rolls{margin-left:155px;}'.
            '</style>';
          // Include the node as needed.
          if ($include_node) {
            $node_view = node_view($node);
            $pages['pages'][$page_title] .= "\n" . '<div class="post">' . "\n" .
              $node_view . "\n" .
              '</div>';
          }
        }
        if ( empty($pages['d']['character'][$character]) ) {
          $pages['d']['character'][$character] = array();
        }
        if ( empty($pages['d']['location'][$location]) ) {
          $pages['d']['location'][$location] = array();
        }
        if ( empty($pages['d']['player'][$player]) ) {
          $pages['d']['player'][$player] = array();
        }
        if ( empty($pages['delete_comments']) ) {
          $pages['delete_comments'] = array();
        }
        // Add data to the arrays.
        $pages['pages'][$page_title] .= "\n" . '<div class="post">' . "\n" .
          $comment_display . "\n" .
          '</div>';
        if (!empty($character)) {
          $pages['d']['character'][$character][] .= '"' . $page_title . '",';
        }
        $pages['d']['location'][$location][] .= '"' . $page_title . '",';
        $pages['d']['player'][$player][] .= '"' . $page_title . '",';
        $pages['delete_comments'][] = $cid;
      }
    }
  }

  // Add the end to all pages.
  if (isset($pages['pages'])) {
    foreach ($pages['pages'] as $page_path => $page) {
      $pages['pages'][$page_path] .= "\n" . '</body></html>';
    }
  }

  if (isset($pages['d'])) {
    // Make sure all data returns are unique.
    foreach ($pages['d']['character'] as $character => $search_data) {
      $pages['d']['character'][$character] = array_unique($pages['d']['character'][$character]);
      $pages['d']['character'][$character] = "\n" . implode("\n", $pages['d']['character'][$character]);
    }
    // Add to the location index.
    foreach ($pages['d']['location'] as $location => $search_data) {
      $pages['d']['location'][$location] = array_unique($pages['d']['location'][$location]);
      $pages['d']['location'][$location] = "\n" . implode("\n", $pages['d']['location'][$location]);
    }
    // Add to the player archives.
    foreach ($pages['d']['player'] as $player => $search_data) {
      $pages['d']['player'][$player] = array_unique($pages['d']['player'][$player]);
      $pages['d']['player'][$player] = "\n" . implode("\n", $pages['d']['player'][$player]);
    }
  }

  // Now we have all the pages to return to the writing system.
  return $pages;
}

/**
 * Helper function, read in a CSV .data file to get a list of returns.
 */
function _archives_read_data_file($path) {
  $results = array();
  if (is_file($path) && ($file = fopen($path, 'r')) !== FALSE) {
    while (($row = fgetcsv($file, 1000, ",")) !== FALSE) {
      if (!empty($row[0])) {
        $results[$row[0]] = $row[0];
      }
    }
  }
  return $results;
}

/**
 * Helper function, strip strings.
 */
function _archives_prepare_string($string) {
  $string = trim($string);
  $remove_chars = array('.', ',', '_', ':', '/', '\\', '?', '"', ')',
  	'(', '*', '&', '^', '%'. '$', '#', '@', '!', '~', '[', ']', '{', '}');
  foreach ($remove_chars as $char) {
    $string = str_replace($char, '', $string);
  }
  $replace_chars = array(' ');
  foreach ($replace_chars as $char) {
    $string = str_replace($char, '-', $string);
  }
  $string = str_replace('..', '.', $string);
  $string = str_replace('..', '.', $string);
  $string = str_replace('..', '.', $string);
  return trim($string);
}

/**
 * Helper function, make a list of searchable results.
 * THIS IS NOT A 'proper' SEARCH SYSTEM.
 */
function _archives_search($month = 'any', $day = 'any', $year = 'any', $type = 'any', $location, $character, $player, $text) {
  // Is the date set? Check that set path instead of all.
  $root = variable_get('archives_flat_file_path', '');

  // Set the path if those values were selected.
  $path = '';
  if (!empty($year) && $year != 'any') {
    $path = $path . '/' . $year; // Since only the archives are org by year.
  }
  if (!empty($year) && $year != 'any' && !empty($month) && $month != 'any') {
    $path = $path . '/' . $month ;
  }
  if (!empty($year) && $year != 'any' && !empty($month) && $month != 'any' && !empty($day) && $day != 'any') {
    $path = $path . '/' . $day ;
  }
  if (!empty($year) && $year != 'any' && !empty($month) && $month != 'any' && !empty($day) && $day != 'any' && !empty($type) && $type != 'any') {
    $path = $path . '/' . $type ;
  }

  // Scrub the other values.
  $location = trim($location);
  $character = trim($character);
  $player = trim($player);
  $text = trim(addslashes(strip_tags($text)));

  // Check location name in file and content
  $found = array();
  // First get the contents of folders on the path matching .html.
  if (!empty($year) && $year != 'any') {
    $this_found = array();
    $output = '';
    $command = 'find -L ' . DRUPAL_ROOT . '/' . $root . $path . ' -name "*.html"';
    exec($command, $output);
    foreach ($output as $found_file) {
	  $this_found[] = $found_file;
    }
    foreach ($this_found as $index => $found_path) {
	  $length = drupal_strlen(DRUPAL_ROOT) + drupal_strlen($root) + 2;
	  $this_found[$index] = drupal_substr($found_path, $length);
    }
    $found = empty($found) ? $this_found : array_intersect($found, $this_found);
  }

  // Check for location info.
  if (!empty($location) && $location != 'any') {
    $this_found = _archives_read_data_file($root .'/d/location.' . _archives_prepare_string($location) . '.data');
    // Only use the results that show under both.
    if (empty($this_found)) {
      $found = array();
    }
    $found = empty($found) ? $this_found : array_intersect($found, $this_found);
  }

  // Check character name in content
  if (!empty($character) && $character != 'any') {
    $this_found = _archives_read_data_file($root .'/d/character.' . _archives_prepare_string($character) . '.data');
    // Only use the results that show under both.
    if (empty($this_found)) {
      $found = array();
    }
    $found = empty($found) ? $this_found : array_intersect($found, $this_found);
  }

  // Check player name in content
  if (!empty($player) && $player != 'any') {
    $this_found = _archives_read_data_file($root .'/d/player.' . _archives_prepare_string($player) . '.data');
    // Only use the results that show under both.
    if (empty($this_found)) {
      $found = array();
    }
    $found = empty($found) ? $this_found : array_intersect($found, $this_found);
  }

  // Check text in content
  if (!empty($text)) {
    $this_found = array();
    $output = '';
    $command = 'grep -R -i -c -m 1 --exclude=' . DRUPAL_ROOT . '/' . $root . '/d "' . $text . '" ' . DRUPAL_ROOT . '/' . $root . $path;
    exec($command, $output);
    foreach ($output as $found_file) {
      $found_file_parts = explode(':', $found_file);
      if ($found_file_parts[1] > 0) {
        $this_found[] = $found_file_parts[0];
      }
    }
    foreach ($this_found as $index => $found_path) {
      $length = drupal_strlen(DRUPAL_ROOT) + drupal_strlen($root) + 2;
      $this_found[$index] = drupal_substr($found_path, $length);
    }
    // Only use the results that show under both.
    if (empty($this_found)) {
      $found = array();
    }
    $found = empty($found) ? $this_found : array_intersect($found, $this_found);
  }

  // Clean up the found paths for proper links through
  global $base_url;
  foreach ($found as $index => $found_path) {
    $found_path = $root . '/' . $found_path;
    $new_path = '<a href="' . $base_url . '/' . $found_path . '" target="_blank">' . $found_path . '</a>';
    $found[$index] = $new_path;
  }

  // Create results
  if (!empty($found)) {
    asort($found);
    $results = '<ul><li>' . implode("</li>\n<li>", $found) . '</li></ul>';
  }
  else {
    $results = '<ul><li>' . t('No results found.') . '</li></ul>';
  }
  return $results;
}