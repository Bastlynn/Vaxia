<?php
/**
 * @file
 * Code for the Proposals feature.
 */

include_once 'proposal.features.inc';

/**
 * Implements hook_menu_alter().
 */
function proposal_menu_alter(&$items) {
  // Copy the regular table output for a user access one.
  $items['node/%webform_menu/webform-table'] = $items['node/%webform_menu/webform-results'];
  $items['node/%webform_menu/webform-table']['title'] = 'Submissions';
  $items['node/%webform_menu/webform-table']['page callback'] = '_proposal_webform_results_table';
  $items['node/%webform_menu/webform-table']['access callback'] = '_proposal_webform_results_table_access';
  $items['node/%webform_menu/webform-table']['access arguments'] = array(1);
  $items['node/%webform_menu/webform-table']['type'] = MENU_LOCAL_TASK;
  // Remove file reference, since it's now in proposal.module.
  unset($items['node/%webform_menu/webform-table']['file']);
  // Remove all the paths people don't need.
  unset($items['node/%webform_menu/webform/emails']);
  unset($items['node/%webform_menu/webform/emails/%webform_menu_email']);
  unset($items['node/%webform_menu/webform/emails/%webform_menu_email/delete']);
  
  // That goes for the owner as well.
  $items['node/%webform_menu/webform-results']['access callback'] = '_proposal_webform_results_access';
}

/**
 * Menu access call for _vaxia_webform_results_table().
 */
function _proposal_webform_results_table_access($node) {
  // Only show for a FINISHED contest. We do NOT need peopel vote stacking cause they know results.
  if ($node->webform['status'] == FALSE) {
    global $user;
    return node_access('view', $node, $user);
  }
  return FALSE;
}

/**
 * Menu access call for _vaxia_webform_results_table().
 */
function _proposal_webform_results_access($node) {
  // Only show for a FINISHED contest. We do NOT need peopel vote stacking cause they know results.
  if ($node->webform['status'] == FALSE) {
    return webform_results_access($node, $account = NULL);
  }
  return FALSE;
}

/**
 * Override normal webform_results_table(),
 */
function _proposal_webform_results_table($node, $pager_count = 0) {
  if (isset($_GET['results']) && is_numeric($_GET['results'])) {
    $pager_count = $_GET['results'];
  }
  // Get all the submissions for the node.
  $header = theme('webform_results_table_header', array('node' => $node));
  $submissions = webform_get_submissions($node->nid, $header, $pager_count);
  global $user;
  if (!webform_results_access($node, $user)) {
    foreach ($submissions as $sid => $data) {
      $submissions[$sid]->uid = '';
      $submissions[$sid]->name = '*****';
      $submissions[$sid]->remote_addr = '***.***.***.***';
    }
  }
  $total_count = webform_get_submission_count($node->nid);
  $output = theme('webform_results_table', array(
    'node' => $node,
    'components' => $node->webform['components'],
    'submissions' => $submissions,
    'total_count' => $total_count,
    'pager_count' => $pager_count)
  );
  if ($pager_count) {
    $output .= theme('pager');
  }
  return $output;
}

/**
 * Implements hook_node_view().
 */
function proposal_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'proposal') {
    $date = date('m/d/Y', strtotime('+2 weeks', $node->changed));
    drupal_set_message(t('This proposal will stay open for two weeks since it was last updated. ' .
      'It is set to close on @date.',
      array('@date' => $date)));
    $node->content['proposal_help'] = array(
      '#markup' => '</br></br>' . t('<b>Proposal help:</b></br>Proposals are meant to be a way to formally make a request for the input of site members. Forum threads and five-star ' .
      'ratings are not accurate enough for the big things. So here\'s how this works:</br> ' .
      '<ul> ' .
      '<li>If you change your mind after you vote, you will be able to go back in and delete or change your vote up until the proposal closes.</li> ' .
      '<li>The form will be open for two weeks, after which it will automatically close.</li> ' .
      '<li>If the original poster edits it in that timespan the timer will re-set. This is to make sure everyone can get a chance to weigh in.</li> ' .
      '<li>Only players active when the proposal was created can vote on it. This is to avoid ballot stuffing.</li> ' .
      '<li>No one, not even the original poster will be able to see the names or IP addresses of the people do vote.</li> ' .
      '<li>After the two week window has passed, the proposal will close and results will be publicly availble in a tab on this page.</li> ' .
      '</ul>'),
      '#weight' => 1000,
    );
  }
}

/**
 * Implements hook_theme_registry_alter().
 * Remove the exposure of sensitive material from the user facing interface.
 */
function proposal_theme_registry_alter(&$theme_registry) {
  $theme_registry['webform_token_help']['theme path'] = drupal_get_path('module', 'proposal');
  $theme_registry['webform_token_help']['function'] = 'proposal_webform_token_help';
}

/**
 * Implements theme_webform_token_help().
 * Remove the exposure of sensitive material from the user facing interface.
 */
function proposal_webform_token_help() {
  return '';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function proposal_form_webform_components_form_alter(&$form, &$form_state, $form_id) {
  $form['help'] = array(
    '#markup' => '<style>.form-item-add-name{margin-left:30px;}</style>' .
      '<div class="webform_component_help">' .
      'Once you add a form piece to the form you can shuffle them around to display them in the order you want them to display in. ' .
      'Mandatory form components are questions that must be answered before a submission can be made. ' .
      'The pieces you can add are mostly self-explanatory but a few you may not be familiar with: </br></br>' .
      '* Fieldset: Just a display wrapper - a box - around the other form pieces. </br>' .
      '* Grid: A way to display a table of options beside a label. </br>' .
      '* Markup: Text to display - useful for help messages. </br>' .
      '* Text area: Multi-line area for entering text. </br>' .
      '* Text field: Single-line area for entering text. </br>' .
      '</br>' .
      'Once you have all the form pieces you want, in the order you want them, click "Save" to set the proposal active.' .
      '</div>',
    '#weight' => -40,
  );
  // Recreate the options array for the types of components we want to allow.
  $options = webform_component_options();
  unset($options['email']);
  unset($options['pagebreak']);
  $form['add']['type']['#options'] = $options;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function proposal_form_webform_component_edit_form_alter(&$form, &$form_state, $form_id) {
  $form['help'] = array(
    '#markup' => '<div class="webform_component_help">' .
      'Edit the individual pieces of your form here. A name is required, as is a form_key so that the form submission system can recognize the ' .
      'value later. Where you see the form ask for "Key-value pairs", the format is key|value - where the Key is stored in the database (no worries ' .
      'almost anything you pick is ok), and the Value is what is shown to the person selecting options on your form. </br></br>' .
      '</div>',
    '#weight' => -40,
  );
  // Remove private fields.
  unset($form['display']['private']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function proposal_form_proposal_node_form_alter(&$form, &$form_state, $form_id) {
  // Insert our submit call before webforms call to make sure we complete properly.
  // Since webform doesn't allow us to mark the content type as a primary.
  $form['actions']['submit']['#submit'][] = '_proposal_form_proposal_node_form_submit';
}

/**
 * Form submit callback().
 */
function _proposal_form_proposal_node_form_submit($form, &$form_state) {
  // Get the node.
  $node = node_load($form_state['nid']);
  // Set up the webform defaults if node hasn't yet.
  if (!isset($node->webform)) {
    $node->webform = webform_node_defaults();
  }
  if ($node->webform == webform_node_defaults()) {
    // Insert the webform.
    $node->webform['nid'] = $node->nid;
    $node->webform['record_exists'] = (bool) drupal_write_record('webform', $node->webform);
    // Set the webform body
    $node->body[$entity_created->language][0]['value'] = $output;
    $node->webform['confirmation'] = t('Thank you for participating!');
    $node->webform['confirmation_format'] = 'plain_text';
    $node->webform['submit_limit'] = 1;
    // Set the per-role submission access control.
    foreach (user_roles() as $rid => $role_name) {
      if ($role_name == 'voting player') {
        $node->webform['roles'] = array();
        $node->webform['roles'] = array($rid);
      }
    }
    // Save the node.
    node_save($node);
  }
  drupal_set_message(t('The webform %title has been updated. Add new fields to your webform with the form below.',
    array('%title' => $form_state['values']['title'])));
  $form_state['redirect'] = 'node/' . $form_state['nid'] . '/webform/components';
}

/**
 * Implements hook_form_alter().
 */
function proposal_form_alter(&$form, &$form_state, $form_id) {
  
  // If we're viewing a webform.
  // Why hook_form_alter and not hook_form_FORM_ID_alter? Because webform's form id varies: webform_client_form_NID.
  if (strstr($form_id, 'webform_client_form') !== FALSE) {
    // Lockout.
    global $user;
    $this_user = user_load($user->uid);
    $lang = !empty($this_user->language) ? $this_user->language : 'und';
    $became_voter = isset($this_user->field_became_voter[$lang][0]['value']) ? $this_user->field_became_voter[$lang][0]['value'] : '1/1/3000 00:00:00';
    $became_voter = strtotime($became_voter);
    $webform_created = isset($form['#node']->created) ? $form['#node']->created : strtotime('now');
    if ($webform_created < $became_voter) {
      drupal_set_message('You gained voting privileges on this site after this webform was created. ' .
        'You are not eligible to vote on this issue.', 'warning');
      $form['#disabled'] = TRUE;
    }
  } // End alter of webform.

  // Edit the webform form for creators to limit to the right roles.
  if ($form_id == 'webform_configure_form' && $form['#node']->type == 'proposal') {
    // Change the form around.
    $form['submission']['status']['#disabled'] = TRUE;
    $form['submission']['status']['#description'] .= ' ' .
      t('This propsal will remain open for submission for two weeks from the last time it was updated.');
    // Leave it to the machine to open and close the proposal. No early, no late.
    $form['submission']['redirection']['#access'] = FALSE;
    // Only one per customer.
    $form['submission']['total_submit_limit']['#access'] = FALSE;
    $form['submission']['submit_limit']['#access'] = FALSE;
    $form['submission']['submit_limit']['enforce_limit']['#value'] = 'yes';
    $form['submission']['submit_limit']['enforce_limit']['#default_value'] = 'yes';
    $form['submission']['submit_limit']['submit_limit']['#value'] = 1;
    $form['submission']['submit_limit']['submit_limit']['#default_value'] = 1;
    // And only particular users, tweak the descriptions.
    $form['role_control']['#description'] = t('These permissions affect which roles can submit this webform. ' .
      'It does not prevent access to the webform page.');
    $allowed_roles = array('storyteller', 'evaluator', 'voting player');
    foreach ($form['role_control']['roles']['#options'] as $rid => $role_name) {
      if (!in_array($role_name, $allowed_roles)) {
        unset($form['role_control']['roles']['#options'][$rid]);
      }
      // And set voting players as default.
      if ($role_name == 'voting player') {
        $form['role_control']['roles']['#default_value'] = isset($form['role_control']['roles']['#default_value']) ?
          $form['role_control']['roles']['#default_value'] : array($rid);
      }
    }
    $form['role_control']['roles']['#description'] = t('Voting players are players who have posted on the site in the last six months.');
    // And no advanced formats.
    $form['advanced']['#access'] = FALSE;
  }

  return $form;
}
