<?php
/**
 * @file
 * Drupal needs this blank file.
 */

include_once('cold_storage.features.inc');

/**
 * Implements hook_rules_action_info().
 */
function cold_storage_rules_action_info() {
  $actions = array(
    'cold_storage_rules_unpub_nodes' => array(
      'label' => t('Unpublish user nodes'), 
      'parameter' => array(
        'user' => array(
          'type' => 'user',
          'label' => t('User'),
        ),
        'node_type' => array(
          'type' => 'list<text>',
          'label' => t('Node type'),
          'options list' => '_cold_storage_type_select',
          'description' => t('The type of nodes to apply this to.'),
        ),
      ), 
      'group' => t('Cold storage'), 
    ),
    'cold_storage_rules_pub_nodes' => array(
      'label' => t('Publish user nodes'), 
      'parameter' => array(
        'user' => array(
          'type' => 'user',
          'label' => t('User'),
        ),
        'node_type' => array(
          'type' => 'list<text>',
          'label' => t('Node type'),
          'options list' => '_cold_storage_type_select',
          'description' => t('The type of nodes to apply this to.'),
        ),
      ), 
      'group' => t('Cold storage'), 
    ),
  );
  // Add workflow rules.
  if (module_exists('workflow_rules')) {
    $actions['cold_storage_rules_unpub_nodes']['parameter']['current_state'] = array(
      'type' => 'list<integer>',
      'label' => t('Current workflow state'),
      'options list' => '_cold_storage_workflow_select',
      'description' => t('The workflow state to set or none to ignore.'),
    );
    $actions['cold_storage_rules_unpub_nodes']['parameter']['workflow_state'] = array(
      'type' => 'list<integer>',
      'label' => t('New workflow state'),
      'options list' => '_cold_storage_workflow_select',
      'description' => t('The workflow state to set or none to ignore.'),
    );
    $actions['cold_storage_rules_unpub_nodes']['parameter']['workflow_comment'] = array(
      'type' => 'text',
      'label' => t('Workflow Comment'),
      'description' => t('The workflow comment to set.'),
      'optional' => TRUE,
    );
    $actions['cold_storage_rules_pub_nodes']['parameter']['current_state'] = array(
      'type' => 'list<integer>',
      'label' => t('Current workflow state'),
      'options list' => '_cold_storage_workflow_select',
      'description' => t('The workflow state to set or none to ignore.'),
    );
    $actions['cold_storage_rules_pub_nodes']['parameter']['workflow_state'] = array(
      'type' => 'list<integer>',
      'label' => t('New workflow state'),
      'options list' => '_cold_storage_workflow_select',
      'description' => t('The workflow state to set or none to ignore.'),
    );
    $actions['cold_storage_rules_pub_nodes']['parameter']['workflow_comment'] = array(
      'type' => 'text',
      'label' => t('Workflow Comment'),
      'description' => t('The workflow comment to set.'),
      'optional' => TRUE,
    );
  }
  return $actions;
}

/**
 * Wrapper around states select options, add the workflow none.
 */
function _cold_storage_workflow_select() {
  $options['_NA'] = t('None selected');
  if (module_exists('workflow_rules')) {
    $options['_ANY'] = t('Any workflow');
    $options = $options + _workflow_rules_action_select();
  }
  return $options;
}

/**
 * Wrapper around states select options, add the workflow none.
 */
function _cold_storage_type_select() {
  $options = array()
  foreach (node_type_get_types() as $type => $type_def) {
    $options[$type] = $type_def->name;
  }
  return $options;
}

/**
 * Rules action handler.
 */
function cold_storage_rules_unpub_nodes($this_user, $types, $currents = NULL, $news = NULL, $comment = NULL) {
  // Get all nodes for the given types.
  $nodes = array();
  foreach ($types as $type) {
    $nodes = $nodes + node_load_multiple(array(), array('uid' => $this_user->uid, 'type' => $type));
  }
  // For each node.
  foreach ($nodes as $node) {
    // Update the node workflow too.
    if (module_exists('workflow_rules')) {
      // If new is not set to no-state or any state.
      if (!in_array('_NA', $news) && !in_array('_ANY', $news)) {
        $this_state = workflow_node_current_state($node);
        // If current is not set OR is set to include the current.
        if (in_array('_NA', $currents) || in_array('_ANY', $currents) || in_array($this_state, $currents)) {
          workflow_rules_set_state($node, $news, $comment);
        }
      }
    }
    // Update the state.
    $node->status = 0;
    node_save($node);
  }
  // Flush Entity Cache record.
  if (module_exists('entitycache')) {
    cache_clear_all('*', 'cache_entity_node', TRUE);
  }
}

/**
 * Rules action handler.
 */
function cold_storage_rules_pub_nodes($this_user, $types, $currents = NULL, $news = NULL, $comment = NULL) {
  // Get all nodes for the given types.
  $nodes = array();
  foreach ($types as $type) {
    $nodes = $nodes + node_load_multiple(array(), array('uid' => $this_user->uid, 'type' => $type));
  }
  // For each node.
  foreach ($nodes as $node) {
    // Update the node workflow too.
    if (module_exists('workflow_rules')) {
      // If new is not set to no-state or any state.
      if (!in_array('_NA', $news) && !in_array('_ANY', $news)) {
        $this_state = workflow_node_current_state($node);
        // If current is not set OR is set to include the current.
        if (in_array('_NA', $currents) || in_array('_ANY', $currents) || in_array($this_state, $currents)) {
          workflow_rules_set_state($node, $news, $comment);
        }
      }
    }
    // Update the state.
    $node->status = 1;
    node_save($node);
  }
  // Flush Entity Cache record.
  if (module_exists('entitycache')) {
    cache_clear_all('*', 'cache_entity_node', TRUE);
  }
}