<?php
/**
 * @file
 * Code for the Personal Rooms feature.
 */

include_once 'personal_rooms.features.inc';

/**
 * Implements hook_permission().
 */
function personal_rooms_permission() {
  return array(
    'edit personal_rooms' => array(
      'title' => t('Edit personal_rooms'),
      'description' => t('Edit personal_rooms.'),
    ),
    'admin personal_rooms' => array(
      'title' => t('Admin personal_rooms'),
      'description' => t('Admin personal_rooms.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function personal_rooms_menu() {
  // Autocompletes.
  $items['admin/rpg/personal_rooms'] = array(
    'title' => 'Personal rooms',
    'description' => 'Administer personal rooms',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_personal_rooms_settings'),
    'access arguments' => array('admin personal_rooms'),
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function personal_rooms_menu_alter(&$items) {
  $items['node/%node/edit']['access callback'] = '_personal_rooms_edit_access';
  return $items;
}

/**
 * Menu access permission.
 */
function _personal_rooms_edit_access($op, $node) {
  // Not using the normal access pages here because
  // we don't really want to give full edit access, we're
  // just going to use the edit page as a already-available
  // form to allow users to make the changes for their rooms.
  if ($node->type == 'rpg_chatroom' && user_access('edit personal_rooms')) {
     $character = _personal_rooms_character_owner($node);
     if (!empty($character)) {
       global $user;
       if ($character->uid == $user->uid) {
         return TRUE;
       }
     }
  }
  // Else return the normal node_access call.
  module_load_include('inc', 'node', 'node.pages');
  return node_access($op, $node);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function personal_rooms_form_rpg_chatroom_node_form_alter(&$form, &$form_state, $form_id) {
  // Only for rpg chatrooms.
  if ($form['#node']->type == 'rpg_chatroom' && user_access('edit personal_rooms')) {
    // Get node.
    $node = node_load($form['#node']->nid);
    // Check for normal access. If you don't have normal access, then you're here for a room edit.
    if (!node_access('update', $node)) {
      // Change the title, and fields for mature posting and access only.
      $allowed_edit = variable_get('personal_rooms_fields_edit', '');
      $allowed_edit = _personal_rooms_prep_setting_list($allowed_edit);
      $allowed_view = variable_get('personal_rooms_fields_view', '');
      $allowed_view = _personal_rooms_prep_setting_list($allowed_view);
      // Set access limits.
      foreach (element_children($form) as $child) {
        // Initially remove from the form.
        if ((strpos($child, 'field_') === 0 || $child == 'title') && !in_array($child, $allowed_edit)) {
          $form[$child]['#access'] = FALSE;
        }
        // But enable viewing the current setting if allowed.
        if ((strpos($child, 'field_') === 0 || $child == 'title') && in_array($child, $allowed_view)) {
          $form[$child]['#access'] = TRUE;
          $form[$child]['#disabled'] = TRUE;
          $form[$child]['#default_value'] = isset($form[$child]['#default_value']) ? $form[$child]['#default_value'] : '';
          $form[$child]['#value'] = isset($form[$child]['#value']) ? $form[$child]['#value'] : $form[$child]['#default_value'];
        }
      }
    }
  }
}

/**
 * Helper function, prep a list of values from settings.
 */
function _personal_rooms_prep_setting_list($string) {
  $string = explode("\n", $string);
  foreach ($string as $index => $value) {
    $string[$index] = trim($value);
  }
  return $string;
}

/**
 * Get player who owns room.
 */
function _personal_rooms_character_owner($node) {
  $found = db_query('SELECT entity_id FROM {field_data_field_personal_room} ' .
    'WHERE field_personal_room_nid = :nid',
    array(':nid' => $node->nid));
  foreach ($found as $nid) {
    return node_load($nid->entity_id);
  }
}

/**
 * Menu callback form for admin settings.
 */
function _personal_rooms_settings($form, &$form_state) {
  $form['personal_rooms_fields_edit'] = array(
    '#title' => 'Edit room fields',
    '#description' => t('Room fields that can be edited by the player of the owning character.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('personal_rooms_fields_edit', ''),
  );
  $form['personal_rooms_fields_view'] = array(
    '#title' => 'View room fields',
    '#description' => t('Room fields that can be viewed in edit by the player of the owning character.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('personal_rooms_fields_view', ''),
  );
  return system_settings_form($form);
}