<?php
/**
 * @file
 * Code for Departments. Limit and restrict the behavior of other systems on the site per department.
 */

include_once('department.features.inc');

/**
 * Implements hook_permission().
 */
function department_permission() {
  return array(
    'administrate departments'=> array(
      'title' => t('administrate departments'),
      'description' => t('Administrate departments.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function department_menu() {
  $items['admin/config/departments'] = array(
    'title' => 'Department settings',
    'description' => 'Department for administration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_department_admin_settings'),
    'access arguments' => array('administrate departments'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Menu callback.
 */
function _department_admin_settings($form, &$form_state) {
  $default_departments = implode("\n", array('Setting', 'System', 'Social') );
  $departments = variable_get('departments', $default_departments);
  $form['departments'] = array(
    '#title' => t('Available departments'),
    '#description' => t('List departments available on the site, one per row.'),
    '#type' => 'textarea',
    '#default_value' => $departments,
  );
  // Department associated roles.
  $form['roles'] = array(
    '#type' => 'fieldset',
    '#title' => t('Department associated role.'),
    '#description' => t('Each department has a role that grants access to voting and other memebership features.'),
  );
  $departments = explode("\n", $departments);
  foreach ($departments as $department) {
    $name = preg_replace("/[^A-Za-z0-9 ]/", '', $department); // Remove all but space and alphanumeric.
    $name = str_replace(' ', '_', strtolower($name)); // Replace space with underscore.
    $name = trim(strtolower($name));
    $form['roles']['department_roles_' . $name] = array(
      '#type' => 'select',
      '#title' => t('Department role: ' . $department),
      '#options' => user_roles(),
      '#default_value' => variable_get('department_roles_' . $name, array()),
    );
  }
  // Set vacation cutoff time.
  if (module_exists('vacation')) {
    $form['department_vacation_cutoff'] = array(
      '#title' => t('Vacation substitute cutoff'),
      '#description' => t('Vacation length at which a second in command is required.'),
      '#type' => 'textarea',
      '#default_value' => variable_get('department_vacation_cutoff', '2 weeks'),
    );
  }
  $form['#submit'][] = '_department_admin_settings_submit';
  return system_settings_form($form);
}

/**
 * Menu callback submit.
 */
function _department_admin_settings_submit($form, &$form_state) {
  // Set the election positions for saving.
  $departments = isset($form_state['values']['departments']) ? $form_state['values']['departments'] : '';
  $departments = explode("\n", $departments);
  foreach ($departments as $index => $department) {
    $departments[$index] = str_replace("\n", '', trim($department));
  }
  variable_set('election_positions', implode(' ' . t('Lead') . "\n", $departments) . ' ' . t('Lead') );
  // Set the election roles for proposal voting permissions.
  foreach ($departments as $department) {
    $name = preg_replace("/[^A-Za-z0-9 ]/", '', $department); // Remove all but space and alphanumeric.
    $name = str_replace(' ', '_', strtolower($name)); // Replace space with underscore.
    $name = trim(strtolower($name));
    if (!empty($form_state['values']['department_roles_' . $name])) {
      $selected_role = $form_state['values']['department_roles_' . $name];
      user_role_grant_permissions($selected_role, array('vote on proposal'));
    }
  }
}

// Make sure the election form only shows the positions for leads of departments.
// We want to make sure we have things properly limited to just the departments.
/**
 * Implements hook_form_FORM_ID_alter().
 */
function department_form__election_admin_settings_alter(&$form, &$form_state) {
  // Over-ride the election positions.
  $default_departments = implode("\n", array('Setting', 'System', 'Social') );
  $departments = variable_get('departments', $default_departments);
  $departments = explode("\n", $departments);
  foreach ($departments as $index => $department) {
    $departments[$index] = str_replace("\n", '', trim($department));
  }
  $departments = implode(' ' . t('Lead') . "\n", $departments) . ' ' . t('Lead');
  $form['election_positions'] = array(
    '#title' => t('Available positions'),
    '#description' => t('List postitions available on the site per department, one per row.'),
    '#type' => 'textarea',
    '#disabled' => TRUE,
    '#default_value' => $departments,
    '#value' => $departments,
  );
}

/**
 * Implements hook_node_view().
 */
function department_node_view($node, $view_mode, $langcode) {

  // Only override the displays for proposals.
  if ($node->type == 'proposal') {
    // Get department unformation.
    $default_departments = implode("\n", array('Setting', 'System', 'Social') );
    $departments = variable_get('departments', $default_departments);
    $departments = explode("\n", $departments);
    $department_roles = array();
    foreach($departments as $department) {
      $name = preg_replace("/[^A-Za-z0-9 ]/", '', $department); // Remove all but space and alphanumeric.
      $name = str_replace(' ', '_', strtolower($name)); // Replace space with underscore.
      $name = trim(strtolower($name));
      $rid = variable_get('department_roles_' . $name, array());
      if (!empty($rid) && in_array($rid, $node->webform['roles'])) {
        $department_roles[$rid] = $department;
      }
    }
    // Display.
    if (!empty($department_roles)) {
      $node->content['department_roles'] = array(
        '#markup' => '<div class="department_roles" style="margin:1em 0;">' .
          t('Departments that can vote on this are: ' . implode(', ', $department_roles)) .
          '</div>',
        '#weight' => 1002,
      );
    }
  }

}

// For proposals, if the proposal field exists to limit proposals, then
// consult proposal categories by enabled departments to limit available roles as needed.
/**
 * Implements hook_form_FORM_ID_alter().
 */
function department_form_webform_components_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];
  // If we're not looking at a proposal, bail out with the normal view.
  if ($node->type != 'proposal') {
    return; // Use defaults.
  }
  // Rename roles by departments so we know which role has which value to the end user.
  $default_departments = implode("\n", array('Setting', 'System', 'Social') );
  $departments = variable_get('departments', $default_departments);
  $departments = explode("\n", $departments); 
  // Automatically add voter since proposal will add that role.
  $role = user_role_load_by_name('voter');
  if ($role) {
    $human_role_names[$role->rid][] = t('Voters');
  }
  foreach ($departments as $index => $department) {
    $name = preg_replace("/[^A-Za-z0-9 ]/", '', $department); // Remove all but space and alphanumeric.
    $name = str_replace(' ', '_', strtolower($name)); // Replace space with underscore.
    $name = trim(strtolower($name));
    $role = variable_get('department_roles_' . $name);
    $human_role_names[$role][] = $department . ' ' . t('Department');
  }
  foreach ($human_role_names as $role => $human_names) {
    $human_role_names[$role] = implode(', ', $human_names);
  }
  // Now with the mapping in place, rename the roles to the right departments.
  // And remove anything not in a listed department or all role.
  if (!empty($form['role_control']['roles']['#options'])) {
    $role_options = $form['role_control']['roles']['#options'];
    foreach ($role_options as $rid => $role_name) {
      if (in_array($rid, array_keys($human_role_names))) {
        $role_options[$rid] = webform_tt('user:rid:' . $rid . ':name', $human_role_names[$rid]);
      }
      else {
        unset($role_options[$rid]);
      }
    }
    $form['role_control']['roles']['#options'] = $role_options;
    $form['role_control']['roles']['#title'] = t('Departments that can vote on this proposal');
    // And unset the disallowed, we're not using that if we're using departments.
    $form['role_control']['disallowed_fieldset']['#access'] = FALSE;
  }
}

// If vacation exists, modify that form to make sure that elected department members
// select a second in command - and mark them as tempoary leads and trigger rules.
/**
 * Implements hook_rules_event_info().
 */
function department_rules_event_info() {
  $items = array(
    'department_promote_lead' => array(
      'label' => t('Promote temp lead'),
      'group' => t('Vacation'),
      'variables' => array(
        'user' => array(
            'type' => 'user',
            'label' => t('Vacation user'),
        ),
        'temp_lead' => array(
            'type' => 'user',
            'label' => t('Temporary lead'),
        ),
        'until' => array(
            'type' => 'date',
            'label' => t('Until'),
        ),
      ),
    ),
    'department_unpromote_lead' => array(
      'label' => t('Unpromote temp lead'),
      'group' => t('Vacation'),
      'variables' => array(
        'user' => array(
            'type' => 'user',
            'label' => t('Vacation user'),
        ),
        'temp_lead' => array(
            'type' => 'user',
            'label' => t('Temporary lead'),
        ),
      ),
    ), 
  );
  return $items;
}

/**
 * Implements hook_vacation_form().
 */
function department_vacation_form($form, $form_state) {
  // If the user is in department leadership roles, they need to set a department second.
  // If they're gonna be gone for more than set time or if they are retiring.
  if (isset($form['vacation'])) {
    $this_user = user_load($form['#user']->uid);
    $has_extra = $form['#vacation']['has_extra'];
    $vacation = $form['#vacation']['vacation'];
    if ($has_extra && !$vacation) {
      $elected_role = variable_get('election_role', '');
      if (in_array($elected_role, array_keys($this_user->roles))) {
        $department_members = array();
        $run_roles = variable_get('election_run_roles', array());
        $role_users = db_query('SELECT uid FROM {users_roles} WHERE rid IN (:run_roles)', array(':run_roles' => $run_roles));
        foreach ($role_users as $role_user) {
          if ($role_user->uid != $form['#user']->uid) {
            $tmp_user = user_load($role_user->uid);
            // If this user is not already an elected user.
            if (!in_array($elected_role, array_keys($tmp_user->roles))) {
              $department_members[$tmp_user->uid] = $tmp_user->name;
            }
          }
        }
        if (count($department_members) > 0) {
          $form['vacation']['temp_replacement'] = array(
            '#type' => 'select',
            '#title' => t('Temporary replacement'),
            '#description' => t('Because you hold an elected position on this site, we need to make sure ' .
              'that your position is covered while you are away. Please select your temporary replacement. ' .
              'If you are gone for logner than expected, your temporary replacement may be automatically ' .
              'promoted to take over the position.'),
            '#options' => $department_members,
            '#default_value' => array_unshift(array_keys($department_members)),
            '#states' => array(
              'visible' => array(
                ':input[name="vacation_end"]' => array(
                  array('value' => t('2 weeks')),
                  array('value' => t('1 month')),
                  array('value' => t('2 months')),
                  array('value' => t('3 months')),
                  array('value' => t('indefinitely')),
                ),
              ),
            ),
          );
          $form['vacation']['vacation_submit']['#submit'][] ='_department_vacation_form_submit';
        }
        else {
          $form['vacation']['temp_replacement'] = array(
            '#markup' => t('There are no available temporary replacements for your position. You cannot go on vacation at this time.'),
          );
          $form['vacation']['vacation_submit']['#access'] = FALSE;
        }
      }
    }
  }
  return $form;
}

/**
 * Form submit handler.
 */
function _department_vacation_form_submit($form, &$form_state) {
  if (isset($form['vacation'])) {
    $selected_tmp = isset($form_state['values']['temp_replacement']) ? $form_state['values']['temp_replacement'] : 0;
    $vacation_end = isset($form_state['values']['vacation_end']) ? $form_state['values']['vacation_end'] : FALSE;
    if ($selected_tmp && $vacation_end) {
      // Set the temp leadership replacement.
      $department_vacation_tmp = variable_get('department_vacation_tmp', array());
      $department_vacation_tmp[ $form['#user']->uid ] = $selected_tmp;
      variable_set('department_vacation_tmp', $department_vacation_tmp);
      // Trigger rules event to promote user and handle additional reactions.
      if (function_exists('rules_invoke_event')) {
        $selected_tmp = user_load($selected_tmp);
        $vacationer = user_load($form['#user']->uid);
        $date = strtotime($vacation_end);
        rules_invoke_event('department_promote_lead', $vacationer, $selected_tmp, $date);
      }
    }
  }
}

/**
 * Implements hook_vacation_off_post().
 */
function department_vacation_off_post($vacation, $returned) {
  if ($returned) {
    $uid = $vacation->uid;
    // Unset the temp leadership replacement if there is one.
    $department_vacation_tmp = variable_get('department_vacation_tmp', array());
    $assigned_tmp = 0;
    if (isset($department_vacation_tmp[$uid])) {
      $assigned_tmp = $department_vacation_tmp[$uid];
      unset($department_vacation_tmp[$uid]);
    }
    variable_set('department_vacation_tmp', $department_vacation_tmp);
    // Trigger rules event to depromote user and handle additional reactions.
    if (function_exists('rules_invoke_event') && !empty($assigned_tmp)) {
      $selected_tmp = user_load($assigned_tmp);
      $vacationer = user_load($uid);
      rules_invoke_event('department_unpromote_lead', $vacationer, $selected_tmp);
    }
  }
}
