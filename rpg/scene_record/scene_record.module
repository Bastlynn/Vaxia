<?php
/**
 * @file
 * Provide a clean UI for scene records from a player crafter PoV.
 */

include_once 'scene_record.features.inc';

/**
 * Implements hook_permission().
 */
function scene_record_permission() {
  return array(
    'use scene helper' => array(
      'title' => t('use scene helper'),
      'description' => t('Use scene helper.'),
    ),
    'view own scenes' => array(
      'title' => t('view own scenes'),
      'description' => t('View own scenes.'),
    ),
    'view all scenes' => array(
      'title' => t('view all scenes'),
      'description' => t('View all scenes.'),
    ),
    'rule all scenes' => array(
      'title' => t('rule all scenes'),
      'description' => t('Rule all scenes.'),
    ),
  );
}

/**
 * Implements hook_node_presave().
 */
function scene_record_node_presave($node) {
  if (!empty($node->type) && $node->type == 'scene') {
    // Just put the comments in the right order.
    $comments = !empty($node->field_rp_posts[$node->language]) ? $node->field_rp_posts[$node->language] : array();
    if (!empty($comments)) {
      $new_order = array();
      foreach ($comments as $comment) {
        $new_order[ $comment['target_id'] ] = $comment;
      }
      ksort($new_order);
      $node->field_rp_posts[$node->language] = array_values($new_order);
    }
  }
}

/**
 * Implements hook_node_view().
 */
function scene_record_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && !empty($node->type) && $node->type == 'scene') {
    global $user;
    $has_character = FALSE;
    // Process comments initially to get values.
    $comments = !empty($node->field_rp_posts[$node->language]) ? $node->field_rp_posts[$node->language] : array();
    $new_order = array();
    if (!empty($comments)) {
      foreach ($comments as $comment) {
        $new_order[ $comment['target_id'] ] = comment_load($comment['target_id']);
      }
      ksort($new_order);
      $comments = array_values($new_order);
    }
    $owns_scene = ($user->uid == $node->uid && user_access('view own scenes'));
    $characters = _scene_record_has_characters($comments);
    $is_submit = ($node->workflow_state_name == 'submitted') ? TRUE : FALSE;
    $has_character = FALSE;
    foreach ($characters as $character) {
      if ($user->uid == $character->uid) {
        $has_character = TRUE;
      }
    }
    // If we can view all scenes, or made the scene, or has a character in the scene allow view.
    if (user_access('view all scenes', $user) || $owns_scene || $has_character) {
      // Get additional display results.
      $goals = !empty($node->field_goal[$node->language]) ? $node->field_goal[$node->language] : array('0' => array('value' => 'misc'));
      // Put together the posts for display.
      if (!empty($comments)) {
        // Loop over each post and create the table display rows.
        unset($node->content['field_rp_posts']['#theme']);
        $node->content['field_rp_posts']['#markup'] = _scene_record_view_table($node, $comments, $goals);
      }
      // Allow user to view the form for ruling scenes.
      if (user_access('rule all scenes') && $is_submit && !$owns_scene && !$has_character) {
        $scene_ruler = drupal_get_form('scene_record_ruler_form', $node, $comments, $goals);
        $node->content['scene_ruler_form']['#markup'] = drupal_render($scene_ruler);
        $node->content['scene_ruler_form']['#weight'] = !empty($node->content['field_rp_posts']['#weight']) ? $node->content['field_rp_posts']['#weight'] + 0.5 : 100;
      }
    }
    else {
      drupal_set_message('This is not your scene or you are not able to see other\'s scenes.');
      drupal_goto('/');
    }
  }
}

/**
 * Form callback for scene ruling.
 */
function scene_record_ruler_form($form, &$form_state, $node, $comments, $goals) {
  $form['#node'] = $node;
  $form['#comments'] = $comments;
  $form['#goals'] = $goals;
  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function scene_record_form_scene_node_form_alter(&$form, &$form_state, $form_id) {
  // Get node.
  $node = isset($form['#node']) ? $form['#node'] : '';
  if (!empty($node)) {
    // Get comments! From form value first if possible.
    $comments = !empty($form_state['values']['field_rp_posts'][$node->language]) ?
      $form_state['values']['field_rp_posts'][$node->language] : array();
    // Empty? Ok, fallback to node.
    if (empty($comments)) {
      $comments = !empty($node->field_rp_posts[$node->language]) ? $node->field_rp_posts[$node->language] : array();
    }
    // And put the comments together.
    $new_order = array();
    if (!empty($comments)) {
      foreach ($comments as $comment) {
        if (!empty($comment['target_id'])) {
          $new_order[ $comment['target_id'] ] = comment_load($comment['target_id']);
        }
      }
      ksort($new_order);
      $comments = array_values($new_order);
      $goals = !empty($node->field_goal[$node->language]) ? $node->field_goal[$node->language] : array('0' => array('value' => 'misc'));
      $scene = _scene_record_view_table($node, $comments, $goals);
    }
  }
  // Add to the form.
  $form['scene_record_assist'] = array(
    '#type' => 'fieldset',
    '#title' => t('Scene assistant'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => !empty($form['field_rp_posts']['#weight']) ? $form['field_rp_posts']['#weight'] - 0.5 : 100,
  );
  $form['scene_record_assist']['scene_record_erfresh'] = array(
    '#type' => 'button',
    '#value' => t('Refresh scene'),
    '#ajax' => array(
      'callback' => '_scene_record_form_ajax',
      'wrapper' => 'scene-record-form-display',
    ),
  );
  $form['scene_record_assist']['scene_record_display'] = array(
    '#prefix' => '<div id="scene-record-form-display">',
    '#suffix' => '</div>',
    '#type' => 'item',
    '#markup' => $scene,
  );
  $form['scene_record_assist']['scene_record_erfresh2'] = array(
    '#type' => 'button',
    '#value' => t('Refresh scene'),
    '#ajax' => array(
      'callback' => '_scene_record_form_ajax',
      'wrapper' => 'scene-record-form-display',
    ),
  );
}

/**
 * Handles ajax callback.
 */
function _scene_record_form_ajax($form, $form_state) {
  // Otherwise return our own.
  return $form['scene_record_assist']['scene_record_display'];
}

/**
 * Return a display of the info as a renderable form.
 */
function _scene_record_view_table($node, $comments = array(), $goals) {
  // Make sure in right order.
  $new_order = array();
  if (!empty($comments)) {
    foreach ($comments as $comment) {
      $new_order[ $comment->cid ] = $comment;
    }
    ksort($new_order);
    $comments = $new_order;
  }
  // Get values from the sub modules for results.
  $comments = _scene_record_calculate_results($node, $comments, $goals);
  // Loop for display to get the display of the comment as well as result.
  foreach ($comments as $cid => $comment) {
    // Get comment display.
    $comment_display = t('Unable to load comment - it has been deleted and may be in archive.');
    if (is_object($comment) && !empty($comment->cid)) {
      $comment_uri = comment_uri($comment);
      $character = _scene_record_get_character($comment);
      if (empty($character)) {
        $user = user_load($comment->uid);
        $comment_by = $user->name;
      }
      else {
       $comment_by = $character->title;
      }
      $comment_display = check_markup($comment->comment_body[$comment->language][0]['value'], $comment->comment_body[$comment->language][0]['format']);
      if (!empty($comment->field_ooc[$comment->language][0]['value'])) {
        $comment_ooc = check_markup($comment->field_ooc[$comment->language][0]['value'], $comment->field_ooc[$comment->language][0]['format']);
        $comment_display .= 'OOC: ' . $comment_ooc;
      }
      // Get dice display for the comment.
      $dice_rolls = _dice_roller_get_roll($cid, 'c');
      $comment_display .= !empty($dice_rolls) ? theme('dice_roller_results', array('dice_rolls' => $dice_rolls)) : '';
      // Add to rows.
      $rows[] = array(
        $comment->results_character,
        $comment_display,
        array(
        'data' => $comment->results_messages,
        'nowrap' => array('nowrap'),
        ),
      );
    }
  }
  // Return the table.
  // And render it.
  $headers = array(
    t('Character'),
    t('Scene posts'),
    t('Results'),
  );
  return theme('table', array('headers' => $headers, 'rows' => $rows));
}

/**
 * Helper function, given a set of partial or full comments, calculate results.
 */
function _scene_record_calculate_results($node, $comments, $goals) {
  $results = '';
  // Get a list of callbacks implemented.
  $callbacks = array();
  foreach (module_invoke_all('scene_record_goal_info') as $callback => $callback_info) {
    foreach ($goals as $delta => $value) {
      $goal = $value['value'];
      if (in_array('all', (array) $callback_info['type']) || in_array($goal, (array) $callback_info['type'])) {
        $callbacks[] = $callback;
      }
    }
  }
  // We can always adjust on the fly on the next round, but in the meantime we
  // Need to have the dice values going in and coming out we do the ruling.
  $difficulty = !empty($node->field_difficulty[$node->language][0]['value']) ?
    $node->field_difficulty[$node->language][0]['value'] : 25;
  $rp_bonus = !empty($node->field_rp_bonus[$node->language][0]['value']) ? 10: 0;
  // Define the context.
  $context = array(
    'diff' => $difficulty,
    'bonus' => $rp_bonus,
    'ongoing' => array(),
  );
  // Loop over all comments for values by the filters callbacks.
  foreach ($comments as $cid => $comment) {
    // Run through each callback for the goal and return.
    $message_items = array();
    // Only call if we have a proper comment here.
    if (is_object($comment) && !empty($comment->cid)) {
      // This means running diffs, PP, winsby and other rulings here.
      $dice_rolls = _dice_roller_get_roll($comment->cid, 'c');
      $context['roll_set'] = _dice_ruler_read_dice($dice_rolls, $context['diff'], $context['bonus']);
      $context['character'] = _scene_record_get_character($comment);
      $comment->results_character = '<b>' . l($context['character']->title, 'node/' . $context['character']->nid) . '</b>';
      // Save some ongoing settings.
      $context['ongoing']['_ruling']['PPs'] = isset($context['ongoing']['_ruling']['PPs']) ?
        $context['ongoing']['_ruling']['PPs'] : 0;
      $context['ongoing']['_ruling']['1s'] = isset($context['ongoing']['_ruling']['1s']) ?
        $context['ongoing']['_ruling']['1s'] : 0;
      $context['ongoing']['_ruling']['100s'] = isset($context['ongoing']['_ruling']['100s'])  ?
        $context['ongoing']['_ruling']['100s'] : 0;
      $context['ongoing']['_ruling']['crit_fails'] = isset($context['ongoing']['_ruling']['crit_fails']) ?
        $context['ongoing']['_ruling']['crit_fails'] : 0;
      $context['ongoing']['_ruling']['crit_wins'] = isset($context['ongoing']['_ruling']['crit_wins']) ?
        $context['ongoing']['_ruling']['crit_wins'] : 0;
      // Update our context values.
      $context['ongoing']['_ruling']['PPs'] += $context['roll_set']['PPs'];
      $context['ongoing']['_ruling']['1s'] += $context['roll_set']['1s'];
      $context['ongoing']['_ruling']['100s'] += $context['roll_set']['100s'];
      $context['ongoing']['_ruling']['crit_fails'] += $context['roll_set']['crit_fails'];
      $context['ongoing']['_ruling']['crit_wins'] += $context['roll_set']['crit_wins'];
      // Star generating messages.
      // The first item is Always the link back to the item.
      $message_items[] = '<b>' . l(t('Link to post'), 'node/' . $comment->nid,
        array('fragment' => 'comment-' . $comment->cid)) . '</b>';
      if (!empty($context['roll_set']['mights'])) {
        $message_items[]  = '<b>' . t('Diff @difficulty / RP bonus @rp_bonus', array('@difficulty' => $difficulty, '@rp_bonus' => $rp_bonus)) . '</b>';
        $pp_verb = 'gained';
        $by_verb = 'wins';
        if (!$context['roll_set']['success']) {
          $pp_verb = 'lost';
          $by_verb = 'fails';
        }
        $message_items[] = '<b>' . t('Roll @by_verb by @bys, @pp_verb @pps PP.', array(
            '@by_verb' => $by_verb, '@bys' =>  number_format($context['roll_set']['by']),
            '@pp_verb' => $pp_verb, '@pps' =>  number_format($context['roll_set']['PPs']),
          ))  . '</b>';
        // And mark for feedback.
        $message_items[] = t('<b><span style="color:green;">@critwin crit wins-by</span> /' .
          ' <span style="color:red;">@critfail crit fails-by</span></b>', array(
            '@critwin' => $context['ongoing']['_ruling']['crit_wins'],
            '@critfail' => $context['ongoing']['_ruling']['crit_fails']
          ));
        $message_items[] = t('<b>@PP PP / <span style="color:green;">@100 100s</span> /' .
          ' <span style="color:red;">@1 1s</span></b>', array(
            '@PP' => number_format($context['ongoing']['_ruling']['PPs']),
            '@100' => $context['ongoing']['_ruling']['100s'],
            '@1' => $context['ongoing']['_ruling']['1s']
          ));
      }
      else {
        $message_items[] = '<b>' . t('No roll found to evaluate. <span style="color:red;">Skipped!</span>') . '</b>';
      }
      // Do the initial dice rolls.
      foreach ($callbacks as $callback) {
        if (function_exists($callback)) {
          // After each call, the context should be updated as needed on the
          // Internal context for the calling system.
          $new_items = $callback($comment, $context);
          $message_items = array_merge($message_items, (array) $new_items);
        }
      }
      // Allow for last second alter.
      drupal_alter('scene_record_goal_info', $message_items, $context);
      // Display.
      if (!empty($message_items)) {
        $comment->results_messages .= theme('item_list', array('items' => $message_items));
      }
    }
  }
  return $comments;
}

/**
 * Implements hook_scene_record_goal_info.
 */
function scene_record_scene_record_goal_info() {
  // @todo - make this not a hard coded thing, maybe use taxonomy or something.
  // Or a function return instead of the standard select dropdown.
  // Goal options: misc, item, silver, fame.
  return array(
    '_scene_record_calculate_results_all' => array(
      'label'  => 'A running total of all results.',
      'type' => array('all'),
    ),
  );
}

/**
 * Scene results callback function.
 */
function _scene_record_calculate_results_all($comment, &$context) {
  $message_items = array();
  $kxp_ratio = variable_get('vaxia_kxp_ratio', 70);
  // kxp / xp by character.
  $context['ongoing']['scene_record']['all'] = !empty($context['ongoing']['scene_record']['all']) ?
    $context['ongoing']['scene_record']['all'] : array();
  $character = !empty($context['character']) ? $context['character'] : 0;
  if (!empty($character)) {
    $context['ongoing']['scene_record']['all'][$character->title] = isset($context['ongoing']['scene_record']['all'][$character->title]) ?
      $context['ongoing']['scene_record']['all'][$character->title] : 0;
    $kxp = _vaxia_figure_kxp($comment->comment_body[$comment->language][0]['value']);
    $message_items[] = t('@kxp KXP in this post.', array('@kxp' => $kxp));
    $context['ongoing']['scene_record']['all'][$character->title] += $kxp;
  }
  // Show amount.
  $total_kxp = $total_xp = 0;
  foreach ($context['ongoing']['scene_record']['all'] as $name => $kxp) {
    $message_items[] = t('@kxp KXP for %name.', array('%name' => $name, '@kxp' => $kxp));
    $xp = 0;
    if ($kxp >= $kxp_ratio) {
      $xp = floor($kxp / $kxp_ratio);
    }
    $message_items[] = t('@xp XP for %name', array('%name' => $name, '@xp' => $xp));
    $total_kxp += $kxp;
    $total_xp += $xp;
  }
  // Show the total for all if we have more than one poster.
  if (count($context['ongoing']['scene_record']['all'] ) > 1) {
    $message_items[] = t('Total @total_kxp KXP for all.', array('@total_kxp' => $total_kxp));
    $message_items[] = t('Total @total_xp XP for all.', array('@total_xp' => $total_xp));
  }
  return $message_items;
}

/**
 * Helper function, get characters in set of comments.
 */
function _scene_record_has_characters($comments) {
  $characters = array();
  foreach ($comments as $comment) {
    $character = _scene_record_get_character($comment);
    if (!empty($character)) {
      $characters[] = $character;
    }
  }
  return $characters;
}

/**
 * Helper function, get a character for a comment.
 */
function _scene_record_get_character($comment) {
  // Setup a static cache.
  static $characters = array();
  // Get the nid.
  $nid = !empty($comment->field_comment_character[$comment->language][0]['nid']) ?
    $comment->field_comment_character[$comment->language][0]['nid'] : '';
  // If we don't have it in the cache yet, load it.
  if (empty($characters[$nid])) {
    $characters[$nid] = node_load($nid);
  }
  // And return.
  return $characters[$nid];
}
