<?php
/**
 * @file
 * Provide a clean UI for scene records from a player crafter PoV.
 */

include_once 'scene_record.features.inc';

/**
 * Implements hook_permission().
 */
function scene_record_permission() {
  return array(
    'use scene helper' => array(
      'title' => t('use scene helper'),
      'description' => t('Use scene helper.'),
    ),
    'view own scenes' => array(
      'title' => t('view own scenes'),
      'description' => t('View own scenes.'),
    ),
    'view all scenes' => array(
      'title' => t('view all scenes'),
      'description' => t('View all scenes.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function scene_record_menu() {
  $items['vaxia/scene_record/autocomplete/room'] = array(
    'title' => 'Scene record assist room lookup',
    'type' => MENU_CALLBACK,
    'page callback' => '_scene_record_autocomplete_room',
    'access arguments' => array('use scene helper'),
  );
  return $items;
}

/**
 * Implements hook_node_presave().
 */
function scene_record_node_presave($node) {
  if ($view_mode == 'full' && !empty($node->type) && $node->type == 'scene') {
    // Just put the comments in the right order.
    $comments = !empty($node->field_rp_posts[$node->language]) ? $node->field_rp_posts[$node->language] : array();
    if (!empty($comments)) {
      $new_order = array();
      foreach ($comments as $comment) {
        $new_order[ $comment['target_id'] ] = $comment;
      }
      asort($new_order);
      $node->field_rp_posts[$node->language] = array_values($new_order);
    }
  }
}

/**
 * Implements hook_node_view().
 */
function scene_record_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && !empty($node->type) && $node->type == 'scene') {
    global $user;
    if (user_access('view all scenes', $user) || ($user->uid == $node->uid && user_access('view own scenes', $user))) {
      // Get comments.
      $comments = !empty($node->field_rp_posts[$node->language]) ? $node->field_rp_posts[$node->language] : array();
      $goal = !empty($node->field_goal[$node->language][0]['value']) ? $node->field_goal[$node->language][0]['value'] : 'misc';
      // Put together the posts for display.
      if (!empty($comments)) {
        $new_order = array();
        foreach ($comments as $comment) {
          $new_order[ $comment['target_id'] ] = $comment;
        }
        asort($new_order);
        $comments = array_values($new_order);
        // Loop over each post and create the table display.
        $rows = _scene_record_view_table($comments, $goal);
        $headers = array(
          t('Scene posts'),
          t('Results'),
        );
        unset($node->content['field_rp_posts']['#theme']);
        $node->content['field_rp_posts']['#markup'] = theme('table', array('headers' => $headers, 'rows' => $rows));
      }
    }
    else {
      drupal_set_message('This is not your scene or you are not able to see other\'s scenes.');
      drupal_goto('/');
    }
  }
}

/**
 * Return a display of the info as a renderable form.
 */
function _scene_record_view_table($found_comments = array(), $goal) {
  $comments = array();
  foreach ($found_comments as $comment) {
    $comments[ $comment['target_id']] = $comment['entity'];
  }
  asort($comments);
  // Get values.
  $comments = _scene_record_calculate_results($comments, $goal);
  // Loop for display.
  foreach ($comments as $cid => $comment) {
    // Get comment display.
    $comment_display = t('Unable to load comment - it has been deleted and may be in archive.');
    if (is_object($comment) && !empty($comment->cid)) {
      $comment_uri = comment_uri($comment);
      $character = !empty($comment->field_comment_character[$comment->language][0]['nid']) ?
        node_load($comment->field_comment_character[$comment->language][0]['nid']) : '';
      if (empty($character)) {
        $user = user_load($comment->uid);
        $comment_by = $user->name;
      }
      else {
       $comment_by = $character->title;
      }
      $comment_display = check_markup($comment->comment_body[$comment->language][0]['value'], $comment->comment_body[$comment->language][0]['format']);
      if (!empty($comment->field_ooc[$comment->language][0]['value'])) {
        $comment_ooc = check_markup($comment->field_ooc[$comment->language][0]['value'], $comment->field_ooc[$comment->language][0]['format']);
        $comment_display .= 'OOC: ' . $comment_ooc;
      }
      // Get dice display.
      $dice_rolls = _dice_roller_get_roll($cid, 'c');
      $comment_display .= !empty($dice_rolls) ? theme('dice_roller_results', array('dice_rolls' => $dice_rolls)) : '';
      // Add to rows.
      $rows[] = array(
        $comment_display,
        array(
        'data' => $comment->results,
        'nowrap' => array('nowrap'),
        ),
      );
    }
  }
  // Return the rows.
  return $rows;
}

/**
 * Helper function, given a set of partial or full comments, calculate results.
 */
function _scene_record_calculate_results($comments, $goal) {
  // Loop over all comments for values.
  $kxp_ratio = variable_get('vaxia_kxp_ratio', 70);
  foreach ($comments as $cid => $comment) {
    // Set defaults if not already set.
    if (is_object($comment) && !empty($comment->cid)) {
      // Set defaults if not already set.
      $comment->roll_type = isset($comment->roll_type) ? $comment->roll_type : 'gen_pp';
      $comment->set_bonus = isset($comment->set_bonus) ? $comment->set_bonus : 0;
      $comment->difficulty = isset($comment->difficulty) ? $comment->difficulty : 40;
      // Get message.
      $message_items = array(
        '_all' => _scene_record_calculate_results_all($comment, $context),
        'item' => _scene_record_calculate_results_item($comment, $context),
        'silver' => _scene_record_calculate_results_silver($comment, $context),
        'fame' => _scene_record_calculate_results_fame($comment, $context),
      );
      
    }
    // Display.
    $comment->results = theme('item_list', array('items' => $message_items['_all']));
    if (!empty($message_items[$goal])) {
      $comment->results .= theme('item_list', array('items' => $message_items[$goal]));
    }
  }
  return $comments;
}

function _scene_record_calculate_results_all(&$comment, &$context) {
  // Set defaults.
  $context['total_kxp'] = !empty($context['total_kxp']) ? $context['total_kxp'] : 0;
  $context['character_kxp'] = !empty($context['character_kxp']) ? $context['character_kxp'] : array();
  // Get message info.
  $kxp = _vaxia_figure_kxp($comment->comment_body[$comment->language][0]['value']);
  $context['total_kxp'] = $context['total_kxp'] + $kxp;
  // Figure out how much overall XP for this scene.
  $total_xp = 0;
  if ($context['total_kxp'] >= $kxp_ratio) {
    $total_xp = floor($context['total_kxp'] / $kxp_ratio);
  }
  $character = !empty($comment->field_comment_character[$comment->language][0]['nid']) ?
    node_load($comment->field_comment_character[$comment->language][0]['nid']) : '';
  if (!empty($character)) {
    $context['character_kxp'][$character->title] = isset($context['character_kxp'][$character->title]) ?
      $context['character_kxp'][$character->title] + $kxp : $kxp;
  }
  // Set the overall post results.
  $message_items[] = t('KXP: :kxp', array(':kxp' => $kxp));
  $message_items[] = t('Total KXP: :total_kxp', array(':total_kxp' => $context['total_kxp']));
  $message_items[] = t('Total XP: :total_xp', array(':total_xp' => $total_xp));
  // Set the results per character.
  foreach ($context['character_kxp'] as $name => $total_char_kxp) {
    // Figure out how much overall XP for this scene.
    $total_xp = 0;
    if ($total_char_kxp >= $kxp_ratio) {
      $total_xp = floor($total_char_kxp / $kxp_ratio);
    }
    $message_items[] = t('Total :name KXP: :total_char_kxp', array(':name' => $name, ':total_char_kxp' => $total_char_kxp));
    $message_items[] = t('Total :name XP: :total_xp', array(':name' => $name, ':total_xp' => $total_xp));
  }
  return $message_items;
}

function _scene_record_calculate_results_item(&$comment, &$context) {
  // Set defaults.
  $context['points_built'] = !empty($context['points_built']) ? $context['points_built'] : 0;
  $context['critwin'] = !empty($context['critwin']) ? $context['critwin'] : 0;
  $context['critfail'] = !empty($context['critfail']) ? $context['critfail'] : 0;
  $context['ongoing_100'] = !empty($context['ongoing_100']) ? $context['ongoing_100'] : 0;
  $context['ongoing_1'] = !empty($context['ongoing_1']) ? $context['ongoing_1'] : 0;
  $context['ongoing_prep_bonus'] = !empty($context['ongoing_prep_bonus']) ? $context['ongoing_prep_bonus'] : 0;
  $context['ongoing_prep_diff'] = !empty($context['ongoing_prep_diff']) ? $context['ongoing_prep_diff'] : 0;
  // Get the info.
  $diff_txt = t('Difficulty @difficulty.', array('@difficulty' => $comment->difficulty));
  $comment->rp_bonus = isset($comment->rp_bonus) ? $comment->rp_bonus : 10;
  $rp_bonus = isset($comment->rp_bonus) ? $comment->rp_bonus : 10;
  // Grab rolls and start calculations.
  $dice_rolls = _dice_roller_get_roll($comment->cid, 'c');
  if (!empty($dice_rolls)) {
    $set_bonus_txt = '';
    $no_roll_txt = '';
    if (!empty($comment->set_bonus)) {
      $context['ongoing_prep_bonus'] += $comment->set_bonus;
      $set_bonus_txt = t('Add @set_bonus flat circumstance bonus.', array('@set_bonus' => $comment->set_bonus));
    }
    $mights = array();
    $rolls = array();
    foreach ($dice_rolls as $index => $dice_roll) {
      $results = explode(',', $dice_rolls[$index]['roll_result']);
      $might = array_pop($results);
      $might = explode('=', $might);
      $mights[] = isset($might[0]) ? trim($might[0]) : 0;
      $rolls[] = isset($results[0]) ? trim($results[0]) : 0;
    }
    $roll_ruling = array();
    if (count($mights) == 1) {
      $roll_ruling = _dice_ruler_make_ruling(
        $mights[0] + $rp_bonus + $context['ongoing_prep_bonus'],
        $comment->difficulty - $context['ongoing_prep_diff'],
        0,
        $rolls[0]
      );
      if ($rolls[0] == 1) {
        $context['ongoing_1']++;
      }
      if ($rolls[0] == 100) {
        $context['ongoing_100']++;
      }
    }
    if (count($mights) > 1) {
      $roll_ruling = _dice_ruler_make_two_trait_ruling(
        $mights[0] + $rp_bonus + $context['ongoing_prep_bonus'],
        $comment->difficulty - $context['ongoing_prep_diff'],
        0,
        $rolls[0],
        $mights[1] + $rp_bonus + $context['ongoing_prep_bonus'],
        $comment->difficulty - $context['ongoing_prep_diff'],
        0,
        $rolls[1]
      );
      if ($rolls[0] == 1) {
        $context['ongoing_1']++;
      }
      if ($rolls[0] == 100) {
        $context['ongoing_100']++;
      }
      if ($rolls[1] == 1) {
        $context['ongoing_1']++;
      }
      if ($rolls[1] == 100) {
        $context['ongoing_100']++;
      }
    }
    if (!empty($roll_ruling)) {
      $winsby_generated = $roll_ruling[6];
      $PP_generated = $roll_ruling[7];
      if ($winsby_generated < 0 && $comment->roll_type == 'gen_pp') { // If just gen_add, then add.
        $lost_PP = floor( $context['points_built'] * (($winsby_generated * -1) / 100) );
        $roll_txt = t('Roll lost ' . number_format($lost_PP, 2) . 'PP, ' . number_format($winsby_generated, 2) . ' winsby.');
        $context['points_built'] -= $lost_PP;
        if ($winsby_generated <= -25) {
          $context['critfail']++;
        }
      }
      if ($winsby_generated >= 0 && $comment->roll_type == 'gen_pp') { // If just gen_add, then add.
        $roll_txt = t('Roll generated ' . number_format($PP_generated, 2) . ' PP, ' . number_format($winsby_generated, 2) . ' winsby.');
        $context['points_built'] += $PP_generated;
        if ($winsby_generated >= 25) {
          $context['critwin']++;
        }
      }
      if ($comment->roll_type == 'prep_diff') { // If prep_diff, divide, add.
        $roll_txt = t('Roll did not change diff for future rolls.');
        $new_prep_diff += floor($PP_generated / 7);
        if ($new_prep_diff > $context['ongoing_prep_diff']) {
          $roll_txt = t('Roll reduces diff for future rolls.');
          $context['ongoing_prep_diff'] = $new_prep_diff; // Only apply if the bonus is greater.
        }
      }
      if ($comment->roll_type == 'prep_bon') { // If prep_bonus, divide, add.
        $roll_txt = t('Roll did not add bonus for future rolls.');
        $new_prep_bonus += floor($PP_generated / 7);
        if ($new_prep_bonus > $context['ongoing_prep_bonus']) {
          $roll_txt = t('Roll added bonus for future rolls.');
          $context['ongoing_prep_bonus'] = $new_prep_bonus; // Only apply if the bonus is greater.
        }
      }
      if ($comment->roll_type == 'no_calcs') { // If just set_bonus, then add.
        $roll_txt = t('No roll on this post.');
      }
    }
    $might_1 = empty($mights[0]) ? '' : $mights[0];
    $might_2 = empty($mights[1]) ? '' : '/ ' . $mights[1];
    $break_1 = empty($set_bonus_txt) ? '' : '</br>';
    $break_2 = empty($roll_txt) ? '' : '</br>';
    $critwin_text = $context['critwin'];
    if ($context['critwin'] == 0) {
      $critwin_text = 'no';
    }
    $critfail_text = $context['critfail'];
    if ($context['critfail'] == 0) {
      $critfail_text = 'no';
    }
    $ongoing_100_text = $context['ongoing_100'];
    if ($context['ongoing_100'] == 0) {
      $ongoing_100_text = 'no';
    }
    $ongoing_1_text = $context['ongoing_1'];
    if ($context['ongoing_1'] == 0) {
      $ongoing_1_text = 'no';
    }
    // Set item values.
    if ($comment->difficulty != 25) {
      $pp_needed_per_point = (1 + (($comment->difficulty - 40) / 10) ) * 25;
      $points_built_max = (1 + (($comment->difficulty - 40) / 10) ) * 5;
      $points_built_primary = floor($context['points_built'] / $pp_needed_per_point);
      $points_built_secondary = floor($context['points_built'] / ($pp_needed_per_point * 1.5));
      $points_built_skills= floor($context['points_built'] / ($pp_needed_per_point * 0.75));
    }
    // Figure out comment display.
    $message_items[] = t('%roll_txt' . $break_2, array('%roll_txt' => $roll_txt));
    $message_items[] = t('@diff_text', array('@diff_text' => $diff_txt));
    $message_items[] = t('Mights @might1 @might2',
      array('@might1' => !empty($might_1) ? $might_1 : 0, '@might2' => !empty($might_2) ? $might_2 : 0));
    $message_items[] = t('@set_bonus_txt' . $break_1 . '@rp RP bonus',
      array('@set_bonus_txt' => $set_bonus_txt, '@rp' => $rp_bonus));
    $message_items[] = t('@prep Prep bonus / @diff Diff mod',
      array('@prep' => $context['ongoing_prep_bonus'], '@diff' => $context['ongoing_prep_diff'] * -1));
    $message_items[] = t('<b><span style="color:green;">@critwin crit wins-by</span> / <span style="color:red;">@critfail crit fails-by</span></b>',
      array('@critwin' => $critwin_text, '@critfail' => $critfail_text));
    $message_items[] = t('<b>@PP PP / <span style="color:green;">@100 100s</span> / <span style="color:red;">@1 1s</span></b>',
      array('@PP' => number_format($context['points_built']),'@100' => $ongoing_100_text, '@1' => $ongoing_1_text));
    // More messages.
    if ($comment->difficulty != 25) {
      $message_items[] = '<b>Bonus points for primary stats: ' . $points_built_primary . '</b>';
      $message_items[] = '<b>Bonus points for secondary stats: ' . $points_built_secondary . '</b>';
      $message_items[] = '<b>Bonus points for skills: ' . $points_built_skills . '</b>';
      $message_items[] = '<b>Max points at this difficulty: ' . $points_built_max . '</b>';
      $message_items[] = '<b>PP effect: ' . number_format($context['points_built'], 2) . '</b>';
    }
    else {
      $message_items[] = '<b>PP generated for enchanting one time use: ' . number_format($context['points_built'], 2) . '</b>';
      $message_items[] = '<b>PP generated for enchanting 3 uses: ' . floor($context['points_built'] / 3) . '</b>';
      $message_items[] = '<b>PP generated for enchanting once a day: ' . floor($context['points_built'] / 50) . '</b>';
      $message_items[] = '<b>PP generated for enchanting at will: ' . floor($context['points_built'] / 150) . '</b>';
    }
  }
  else {
    $roll_txt = t('No roll on this post.');
    // Figure out comment display.
    $message_items[] = t('%roll_txt' . $break_2, array('%roll_txt' => $roll_txt));
  }
  return $message_items;
}

function _scene_record_calculate_results_silver(&$comment, &$context) {
  // Set defaults.
  $context['points_built'] = !empty($context['points_built']) ? $context['points_built'] : 0;
  // Set silver XP amount.
  $message_items[] = '<b>Up to ' . number_format($context['points_built'], 2) . ' silver.</b>';
  return $message_items;
}

function _scene_record_calculate_results_fame(&$comment, &$context) {
  // Set defaults.
  $context['posts'] = !empty($context['posts']) ? $context['posts'] : 0;
  if (strlen($comment->comment_body[$comment->language][0]['value']) > 100) {
    $context['posts']++;
  }
  // Set silver XP amount.
  $message_items[] = '<b>Up to ' . floor($context['posts'] / 2) . ' reputation.</b>';
  return $message_items;
}
