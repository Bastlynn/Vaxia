<?php
/**
 * @file
 * Provide a clean UI for scene records from a player crafter PoV.
 */

include_once 'scene_record.features.inc';

/**
 * Implements hook_permission().
 */
function scene_record_permission() {
  return array(
    'use scene helper' => array(
      'title' => t('use scene helper'),
      'description' => t('Use scene helper.'),
    ),
    'view own scenes' => array(
      'title' => t('view own scenes'),
      'description' => t('View own scenes.'),
    ),
    'view all scenes' => array(
      'title' => t('view all scenes'),
      'description' => t('View all scenes.'),
    ),
  );
}

/**
 * Implements hook_node_presave().
 */
function scene_record_node_presave($node) {
  if (!empty($node->type) && $node->type == 'scene') {
    // Just put the comments in the right order.
    $comments = !empty($node->field_rp_posts[$node->language]) ? $node->field_rp_posts[$node->language] : array();
    if (!empty($comments)) {
      $new_order = array();
      foreach ($comments as $comment) {
        $new_order[ $comment['target_id'] ] = $comment;
      }
      asort($new_order);
      $node->field_rp_posts[$node->language] = array_values($new_order);
    }
  }
}

/**
 * Implements hook_node_view().
 */
function scene_record_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && !empty($node->type) && $node->type == 'scene') {
    global $user;
    $has_character = FALSE;
    // Process comments initially to get values.
    $comments = !empty($node->field_rp_posts[$node->language]) ? $node->field_rp_posts[$node->language] : array();
    $new_order = array();
    if (!empty($comments)) {
      foreach ($comments as $comment) {
        $new_order[ $comment['target_id'] ] = comment_load($comment['target_id']);
      }
      asort($new_order);
      $comments = array_values($new_order);
    }
    $owns_scene = ($user->uid == $node->uid && user_access('view own scenes'));
    $characters = _scene_record_has_characters($comments);
    $has_character = FALSE;
    foreach ($characters as $character) {
      if ($user->uid == $character->uid) {
        $has_character = TRUE;
      }
    }
    // If we can view all scenes, or made the scene, or has a character in the scene allow view.
    if (user_access('view all scenes', $user) || $owns_scene || $has_character) {
      // Get additional display results.
      $goal = !empty($node->field_goal[$node->language][0]['value']) ? $node->field_goal[$node->language][0]['value'] : 'misc';
      // Put together the posts for display.
      if (!empty($comments)) {
        // Loop over each post and create the table display rows.
        $rows = _scene_record_view_table($comments, $goal);
        // And render it.
        $headers = array(
          t('Scene posts'),
          t('Results'),
        );
        unset($node->content['field_rp_posts']['#theme']);
        $node->content['field_rp_posts']['#markup'] = theme('table', array('headers' => $headers, 'rows' => $rows));
      }
    }
    else {
      drupal_set_message('This is not your scene or you are not able to see other\'s scenes.');
      drupal_goto('/');
    }
  }
}

/**
 * Return a display of the info as a renderable form.
 */
function _scene_record_view_table($comments = array(), $goal) {
  // Get values from the sub modules for results.
  $comments = _scene_record_calculate_results($comments, $goal);
  // Loop for display to get the display of the comment as well as result.
  foreach ($comments as $cid => $comment) {
    // Get comment display.
    $comment_display = t('Unable to load comment - it has been deleted and may be in archive.');
    if (is_object($comment) && !empty($comment->cid)) {
      $comment_uri = comment_uri($comment);
      $character = !empty($comment->field_comment_character[$comment->language][0]['nid']) ?
        node_load($comment->field_comment_character[$comment->language][0]['nid']) : '';
      if (empty($character)) {
        $user = user_load($comment->uid);
        $comment_by = $user->name;
      }
      else {
       $comment_by = $character->title;
      }
      $comment_display = check_markup($comment->comment_body[$comment->language][0]['value'], $comment->comment_body[$comment->language][0]['format']);
      if (!empty($comment->field_ooc[$comment->language][0]['value'])) {
        $comment_ooc = check_markup($comment->field_ooc[$comment->language][0]['value'], $comment->field_ooc[$comment->language][0]['format']);
        $comment_display .= 'OOC: ' . $comment_ooc;
      }
      // Get dice display.
      $dice_rolls = _dice_roller_get_roll($cid, 'c');
      $comment_display .= !empty($dice_rolls) ? theme('dice_roller_results', array('dice_rolls' => $dice_rolls)) : '';
      // Add to rows.
      $link = l('Link', 'node/' . $comment->nid, array('fragment' => 'comment-' . $comment->cid));
      $rows[] = array(
        $link . '</br>' . $comment_display,
        array(
        'data' => $comment->results,
        'nowrap' => array('nowrap'),
        ),
      );
    }
  }
  // Return the rows.
  return $rows;
}

/**
 * Helper function, given a set of partial or full comments, calculate results.
 */
function _scene_record_calculate_results($comments, $goal) {
  $results = '';
  // Get a list of callbacks implemented.
  $callbacks = array();
  foreach (module_invoke_all('scene_record_goal_info') as $callback => $callback_info) {
    if (in_array('all', (array) $callback_info['type']) || in_array($goal, (array) $callback_info['type'])) {
      $callbacks[] = $callback;
    }
  }
  // Loop over all comments for values by the filters callbacks.
  foreach ($comments as $cid => $comment) {
    // Run through each callback for the goal and return.
    $message_items = array();
    if (is_object($comment) && !empty($comment->cid)) {
      // Get message.
      foreach ($callbacks as $callback) {
        if (function_exists($callback)) {
          $new_items = (array) $callback($comment, $context);
          $message_items = array_merge($message_items, $new_items);
        }
      }
      // Display.
      if (!empty($message_items)) {
        $comment->results .= theme('item_list', array('items' => $message_items));
      }
    }
  }
  return $comments;
}

/**
 * Implements hook_scene_record_goal_info.
 */
function scene_record_scene_record_goal_info() {
  // @todo - make this not a hard coded thing, maybe use taxonomy or something.
  // Or a function return instead of the standard select dropdown.
  // Goal options: misc, item, silver, fame.
  return array(
    '_scene_record_calculate_results_all' => array(
      'label'  => 'A running total of all results.',
      'type' => array('all'),
    ),
  );
}

function _scene_record_calculate_results_all($comment, &$context) {
  $message_items = array();
  $kxp_ratio = variable_get('vaxia_kxp_ratio', 70);
  // Set defaults.
  $context['total_kxp'] = !empty($context['total_kxp']) ? $context['total_kxp'] : 0;
  $context['character_kxp'] = !empty($context['character_kxp']) ? $context['character_kxp'] : array();
  // Get message info.
  $kxp = _vaxia_figure_kxp($comment->comment_body[$comment->language][0]['value']);
  $context['total_kxp'] = $context['total_kxp'] + $kxp;
  // Figure out how much overall XP for this scene.
  $total_xp = 0;
  if ($context['total_kxp'] >= $kxp_ratio) {
    $total_xp = floor($context['total_kxp'] / $kxp_ratio);
  }
  $character = !empty($comment->field_comment_character[$comment->language][0]['nid']) ?
    node_load($comment->field_comment_character[$comment->language][0]['nid']) : '';
  if (!empty($character)) {
    $context['character_kxp'][$character->title] = isset($context['character_kxp'][$character->title]) ?
      $context['character_kxp'][$character->title] + $kxp : $kxp;
  }
  // Set the overall post results.
  $message_items[] = t('KXP: :kxp', array(':kxp' => $kxp));
  $message_items[] = t('Total KXP: :total_kxp', array(':total_kxp' => $context['total_kxp']));
  $message_items[] = t('Total XP: :total_xp', array(':total_xp' => $total_xp));
  // Set the results per character.
  foreach ($context['character_kxp'] as $name => $total_char_kxp) {
    // Figure out how much overall XP for this scene.
    $total_xp = 0;
    if ($total_char_kxp >= $kxp_ratio) {
      $total_xp = floor($total_char_kxp / $kxp_ratio);
    }
    $message_items[] = t('Total :name KXP: :total_char_kxp', array(':name' => $name, ':total_char_kxp' => $total_char_kxp));
    $message_items[] = t('Total :name XP: :total_xp', array(':name' => $name, ':total_xp' => $total_xp));
  }
  return $message_items;
}

/**
 * Helper function, get characters in the comments.
 */
function _scene_record_has_characters($comments) {
  $characters = array();
  foreach ($comments as $comment) {
    $character = !empty($comment->field_comment_character[$comment->language][0]['nid']) ?
      node_load($comment->field_comment_character[$comment->language][0]['nid']) : '';
    if (!empty($character)) {
      $characters[] = $character;
    }
  }
  return $characters;
}

