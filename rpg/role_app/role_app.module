<?php
/**
 * @file
 * Drupal needs this blank file.
 */

include_once 'role_app.features.inc';

/**
 * Implements hook_permission().
 */
function role_app_permission() {
  return array(
    'view role application'=> array(
      'title' => t('view role application'),
      'description' => t('View role application.'),
    ),
    'administrate role application'=> array(
      'title' => t('administrate role application'),
      'description' => t('Administrate role application.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function role_app_menu() {
  $items['admin/rpg/role_app'] = array(
    'title' => 'Application settings',
    'description' => 'Settings for application approval for roles.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_role_app_admin_settings'),
    'access arguments' => array('administrate role application'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_node_view().
 */
function role_app_node_view($node, $view_mode, $langcode) {
  // Only override the displays for role_apps.
  if ($node->type == 'application') {
    module_load_include('inc', 'webform', 'includes/webform.report');
    // Show results if any.
    global $user;
    if ($node->uid == $user->uid || user_access('view role application') || user_access('administrate role application')) {
      $node->content['application_results'] = array(
        '#markup' => '<div class="application_result">' . webform_results_table($node) . '</div>',
        '#weight' => 1003,
      );
      // Check for the feedback settings for viewing results.
      $results = db_query("SELECT wd.data FROM {webform_submitted_data} wd " .
        "WHERE wd.nid = :nid " .
        "AND wd.cid = 1", // There is only the one form element.
        array(':nid' => $node->nid,));
      $count = 0;
      foreach ($results as $result) {
        if ($result->data == 'approve') {
          $count++;
        }
      }
      // Total eligable SH evals.
      $role = !empty($node->field_applied_role_id['und'][0]['value']) ? trim($node->field_applied_role_id['und'][0]['value']) : '_na';
      $approving = variable_get('role_app_approve_' . $role, '');
      $approvers = _role_app_get_possible_approvers($node->uid, $approving);
      $approvers = count($approvers);
      $percentage = ($count / $approvers) * 100 ; // Leave with decimals, cause that's valid. Math is like that.
      $node->content['application_sums'] = array(
        '#markup' => t('@count out of @approvers (@percentage %) have responded to this application.',
          array('@count' => $count, '@approvers' => $approvers, '@percentage' => $percentage)),
        '#weight' => 1004,
      );
    }
  }
}

/**
 * Implements hook_cron().
 */
function role_app_cron() {
  if (!function_exists('rules_invoke_event')) {
    return; // Bail out if no rules.
  }
  $last_run = variable_get('role_app_cron', 0);
  $yesterday = strtotime('-1 day');
  if ($last_run < $yesterday) {
    variable_set('role_app_cron', strtotime('now'));
    _role_app_cron_check_overdue();
  }
}

/**
 * Implements hook_rules_event_info().
 */
function role_app_rules_event_info() {
  $items = array(
    'role_app_is_overdue' => array(
      'label' => t('Application is overdue'),
      'variables' => array(
        'node' => array(
            'type' => 'node',
            'label' => t('Application'),
        ),
      ),
      'group' => t('Role Application'),
    ),
  );
  return $items;
}

/**
 * Implements hook_rules_condition_info.
 */
function role_app_rules_condition_info() {
  return array(
    'role_app_is_app_quiz' => array(
      'label' => t('Quiz is for application'), 
      'parameter' => array(
        'quiz' => array(
          'label' => t('Quiz'),
          'type' => 'node',
        ),
      ),
      'group' => t('Role Application'),
    ),
    'role_app_approved_app' => array(
      'label' => t('Check for approval'), 
      'parameter' => array(
        'webform' => array(
          'label' => t('Application Webform'),
          'type' => 'node',
        ),
      ),
      'group' => t('Role Application'),
    ),
  );
}

/**
 * Implements hook_rules_action_info.
 */
function role_app_rules_action_info() {
  return array(
    'role_app_create_app' => array(
      'label' => t('Create application'), 
      'parameter' => array(
        'user' => array(
          'type' => 'user',
          'label' => t('User'),
        ),
        'quiz' => array(
          'type' => 'node',
          'label' => t('Quiz'),
        ),
      ), 
      'group' => t('Role Application'),
    ),
    'role_app_set_role' => array(
      'label' => t('Set application role'), 
      'parameter' => array(
        'user' => array(
          'type' => 'user',
          'label' => t('User'),
        ),
        'rid' => array(
          'type' => 'text',
          'label' => t('Role ID'),
        ),
      ), 
      'group' => t('Role Application'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function role_app_form_alter(&$form, &$form_state, $form_id) {
  // If we're viewing a webform.
  // Why hook_form_alter and not hook_form_FORM_ID_alter? Because webform's form id varies: webform_client_form_NID.
  if (strstr($form_id, 'webform_client_form') !== FALSE) {
    $node = $form['#node'];
    // If we're not looking at a proposal, bail out with the normal view.
    if ($node->type != 'application') {
      return; // Use defaults.
    }
    // Check for ownership. If the owner made this role_app, they can't vote on it.
    global $user;
    if ($user->uid == $node->uid) {
      $form['#access'] = FALSE;
    }
  }
}

/**
 * Menu callback, admin form.
 */
function _role_app_admin_settings($form, &$form_state) {
  // Match roles to webform tests.
  $roles = user_roles(TRUE); // All roles except anon.
  $form['role_app_roles'] = array(
    '#type' => 'select',
    '#title' => t('Application roles'),
    '#description' => t('Select all roles that role_apps apply to.'),
    '#options' => $roles,
    '#multiple' => TRUE,
    '#default_value' => variable_get('role_app_roles', ''),
  );
  $form['application_approval_min'] = array(
    '#type' => 'text',
    '#title' => t('Approval percentage'),
    '#description' => t('Greater than or equal to percentage of possible approvers required to approve.'),
    '#default_value' => variable_get('application_approval_min', '75'),
  );
  $quizzes = _role_app_get_quizzes();
  $application_roles = variable_get('role_app_roles', array());
  foreach ($application_roles as $application_role) {
    $this_role = user_role_load($application_role);
    // Set the webform that matches for creating an role_app,
    // As well as additional configurations as needed for approvals.
    $form['role_app_settings'][$application_role] = array(
      '#type' => 'fieldset',
      '#title' => t('Settings for @role', array('@role' => $this_role->name)),
      '#description' => t('Configure the settings for each role role_app.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    // Returns node ids.
    $form['role_app_settings'][$application_role]['role_app_quiz_' . $application_role] = array(
      '#type' => 'select',
      '#title' => t('Application quiz'),
      '#description' => t('Select the quiz for this application.'),
      '#options' => $quizzes,
      '#multiple' => TRUE,
      '#default_value' => variable_get('role_app_quiz_' . $application_role, ''),
    );
    // Returns role ids.
    $form['role_app_settings'][$application_role]['role_app_eligible_' . $application_role] = array(
      '#type' => 'select',
      '#title' => t('Application eligable role'),
      '#description' => t('Select the eligible role for this application.'),
      '#options' => $roles,
      '#default_value' => variable_get('role_app_eligible_' . $application_role, ''),
    );
    $form['role_app_settings'][$application_role]['role_app_view_' . $application_role] = array(
      '#type' => 'select',
      '#title' => t('Application viewing role'),
      '#description' => t('Select the viewing role for this application.'),
      '#options' => $roles,
      '#multiple' => TRUE,
      '#default_value' => variable_get('role_app_view_' . $application_role, ''),
    );
    $form['role_app_settings'][$application_role]['role_app_approve_' . $application_role] = array(
      '#type' => 'select',
      '#title' => t('Application approving role'),
      '#description' => t('Select the approving role for this application.'),
      '#options' => $roles,
      '#multiple' => TRUE,
      '#default_value' => variable_get('role_app_approve_' . $application_role, ''),
    );
  }
  return system_settings_form($form);
}

/**
 * Helper function, Cron handler for overdue role_apps.
 */
function _role_app_cron_check_overdue() {
  $timeframe = strtotime('-1 week');
  $applications = db_query('SELECT n.nid FROM {node} n ' .
    'LEFT JOIN {webform} w ON w.nid = n.nid ' .
    'WHERE w.status = 1 '. // Where the webform is still open.
    'AND n.type = \'application\' ' . // And it's an role_app.
    'AND n.changed < :timeframe', // And it's been open for more than a week.
     array(':timeframe' => $timeframe));
  // Now that we have a list of role_apps that might qualify.
  $today = strtotime('now');
  foreach ($applications as $application) {
    $node = node_load($application->nid);
    // Execute the rule.
    rules_invoke_event('role_app_is_overdue', $node);
  }
}

/**
 * Rules condition handler.
 */
function role_app_is_app_quiz($quiz) {
  $role = role_app_get_quiz_role($quiz);
  if (!empty($role)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Rules condition handler.
 */
function role_app_approved_app($node) {
  $results = db_query("SELECT wd.data FROM {webform_submitted_data} wd " .
    "WHERE wd.nid = :nid " .
    "AND wd.cid = 1", // There is only the one form element.
    array(':nid' => $node->nid,));
  $count = 0;
  foreach ($results as $result) {
    if ($result->data == 'approve') {
      $count++;
    }
  }
  // Total eligable SH evals.
  $role = !empty($node->field_applied_role_id['und'][0]['value']) ? trim($node->field_applied_role_id['und'][0]['value']) : '_na';
  $approving = variable_get('role_app_approve_' . $role, '');
  $approvers = _role_app_get_possible_approvers($node->uid, $approving);
  $approvers = count($approvers);
  $percentage = ($count / $approvers) * 100 ; // Leave with decimals, cause that's valid. Math is like that.
  // Do we have quorum?
  if ($percentage >= variable_get('application_approval_min', '75')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Rules action handler.
 */
function role_app_create_app($user, $quiz) {
  $role = role_app_get_quiz_role($quiz);
  if (empty($role)) {
    drupal_set_message(t('No role found for this quiz, the application was not created.', array('@role' => $role)));
    return;
  }
  // Check eligible.
  $this_role = user_role_load($role);
  $eligible = variable_get('role_app_eligible_' . $role, '');
  if (empty($eligible) || !in_array($eligible, array_keys($user->roles))) {
    drupal_set_message(t('You are not eligable for @role, the application was not created.', array('@role' => $this_role->name)));
    return;
  }
  // Create new role_app node.
  $node = new stdClass();
  $node->title = t('@role Application (@name)', array('@name' => $user->name, '@role' => ucwords($this_role->name)));
  $node->type = 'application';
  $node->created = time();
  $node->changed = $node->created;
  $node->status = 1;
  $node->promote = 0;
  $node->sticky = 0;
  $node->format = 'wiki';
  $node->uid = $user->uid;
  $node->language = LANGUAGE_NONE;
  // Mark the values we're applying for.
  $node->body[$node->language][0]['value'] = role_app_get_answers($user, $quiz);
  $node->body[$node->language][0]['format'] = 'wiki';
  $node->field_applied_role_id[$node->language][0]['value'] = $role;
  // Save the node.
  node_save($node);
  // Add the webform.
  $node->webform['confirmation'] = t('Thank you!');
  $node->webform['confirmation_format'] = 'plain_text';
  $node->webform['submit_limit'] = 1;
  // Save the node
  node_save($node);
  // Set approving roles for users.
  $record = db_query('DELETE FROM {webform_roles} WHERE nid = :nid', array(':nid' => $node->nid));
  $approving = variable_get('role_app_approve_' . $role, '');
  foreach ($approving as $rid) {
    if (!empty($rid)) {
      db_insert('webform_roles')->fields(array('nid' => $node->nid, 'rid' => $rid))->execute();
    }
  }
  // Include the webform module that allows components to be created.
  module_load_include('inc', 'webform', 'includes/webform.components');
  // Create the standard webform field for approval.
  $items = 'approve|' .  t('Yes. I approve this candidate for @role.', array('@role' => $this_role->name)) . "\n" .
    'disapprove|' . t('No. I would like to see some improvements and have included the details below.');
  $component = array();
  $component['nid'] = $node->nid;
  $component['pid'] = 0;
  $component['form_key'] = 'approval';
  $component['name'] = t('Approve');
  $component['type'] = 'select';
  $component['mandatory'] = 1;
  $component['extra'] = array(
    'description' => '',
    'items' => $items,
    'multiple' => '0',
    'aslist' => '1',
    );
  $component['weight'] = 0;
  webform_component_insert($component);
  $component = array();
  $component['nid'] = $node->nid;
  $component['pid'] = 0;
  $component['form_key'] = 'comments';
  $component['name'] = t('Comments');
  $component['type'] = 'textarea';
  $component['mandatory'] = 1;
  $component['extra'] = array(
    );
  $component['weight'] = 1;
  webform_component_insert($component);
}

/**
 * Rules action handler.
 */
function role_app_set_role($user, $rid) {
  $rid = trim($rid);
  user_multiple_role_edit(array($user->uid), 'add_role', $rid);
}

/**
 * Helper function to get quizzes.
 */
function _role_app_get_quizzes() {
  $nodes = array();
  $results = db_query('SELECT n.nid, n.title FROM node n WHERE n.type = \'quiz\'');
  foreach ($results as $result) {
    $nodes[$result->nid] = $result->title;
  }
  return $nodes;
}

/**
 * Helper function, Get role associated with quiz.
 */
function role_app_get_quiz_role($quiz) {
  $roles = (array) variable_get('role_app_roles', array());
  foreach ($roles as $role) {
    $quizzes = variable_get('role_app_quiz_' . $role, '');
    if (!empty($quizzes) && in_array($quiz->nid, $quizzes)) {
      return $role;
    }
  }
  return '';
}

/**
 * Helper for rules. Given data, gather the quiz output.
 */
function role_app_get_answers($user, $node) {
  // Find the result ID for this test taken.
  $uid = $user->uid;
  $nid = $node->nid;
  $vid = $node->vid;
  $results = db_query("SELECT r.result_id FROM {quiz_node_results} r " .
    "WHERE r.uid = :uid " .
    "AND r.nid = :nid " .
    "AND r.vid = :vid " .
    "ORDER BY r.time_end DESC LIMIT 0,1 ",
    array(
    ':uid' => $uid,
    ':nid' => $nid,
    ':vid' => $vid,
    ));
  $rid = '';
  foreach ($results as $result) {
    $rid = $result->result_id;
  }
  if (empty($rid)) {
    drupal_set_message(t('An error was encountered, no result ID able to be found.'));
    return '';
  }
  // Now get the printed out set of answers.
  $questions = _quiz_get_answers($node, $rid);
  ksort($questions);
  $output = '';
  foreach ($questions as $question_nid => $question) {
    $q_title = $question->title;
    $full_question = node_load($question_nid);
    $q = $full_question->body[$full_question->language][0]['value'];
    $a = $question->answers[0]['answer'];
    $output .= '<h3><b>' . $q_title . '</b></h3><p><b>'. $q . '</b></p><p>' . $a . '</p><hr><br/>';
  }
  return $output;
}

/**
 * Helper function, get possible approvers.
 */
function _role_app_get_possible_approvers($applicant, $approving) {
  $approvers = array();
  foreach ($approving as $rid) {
    if (!empty($rid)) {
      $users = db_query('SELECT uid FROM {users_roles} WHERE rid = :rid', array('rid' => $rid));
      foreach ($users as $user) {
        if ($user->uid != $applicant) { // Don't count the self.
          $approvers[$user->uid] = $user->uid;
        }
      }
    }
  }
  watchdog('role_app', 'Found ' . count($approvers) . ' approvers.');
  return $approvers;
}
