diff --git a/favorites.install b/favorites.install
index 700bc64..df29617 100644
--- a/favorites.install
+++ b/favorites.install
@@ -49,9 +49,32 @@ function favorites_schema() {
         'size' => 'normal',
         'not null' => TRUE,
       ),
+      'weight' => array(
+        'description' => 'The weight of the favorite',
+        'type' => 'int',
+        'size' => 'normal',
+        'not null' => TRUE,
+        'default' => 0,
+      ),
     ),
     'primary key' => array('fid'),
     'indexes' => array('uid' => array('uid')),
   );
   return $schema;
 }
+
+/**
+ * Implements hook_update_N().
+ */
+function favorites_update_7001(&$sandbox) {
+  // Add the schema.
+  $weight = array(
+    'description' => 'The weight of the favorite',
+    'type' => 'int',
+    'size' => 'normal',
+    'not null' => TRUE,
+    'default' => 0,
+  );
+  db_add_field('favorites', 'weight', $weight);
+}
+
diff --git a/favorites.js b/favorites.js
index 7c33e07..f959469 100644
--- a/favorites.js
+++ b/favorites.js
@@ -31,6 +31,8 @@
           if (!fs.is('.collapsed')) {
             fs.find("a.fieldset-title").first().click();
           }
+         // Call draggable method after add favorite.
+          Drupal.behaviors.favoritesLinks.applyDraggable();
         }
       });
     },
@@ -77,6 +79,91 @@
         Drupal.favorites.add();
         event.preventDefault();
       }).addClass('js-processed');
+      this.applyDragHandler();
+      this.applyDraggable();
+    },
+    // Add draggable handle.
+    applyDragHandler: function() {
+      $('.collapse-block').remove();
+      $('.block-favorites h2').prepend('<span class="collapse-block collapse-true" style="color: rgb(204, 204, 204); ' +
+        'font-size: 15px; cursor: pointer; margin-left: -17px; margin-right: 5px;">-</span>');
+      $(".block-favorites h2 .collapse-block").toggle(
+        function() {
+          $(".block-favorites #favorites-list").toggle();
+          $(this).removeClass("collapse-true");
+          $(this).addClass("collapse-false");
+          $('.collapse-block').css({'font-size': '10px'}).html('+');
+        },
+        function() {
+          $(".block-favorites #favorites-list").toggle();
+          $(this).removeClass("collapse-false");
+          $(this).addClass("collapse-true");
+          $('.collapse-block').css({'font-size': '15px'}).html('-');
+        }
+      );
+      $("#favorites-list ul").children().each(function(i) {
+        var handlemarkup = '<a class="tabledrag-handle" href="#" title="Drag to re-order"><span class="handle" ' +
+          'style="padding-left: 10px; opacity: 0; cursor: move;">&nbsp;</span></a>';
+        $(this).prepend(handlemarkup);
+        $('.hidden-fid').hide();
+        console.log($(this).parent('ul'));
+        $(this).parent('ul').css({
+          'padding': "0px",
+        });        
+        $(this).css({
+          'list-style': "disc",
+          'list-style-position': "inside",
+          'text-indent': '-13px',
+          'padding-left': '13px',
+        });
+      });
+    },
+    // Add dragable feature.
+    applyDraggable: function() {
+      // Make collapsable favorites block.
+      $('#favorites-list li').find(".tabledrag-handle .handle").css({
+        'visibility': "hidden",
+        'height': '0px',
+        'margin': '0px',
+        'padding': '0px',
+        'width': '0px',
+      });
+      // Control handler visibility on hover.
+      $('#favorites-list li').hover(
+        function() {
+          $(this).find(".tabledrag-handle .handle").css({
+            'visibility': "visible",
+            'height': '13px',
+            'margin': '0px 5px 0px -21px',
+            'padding': '8px 16px 0 0',
+            'width': '13px',
+          });
+        }, function() {
+        $(this).find(".tabledrag-handle .handle").css({
+          'visibility': "hidden",
+          'height': '0px',
+          'margin': '0px',
+          'padding': '0px',
+          'width': '0px',
+        });
+      });
+      // Add custom sorting.
+      $('#favorites-list ul').sortable({
+        containment: '.block-favorites',
+        axis: 'y',
+        update: function(event, ui) {
+        var stringDiv = "";
+        $("#favorites-list ul").children().each(function(i) {
+          var li = $(this);
+          var fav_id = li.children('.favorites-remove').attr('fid');
+          var fav_weight = i + 1;
+          $.ajax({
+            type: 'GET',
+            url: Drupal.settings.basePath + 'favorites/js/order/' + fav_id + '/' + fav_weight,
+          });  
+        });
+        }
+      });
     }
   }
 })(jQuery);
diff --git a/favorites.module b/favorites.module
index ddb1f8d..7ffa351 100644
--- a/favorites.module
+++ b/favorites.module
@@ -6,6 +6,13 @@
  */
 
 /**
+ * Implements hook_init().
+ */
+function favorites_init() {
+  drupal_add_library('system', 'ui.sortable');
+}
+
+/**
  * Implements hook_permission().
  */
 function favorites_permission() {
@@ -33,6 +40,13 @@ function favorites_menu() {
     'title' => 'Add favorite via js',
     'type' => MENU_CALLBACK,
   );
+  $items['favorites/js/order/%/%'] = array(
+    'page callback' => 'favorites_order_callback',
+    'page arguments' => array(3, 4),
+    'access arguments' => array('manage own favorites'),
+    'title' => 'Reorg favorite via js',
+    'type' => MENU_CALLBACK,
+  );
   return $items;
 }
 
@@ -169,6 +183,7 @@ function theme_favorites($favorites = array()) {
         'attributes' => array(
           'class' => array('favorites-remove'),
           'title' => t('delete this item'),
+          'fid' => $favorite->fid,
         ),
       )
     );
@@ -321,6 +336,7 @@ function favorites_load_favorites($account = NULL) {
   foreach ($raw_data as $favorite) {
     $favorite->token = favorites_token($favorite);
     $favorite->path = drupal_get_path_alias($favorite->path);
+    $favorite->weight = $favorite->weight;
     $favorites[] = $favorite;
   }
 
@@ -328,6 +344,29 @@ function favorites_load_favorites($account = NULL) {
 }
 
 /**
+ * Update favorites order weight.
+ *
+ * @param $fid
+ *   A favorite object.
+ * @param $weight
+ *   A new favorite weight.
+ */
+function favorites_order_callback($fid = NULL, $weight = NULL) {
+  if(!empty($fid) && !empty($weight)) {
+    db_update('favorites')
+      ->fields(array('weight' => $weight,))
+      ->condition('fid', $fid)
+      ->execute();
+      echo $fid;
+      echo ':';
+      echo $weight;
+    drupal_json_output(array('success' => TRUE));
+    return;
+  }
+  drupal_json_output(array('success' => FALSE, 'error' => TRUE));
+}
+
+/**
  * Generate a token for a particular favorite.
  *
  * @param $favorite
@@ -436,12 +475,24 @@ function _favorites_save_favorite_db($values, $account) {
       'query' => $values['query'],
       'title' => $values['title'],
       'timestamp' => REQUEST_TIME,
+      'weight' => get_item_weight(),
     ))
     ->execute()
   ;
 }
 
 /**
+ * Get item weight.
+ *
+ * @return int
+ *   The new weight for the item.
+ */
+function get_item_weight() {
+  $weight = db_query('SELECT MAX(weight) FROM {favorites} LIMIT 1')->fetchField();
+  return ++$weight;
+}
+
+/**
  * Helper function: Store a favorite as a cookie.
  *
  * Used to abstract the storage model (cookie vs. db).
@@ -487,7 +538,7 @@ function _favorites_load_favorites_db($account) {
   return db_select('favorites', 'f')
     ->fields('f')
     ->condition('uid', $account->uid, '=')
-    ->orderBy('timestamp', 'DESC')
+    ->orderBy('weight', 'ASC')
     ->execute()
   ;
 }
