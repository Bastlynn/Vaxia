diff --git a/spoiler.js b/spoiler.js
index 84f2786..54a40bd 100644
--- a/spoiler.js
+++ b/spoiler.js
@@ -2,23 +2,29 @@
 
 Drupal.behaviors.spoiler = {
   attach: function() {
-    $('.spoiler')
-      .addClass('spoiler-js')
-      .removeClass('spoiler')
-      .children('.spoiler-content')
-      .hide()
-      .siblings('.spoiler-warning')
-      .html(Drupal.t('<span class="spoiler-button" title="Click to view"><span>Show</span><span class="spoiler-button-hide">Hide</span> spoiler</span>'))
-      .children('.spoiler-button')
-      .click(function() {
-        $(this)
-        .parent()
-        .siblings('.spoiler-content')
-        .toggle('normal');
-        $('span', this).toggle();
-      })
-      .children('span.spoiler-button-hide')
-      .hide();
+    $('.spoiler').each(function(index) {
+      var spoiler_label = $(this).children('.spoiler-warning').attr('show');
+      $(this)
+        .addClass('spoiler-js')
+        .removeClass('spoiler')
+        .children('.spoiler-content')
+        .hide()
+        .siblings('.spoiler-warning')
+        .html(Drupal.t('<span class="spoiler-button" title="Click to view"><span>Show</span> ' +
+          '<span class="spoiler-button-hide">Hide</span> ' +
+          spoiler_label  +
+          ' </span>'))
+        .children('.spoiler-button')
+        .click(function() {
+          $(this)
+          .parent()
+          .siblings('.spoiler-content')
+          .toggle('normal');
+          $('span', this).toggle();
+        })
+        .children('span.spoiler-button-hide')
+        .hide();
+    });
   }
 };
-}(jQuery));
\ No newline at end of file
+}(jQuery));
diff --git a/spoiler.module b/spoiler.module
index 42c928f..cf61425 100644
--- a/spoiler.module
+++ b/spoiler.module
@@ -52,7 +52,8 @@ function spoiler_filter_info() {
  * Filter callback to display filter tips.
  */
 function _spoiler_filter_tips($filter, $format, $long) {
-  return t('Potential spoilers can be hidden between [spoiler][/spoiler] tags to hide them by default.');
+  return t('Potential spoilers can be hidden between [spoiler][/spoiler] tags to hide them by default. ' .
+    'Labels can be shown as [spoiler=label][/spoiler].');
 }
 
 /**
@@ -83,12 +84,16 @@ function _spoiler_filter_process($text) {
   // Keep it simple. Use of the lazy quantifier allows use of multiple spoiler
   // blocks but does not address nested spoilers.
   return preg_replace_callback(
-    '#\[\s*spoiler\s*\](.*?)\[\s*/\s*spoiler\s*\]#is',
-    create_function('$matches', 'return theme("spoiler", array("spoiler" => $matches[1]));'),
+    '#\[\s*spoiler\s*(=.*?)*\](.*?)\[\s*/\s*spoiler\s*\]#is',
+    create_function('$matches', 'return theme("spoiler", array("spoiler_label" => $matches[1], "spoiler" => $matches[2]));'),
     $text
   );
 }
 
 function theme_spoiler($variables) {
-  return '<div class="spoiler"><div class="spoiler-warning">' . t('<span>Spoiler:</span> Highlight to view') . '</div><div class="spoiler-content">' . $variables['spoiler'] . '</div></div>';
+  $variables['spoiler_label'] = !empty($variables['spoiler_label']) ?
+    trim(strip_tags(str_replace("'", '',str_replace('"', '', substr($variables['spoiler_label'], 1))))) : t('Spoiler');
+  return '<div class="spoiler">' .
+    '<div class="spoiler-warning" show="' . $variables['spoiler_label'] . '"><span>' . $variables['spoiler_label'] . ':</span> ' . t('Highlight to view') . '</div>' .
+    '<div class="spoiler-content">' . $variables['spoiler'] . '</div></div>';
 }
