<?php
/**
 * @file
 * An extension to enable comment revisions system.
 */

/**
 * Implements hook_schema().
 */
function comment_revisions_schema() {
  $schema['comment_revision'] = array(
    'description' => 'Stores comment revisions and associated data.',
    'fields' => array(
      'cid' => array(
        'not null' => TRUE,
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
        'description' => 'Unique comment ID.',
      ),
      'vid' => array(
        'description' => 'The current {comment_revision}.vid version identifier.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'log' => array(
        'description' => 'The log entry explaining the changes in this version.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'timestamp' => array(
        'description' => 'A Unix timestamp indicating when this version was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'authorid' => array(
        'description' => 'The {users}.uid that created this version.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'pid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {comment_revision}.cid to which this comment is a reply. If set to 0, this comment is not a reply to an existing comment.',
      ),
      'nid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {node}.nid to which this comment is a reply.',
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid who authored the comment. If set to 0, this comment was created by an anonymous user.',
      ),
      'subject' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The comment title.',
      ),
      'hostname' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => "The author's host name.",
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The time that the comment was created, as a Unix timestamp.',
      ),
      'changed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The time that the comment was last edited, as a Unix timestamp.',
      ),
      'status' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
        'description' => 'The published status of a comment. (0 = Not Published, 1 = Published)',
      ),
      'thread' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => "The vancode representation of the comment's place in a thread.",
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 60,
        'not null' => FALSE,
        'description' => "The comment author's name. Uses {users}.name if the user is logged in, otherwise uses the value typed into the comment form.",
      ),
      'mail' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'description' => "The comment author's e-mail address from the comment form, if user is anonymous, and the 'Anonymous users may/must leave their contact information' setting is turned on.",
      ),
      'homepage' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => "The comment author's home page address from the comment form, if user is anonymous, and the 'Anonymous users may/must leave their contact information' setting is turned on.",
      ),
      'language' => array(
        'description' => 'The {languages}.language of this comment.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'comment_revisions_status_pid' => array('pid', 'status'),
      'comment_revisions_num_new' => array(
        'nid',
        'status',
        'created',
        'cid',
        'thread',
      ),
      'comment_revisions_uid' => array('uid'),
      'comment_revisions_language' => array('nid', 'language'),
      'comment_revisions_created' => array('created'),
    ),
    'primary key' => array('vid'),
    'foreign keys' => array(
      'comment_revisions_node' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
      'comment_revisions_author' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );
  return $schema;
}

/**
 * Implements hook_install().
 */
function comment_revisions_install() {
  $schema = drupal_get_schema('comment');
  db_add_field('comment', 'vid', $schema['fields']['vid'], array(
    'foreign keys' => array(
      'vid' => array(
        'table' => 'comment_revision',
        'columns' => array('vid' => 'vid'),
      ),
    ),
  ));

  db_query('UPDATE {comment} SET vid = cid');

  db_add_unique_key('comment', 'vid', array('vid' => 'vid'));

  // Add all comments to the revision table.
  $sql = 'INSERT INTO {comment_revision} (cid, vid, log, timestamp, authorid, pid, nid, uid, subject, hostname, created, changed, status, thread, name, mail, homepage, language)';
  $sql .= 'SELECT cid, vid, \'\', UNIX_TIMESTAMP(), uid, pid, nid, uid, subject, hostname, created, changed, status, thread, name, mail, homepage, language FROM {comment}';
  $sql .= ' WHERE cid NOT IN (SELECT cid FROM {comment_revision}) ORDER BY cid DESC';
  db_query($sql);
}

/**
 * Implementation of hook_uninstall().
 */
function comment_revisions_uninstall() {
  db_drop_unique_key('comment', 'vid');
  db_drop_field('comment', 'vid');
}
