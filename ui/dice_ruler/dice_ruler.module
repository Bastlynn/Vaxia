<?php
/**
 * @file
 * Provide a in-site dice ruler for helping to run sessions.
 */

/**
 * Implements hook_permission().
 */
function dice_ruler_permission() {
  return array(
    'use dice ruler'=> array(
      'title' => t('use dice ruler'),
      'description' => t('Use dice ruler.'),
    ),
    'administer dice ruler'=> array(
      'title' => t('administer dice ruler'),
      'description' => t('Administer dice ruler.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function dice_ruler_menu() {
  $items['admin/vaxia/dice_ruler'] = array(
    'title' => 'Dice ruler settings',
    'description' => 'Configure the options for the dice ruler',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_dice_ruler_admin_settings'),
    'access arguments' => array('administer dice ruler'),
  );
  return $items;
}

/**
 * Helper function, get the settings for weapons classes.
 */
function _dice_ruler_weapon_class_info() {
  $vocab =  taxonomy_vocabulary_machine_name_load('weapon_category');
  $terms = taxonomy_term_load_multiple(array(), array('vid' => $vocab->vid));
  $weapon_classes = array();
  foreach ($terms as $tid => $term) {
    // Get the info from the term.
    $name = !empty($term->name) ? $term->name : 0;
    $name = explode('(', $name);
    $name = trim($name[0]);
    $mods = !empty($term->field_multi_action_mod['und'][0]['value']) ? $term->field_multi_action_mod['und'][0]['value'] : 0;
    $perc = !empty($term->field_percentage['und'][0]['value']) ? $term->field_percentage['und'][0]['value'] : 0;
    $weight = !empty($term->weight) ? $term->weight : $tid;
    //  Set up the class.
    $weapon_classes[$weight] = array(
      'tid' => $tid,
      'name' => $name,
      'mods' => $mods,
      'perc' => $perc,
    );
  }
  ksort($weapon_classes);
  return $weapon_classes;
}

/**
 * Helper function, get the settings for weapons classes.
 */
function _dice_ruler_weapon_classes() {
  $classes = array();
  foreach (_dice_ruler_weapon_class_info() as $tid => $weapon_class) {
    $classes[$weapon_class['tid']] = $weapon_class['name'];
  }
  return $classes;
}

/**
 * Helper function, get the settings for weapons classes.
 */
function _dice_ruler_weapon_percentages() {
  $classes = array();
  foreach (_dice_ruler_weapon_class_info() as $tid => $weapon_class) {
    $classes[$weapon_class['tid']] = $weapon_class['perc'];
  }
  return $classes;
}

/**
 * Helper function, get the settings for weapons classes.
 */
function _dice_ruler_weapon_modifiers() {
  $classes = array();
  foreach (_dice_ruler_weapon_class_info() as $tid => $weapon_class) {
    $classes[$weapon_class['tid']] = $weapon_class['mods'];
  }
  return $classes;
}

/**
 * Admin form callback.
 */
function _dice_ruler_admin_settings($form, &$form_state) {
  // Default diffs.
  $form['dice_ruler_default_diff'] = array(
    '#title' => t('Default difficulty'),
    '#description' => t('Use dynamic diffulty on most rolls.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('dice_ruler_default_diff', 25),
  );
  $form['dice_ruler_magic_default_diff'] = array(
    '#title' => t('Default magic difficulty'),
    '#description' => t('Default difficulty for magic rolls.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('dice_ruler_magic_default_diff', 25),
  );
  // Set help texts.
  $form['help_texts'] = array(
    '#type' => 'fieldset',
    '#title' => t('Help texts for displays'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['help_texts']['dice_ruler_show_settings'] = array(
    '#title' => t('Show settings'),
    '#description' => t('Show the current configurations of the Dice Ruler in the help section.'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('dice_ruler_show_settings', TRUE),
  );
  $form['help_texts']['dice_ruler_help_general'] = array(
    '#title' => t('General Help'),
    '#description' => t('Help information to show for all selections.'),
    '#type' => 'textarea',
    '#default_value' => variable_get('dice_ruler_help_general', ''),
  );
  $types = array('one_trait', 'two_trait', 'trait_vs', 'two_trait_vs', 'combat', 'magic');
  foreach ($types as $type) {
    $form['help_texts']['dice_ruler_help_' . $type] = array(
      '#title' => ucwords(str_replace('_', ' ', $type)) . ' ' . t('Help'),
      '#description' => t('Help information to show when one-trait is selected.'),
      '#type' => 'textarea',
      '#default_value' => variable_get('dice_ruler_help_' . $type, ''),
    );
  }

  // Set percentage for extra action.
  $form['extra_actions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Extra actions'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['extra_actions']['dice_ruler_extra_action_penalty'] = array(
    '#title' => t('Extra action penalty'),
    '#description' => t('The default modifier per extra action taken applied to all actions.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('dice_ruler_extra_action_penalty', 20),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_block_info().
 */
function dice_ruler_block_info() {
  $blocks['dice_ruler'] = array(
    'info' => t('Dice ruler'),
    'cache' => DRUPAL_NO_CACHE, // DRUPAL_CACHE_PER_ROLE
  );
  $blocks['dice_ruler_player_assist'] = array(
    'info' => t('Dice ruler player assistant'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implements hook_block_view($delta = '').
 */
function dice_ruler_block_view($delta = '') {
  $block = array(
      'subject' => '',
      'content' => '',
  );
  if ($delta == 'dice_ruler' && user_access('use dice ruler')) {
    $block = array(
      'subject' => t('Dice ruler'),
      'content' => drupal_get_form('dice_ruler_form'),
    );
  }
  if ($delta == 'dice_ruler_player_assist') {
    $block = array(
      'subject' => t('Dice ruler player advisor'),
      'content' => drupal_get_form('_dice_ruler_player_assist_form'),
    );
  }
  return $block;
}

/**
 * Form callback for block.
 */
function _dice_ruler_player_assist_form($form, &$form_state) {
  $form['multi_attack'] = array(
    '#title' => t('Should I try a multi-attack?'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#size' => 5,
  );
  $form['multi_attack']['multi_attack_str'] = array(
    '#title' => t('My strength is:'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#size' => 5,
  );
  $form['multi_attack']['multi_attack_dex'] = array(
    '#title' => t('My dexterity is:'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#size' => 5,
  );
  $form['multi_attack']['multi_attack_skill'] = array(
    '#title' => t('My skill is:'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#size' => 5,
  );
  $form['multi_attack']['multi_attack_type'] = array(
    '#title' => t('My weapon class is:'),
    '#type' => 'select',
    '#options' => _dice_ruler_weapon_classes(),
    '#required' => TRUE,
    '#default_value' => $first,
  );
  $form['multi_attack']['multi_attack_perc'] = array(
    '#title' => t('My added weapon percentage is:'),
    '#type' => 'textfield',
    '#default_value' => 0,
    '#size' => 5,
  );
  $form['multi_attack']['multi_attack_target_might'] = array(
    '#title' => t('My target\'s might is around:'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => 50,
    '#size' => 5,
  );
  $form['multi_attack']['multi_attack_rule'] = array(
    '#type' => 'button',
    '#value' => t('Should I?'),
    '#ajax' => array(
      'callback' => '_dice_ruler_player_assist_multi_attack_form_ajax',
      'wrapper' => 'dice_ruler_dice_assist_multi_attack_results',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  $form['multi_attack']['multi_attack_results'] = array(
    '#type' => 'item',
    '#markup' => _dice_ruler_dice_assist_multi_attack_results($form, $form_state),
    '#prefix' => '<div id="dice_ruler_dice_assist_multi_attack_results" style="padding-top:0.5em;">',
    '#suffix' => '</div>',
  );
  return $form;
}

/**
 * Figure out the results to display when form submitted.
 */
function _dice_ruler_dice_assist_multi_attack_results($form, $form_state) {
  $advice = '';
  if (!empty($form_state['values']['multi_attack_str'])) {
    // Ok, lets figure this out.
    $multi_attack_str = trim($form_state['values']['multi_attack_str']);
    $multi_attack_dex = trim($form_state['values']['multi_attack_dex']);
    $multi_attack_skill = trim($form_state['values']['multi_attack_skill']);
    $multi_attack_perc = !empty($form_state['values']['multi_attack_perc']) ? trim($form_state['values']['multi_attack_perc']) : 0;
    $penalty_base = variable_get('dice_ruler_extra_action_penalty', 20);
    $tid = trim($form_state['values']['multi_attack_type']);
    $percs = _dice_ruler_weapon_percentages();
    $multi_attack_perc = $multi_attack_perc + $percs[$tid];
    $multi_attack_perc = $multi_attack_perc/100;
    $multi_attack_map_mod = 0;
    $mods = _dice_ruler_weapon_modifiers();
    $multi_attack_map_mod = $mods[$tid];
    $multi_attack_target_might = trim($form_state['values']['multi_attack_target_might']);
    $number_attacks = 0;
    $this_damage = 0;
    $success = TRUE;
    while ($success) {
      $success = FALSE; // Assume no success.
      $number_attacks++; // Set number of attacks;
      $this_adjust = 0;
      if ($number_attacks > 1) {
        $this_adjust = ($penalty_base + $multi_attack_map_mod) * ($number_attacks - 1);// Adjust might.
      }
      // Now figure out if we can hit this guy more than once based on rolls of 50.
      $this_result = _dice_ruler_make_two_trait_ruling(
        $multi_attack_dex + $multi_attack_skill - $this_adjust,
        $multi_attack_target_might, // Defender.
        0,
        50,
        $multi_attack_str + $multi_attack_skill - $this_adjust,
        $multi_attack_target_might, // Defender.
        0,
        50
      );
      // Check if success.
      if ($this_result[5] == 'yes') {
        $success = TRUE;
        $last_damage = $this_damage;
        $this_damage = $this_result[7] + ($this_result[7] * $multi_attack_perc);
      }
    }
    // Number of successful attacks.
    $number_attacks--;
    $average_might = $multi_attack_dex + $multi_attack_skill + $multi_attack_str + $multi_attack_skill;
    $average_might = $average_might / 2;
    $advice = t('With your average might of @average_might, and an opponent of might @multi_attack_target_might you can probably ' .
      'hit him @number_attacks time(s) for a total of @total_damage.',
      array('@average_might' => number_format($average_might, 2), '@multi_attack_target_might' => $multi_attack_target_might,
      '@number_attacks' => $number_attacks, '@total_damage' => $this_damage * $number_attacks));
    $less_attacks = $number_attacks - 1;
    if (($last_damage * $less_attacks) > ($this_damage * $number_attacks)) {
      $advice .= ' ' . t('But you would do more damage if you attacked @number_attacks time(s) for @total_damage.',
        array('@number_attacks' => $less_attacks, '@total_damage' => $last_damage * $less_attacks));
    }
    $advice .= ' ' . t('This calculation assumes everyone rolls 50s. This is an estimate only: your individual results may vary, ' .
      'and A/SHs may apply circumstance modifiers.');
  }
  return $advice;
}

/**
 * AJAX form callback.
 */
function _dice_ruler_player_assist_multi_attack_form_ajax($form, $form_state) {
  return $form['multi_attack']['multi_attack_results'];
}

/**
 * Settings form generator.
 */
function _dice_ruler_form_settings() {
  $settings = array();
  // Is Dynamic difficult on or off.
  $multi_penalty = variable_get('dice_ruler_extra_action_penalty', 20);
  $settings[] = t('Extra actions is -%penalty.', array('%penalty' => $multi_penalty));
  $classes = _dice_ruler_weapon_class_info();
  foreach ($classes as $class_info) {
    $settings[] = t('%class weapons is %damage%.',
      array('%class' => $class_info['name'], '%damage' => $class_info['perc']));
  }
  foreach ($classes as $class_info) {
    $settings[] = t('%class weapons is -%penalty.',
      array('%class' => $class_info['name'], '%penalty' => $multi_penalty + $class_info['mods']));
  }
  $settings = theme('item_list', array('items' => $settings));
  // And now display the rest of the form.
  $form = array(
    '#title' => t('Ruler settings'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#prefix' => '<div id="dice_ruler_dice_help_settings" class="secondary-help">',
    '#suffix' => '</div>',
    '#states' => array(
      'invisible' => array(
        ':input[name="actions"]' => array('value' => 'hidden'),
      ),
    ),
  );
  $form['help'] = array(
    '#type' => 'item',
    '#markup' => $settings,
  );
  return $form;
}

function _dice_ruler_form_one_trait($i) {
  $form = array(
    '#type' => 'fieldset',
    '#title' => t('One trait'),
    '#states' => array(
      'visible' => array(
        ':input[name="roll_type_' . $i .'"]' => array('value' => 'one_trait'),
      ),
    ),
    '#attributes' => array(
      'class' => array('one-trait-form'),
    ),
  );
  $form['one_trait_might_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Might'),
    '#size' => 5,
  );
  $form['one_trait_diff_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Diff.'),
    '#size' => 5,
    '#default_value' => variable_get('dice_ruler_default_diff', 25),
  );
  $form['one_trait_add_diff_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Add diff.'),
    '#size' => 5,
  );
  $form['one_trait_rolled_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Rolled'),
    '#size' => 5,
  );
  return $form;
}

function _dice_ruler_form_two_trait($i) {
  $form = array(
    '#type' => 'fieldset',
    '#title' => t('Two trait'),
    '#states' => array(
      'visible' => array(
        ':input[name="roll_type_' . $i .'"]' => array('value' => 'two_trait'),
      ),
    ),
    '#attributes' => array(
      'class' => array('two-trait-form'),
    ),
  );
  $form['a'] = array(
    '#type' => 'fieldset',
    '#title' => t('Trait A'),
  );
  $form['a']['two_trait_might_a_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Might'),
    '#size' => 5,
  );
  $form['a']['two_trait_diff_a_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Diff.'),
    '#size' => 5,
    '#default_value' => variable_get('dice_ruler_default_diff', 25),
  );
  $form['a']['two_trait_add_diff_a_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Add diff.'),
    '#size' => 5,
  );
  $form['a']['two_trait_rolled_a_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Rolled'),
    '#size' => 5,
  );
  $form['b'] = array(
    '#type' => 'fieldset',
    '#title' => t('Trait B'),
  );
  $form['b']['two_trait_might_b_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Might'),
    '#size' => 5,
  );
  $form['b']['two_trait_diff_b_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Diff.'),
    '#size' => 5,
    '#default_value' => variable_get('dice_ruler_default_diff', 25),
  );
  $form['b']['two_trait_add_diff_b_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Add diff.'),
    '#size' => 5,
  );
  $form['b']['two_trait_rolled_b_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Rolled'),
    '#size' => 5,
  );
  return $form;
}

function _dice_ruler_form_trait_vs($i) {
  $form = array(
    '#type' => 'fieldset',
    '#title' => t('Trait vs. trait'),
    '#states' => array(
      'visible' => array(
        ':input[name="roll_type_' . $i .'"]' => array('value' => 'trait_vs'),
      ),
    ),
    '#attributes' => array(
      'class' => array('trait-vs-form'),
    ),
  );
  $form['a'] = array(
    '#type' => 'fieldset',
    '#title' => t('Character A'),
  );
  $form['a']['trait_vs_might_a_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Might'),
    '#size' => 5,
  );
  $form['a']['trait_vs_add_diff_a_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Add diff.'),
    '#size' => 5,
  );
  $form['a']['trait_vs_rolled_a_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Rolled'),
    '#size' => 5,
  );
  $form['b'] = array(
    '#type' => 'fieldset',
    '#title' => t('Character B'),
  );
  $form['b']['trait_vs_might_b_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Might'),
    '#size' => 5,
  );
  $form['b']['trait_vs_add_diff_b_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Add diff.'),
    '#size' => 5,
  );
  $form['b']['trait_vs_rolled_b_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Rolled'),
    '#size' => 5,
  );
  return $form;
}

function _dice_ruler_form_two_trait_vs($i) {
  $form = array(
    '#type' => 'fieldset',
    '#title' => t('Two trait vs trait'),
    '#states' => array(
      'visible' => array(
        ':input[name="roll_type_' . $i .'"]' => array('value' => 'two_trait_vs'),
      ),
    ),
    '#attributes' => array(
      'class' => array('two-trait-vs-form'),
    ),
  );
  $form['a'] = array(
    '#type' => 'fieldset',
    '#title' => t('Character A'),
  );
  $form['a']['a'] = array(
    '#type' => 'fieldset',
    '#title' => t('Trait A'),
  );
  $form['a']['a']['two_trait_vs_might_aa_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Might'),
    '#size' => 5,
  );
  $form['a']['a']['two_trait_vs_add_diff_aa_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Add diff.'),
    '#size' => 5,
  );
  $form['a']['a']['two_trait_vs_rolled_aa_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Rolled'),
    '#size' => 5,
  );
  $form['a']['b'] = array(
    '#type' => 'fieldset',
    '#title' => t('Trait B'),
  );
  $form['a']['b']['two_trait_vs_might_ab_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Might'),
    '#size' => 5,
  );
  $form['a']['b']['two_trait_vs_add_diff_ab_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Add diff.'),
    '#size' => 5,
  );
  $form['a']['b']['two_trait_vs_rolled_ab_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Rolled'),
    '#size' => 5,
  );
  $form['b'] = array(
    '#type' => 'fieldset',
    '#title' => t('Character B'),
  );
  $form['b']['a'] = array(
    '#type' => 'fieldset',
    '#title' => t('Trait A'),
  );
  $form['b']['a']['two_trait_vs_might_ba_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Might'),
    '#size' => 5,
  );
  $form['b']['a']['two_trait_vs_add_diff_ba_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Add diff.'),
    '#size' => 5,
  );
  $form['b']['a']['two_trait_vs_rolled_ba_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Rolled'),
    '#size' => 5,
  );
  $form['b']['b'] = array(
    '#type' => 'fieldset',
    '#title' => t('Trait B'),
  );
  $form['b']['b']['two_trait_vs_might_bb_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Might'),
    '#size' => 5,
  );
  $form['b']['b']['two_trait_vs_add_diff_bb_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Add diff.'),
    '#size' => 5,
  );
  $form['b']['b']['two_trait_vs_rolled_bb_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Rolled'),
    '#size' => 5,
  );
  return $form;
}

function _dice_ruler_form_combat($i) {
  $form = array(
    '#type' => 'fieldset',
    '#title' => t('Combat'),
    '#states' => array(
      'visible' => array(
        ':input[name="roll_type_' . $i .'"]' => array('value' => 'combat'),
      ),
    ),
    '#attributes' => array(
      'class' => array('combat-form'),
    ),
  );

  // Combatant A's attack.
  $form['a'] = array(
    '#type' => 'fieldset',
    '#title' => t('Character A'),
  );
  $form['a']['combat_weapon_a_' . $i] = array(
    '#type' => 'radios',
    '#title' => t('Weapon Class'),
    '#options' => _dice_ruler_weapon_classes(),
  );
  $form['a']['combat_weapon_a_add_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Added %'),
    '#size' => 5,
  );
  $form['a']['attack_a_'.$i]['dex'] = array(
    '#type' => 'fieldset',
    '#title' => t('Dexterity'),
  );
  $form['a']['attack_a_'.$i]['dex']['combat_might_a_dex_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Might'),
    '#size' => 5,
  );
  $form['a']['attack_a_'.$i]['dex']['combat_add_diff_a_dex_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Add diff.'),
    '#size' => 5,
  );
  $form['a']['attack_a_'.$i]['dex']['combat_rolled_a_dex_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Rolled'),
    '#size' => 5,
  );
  $form['a']['attack_a_'.$i]['str'] = array(
    '#type' => 'fieldset',
    '#title' => t('Strength'),
  );
  $form['a']['attack_a_'.$i]['str']['combat_might_a_str_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Might'),
    '#size' => 5,
  );
  $form['a']['attack_a_'.$i]['str']['combat_add_diff_a_str_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Add diff.'),
    '#size' => 5,
  );
  $form['a']['attack_a_'.$i]['str']['combat_rolled_a_str_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Rolled'),
    '#size' => 5,
  );
  $form['a']['attack_a_'.$i]['end'] = array(
    '#type' => 'fieldset',
    '#title' => t('Endurance'),
  );
  $form['a']['attack_a_'.$i]['end']['combat_might_a_end_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Might'),
    '#size' => 5,
  );
  $form['a']['attack_a_'.$i]['end']['combat_add_diff_a_end_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Add diff.'),
    '#size' => 5,
  );
  $form['a']['attack_a_'.$i]['end']['combat_rolled_a_end_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Rolled'),
    '#size' => 5,
  );

  // Combatant B's attack.
  $form['b'] = array(
    '#type' => 'fieldset',
    '#title' => t('Character B'),
  );
  // Toggle between weapon percents and weapon categories.
  $number_actions_b = array(
    '1' => t('One action'),
    '2' => t('Two actions'),
    '3' => t('Three actions'),
    '4' => t('Four actions'),
  );
  $form['b']['combat_weapon_b_' . $i] = array(
    '#type' => 'radios',
    '#title' => t('Weapon Class'),
    '#options' => _dice_ruler_weapon_classes(),
  );
  $form['b']['combat_weapon_b_add_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Added %'),
    '#size' => 5,
  );
  $form['b']['number_actions_b_' . $i] = array(
    '#type' => 'select',
    '#title' => t('# Actions'),
    '#options' => $number_actions_b,
    '#default_value' => 1,
    '#description' => t('Including defensive and non-combat actions.'),
  );
  $form['b']['attack_'.$i]['dex'] = array(
    '#type' => 'fieldset',
    '#title' => t('Dexterity'),
  );
  $form['b']['attack_'.$i]['dex']['combat_might_b_dex_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Might'),
    '#size' => 5,
  );
  $form['b']['attack_'.$i]['dex']['combat_add_diff_b_dex_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Add diff.'),
    '#size' => 5,
  );
  $form['b']['attack_'.$i]['dex']['combat_rolled_b_dex_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Rolled'),
    '#size' => 5,
  );
  $form['b']['attack_'.$i]['str'] = array(
    '#type' => 'fieldset',
    '#title' => t('Strength'),
  );
  $form['b']['attack_'.$i]['str']['combat_might_b_str_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Might'),
    '#size' => 5,
  );
  $form['b']['attack_'.$i]['str']['combat_add_diff_b_str_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Add diff.'),
    '#size' => 5,
  );
  $form['b']['attack_'.$i]['str']['combat_rolled_b_str_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Rolled'),
    '#size' => 5,
  );
  $form['b']['attack_'.$i]['end'] = array(
    '#type' => 'fieldset',
    '#title' => t('Endurance'),
  );
  $form['b']['attack_'.$i]['end']['combat_might_b_end_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Might'),
    '#size' => 5,
  );
  $form['b']['attack_'.$i]['end']['combat_add_diff_b_end_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Add diff.'),
    '#size' => 5,
  );
  $form['b']['attack_'.$i]['end']['combat_rolled_b_end_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Rolled'),
    '#size' => 5,
  );
  return $form;
}

function _dice_ruler_form_magic($i) {
  $form = array(
    '#type' => 'fieldset',
    '#title' => t('Magic'),
    '#states' => array(
      'visible' => array(
        ':input[name="roll_type_' . $i .'"]' => array('value' => 'magic'),
      ),
    ),
    '#attributes' => array(
      'class' => array('magic-form'),
    ),
  );
  $form['a'] = array(
    '#type' => 'fieldset',
    '#title' => t('Intelligence'),
  );
  $form['a']['magic_might_a_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Might'),
    '#size' => 5,
  );
  $form['a']['magic_diff_a_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Diff.'),
    '#size' => 5,
    '#default_value' => variable_get('dice_ruler_magic_default_diff', 25),
  );
  $form['a']['magic_add_diff_a_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Add diff.'),
    '#size' => 5,
  );
  $form['a']['magic_rolled_a_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Rolled'),
    '#size' => 5,
  );
  $form['b'] = array(
    '#type' => 'fieldset',
    '#title' => t('Spirituality'),
  );
  $form['b']['magic_might_b_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Might'),
    '#size' => 5,
  );
  $form['b']['magic_diff_b_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Diff.'),
    '#size' => 5,
    '#default_value' => variable_get('dice_ruler_magic_default_diff', 25),
  );
  $form['b']['magic_add_diff_b_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Add diff.'),
    '#size' => 5,
  );
  $form['b']['magic_rolled_b_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Rolled'),
    '#size' => 5,
  );
  $form['target'] = array(
    '#type' => 'fieldset',
    '#title' => t('Target Resistance'),

  );
  $form['target']['magic_target_stat_int_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Int -OR- Dex'),
    '#size' => 5,
  );
  $form['target']['magic_target_stat_spi_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Spi -OR- End'),
    '#size' => 5,
  );
  $form['target']['magic_target_skill_' . $i] = array(
    '#type' => 'textfield',
    '#title' => t('Skill*'),
    '#size' => 5,
  );
  return $form;
}

/**
 * Form callback for the dice ruler form.
 * Mostly ajax driven results.
 */
function dice_ruler_form($form, &$form_state) {
  $form = array();
  // Show help if we have it.
  $general_help = variable_get('dice_ruler_help_general', '');
  if (!empty($general_help)) {
    $form['dice_ruler_dice_help'] = array(
    '#title' => t('General Help'),
    '#type' => 'item',
    '#markup' => $general_help,
    '#prefix' => '<div id="dice_ruler_dice_help" class="dice_ruler_dice_help">',
    '#suffix' => '</div>',
    '#states' => array(
      'invisible' => array(
        ':input[name="actions"]' => array('value' => 'hidden'),
        ),
      ),
    );
  }
  $types = array('one_trait', 'two_trait', 'trait_vs', 'two_trait_vs', 'combat', 'magic');
  foreach ($types as $type) {
    $help = variable_get('dice_ruler_help_' . $type, '');
    if (!empty($help)) {
      $form['dice_ruler_dice_help_' . $type] = array(
        '#title' => ucwords(str_replace('_', ' ', $type)) . ' ' . t('Help'),
        '#type' => 'fieldset',
        '#prefix' => '<div id="dice_ruler_dice_help_' . $type . '" class="secondary-help">',
        '#suffix' => '</div>',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#states' => array(
          'invisible' => array(
            ':input[name="actions"]' => array('value' => 'hidden'),
            ),
          ),
        );
      $form['dice_ruler_dice_help_' . $type]['help'] = array(
        '#type' => 'item',
        '#markup' => $help,
        );
    }
  }
  // Show settings if we have them.
  if (variable_get('dice_ruler_show_settings', TRUE)) {
    $form['dice_ruler_settings_help'] = _dice_ruler_form_settings();
  }
  // Find out how many actions we may have selected.
  $number_actions = !empty($form_state['values']['actions']) ? $form_state['values']['actions'] : 0;
  // Display request for # of actions.
  $penalty_base = variable_get('dice_ruler_extra_action_penalty', 20);
  $form['actions'] = array(
    '#type' => 'select',
    '#options' => array(
      'hidden' => t('-- Select number of actions to rule --'),
      '1' => '1 action - no multi action penalty',
      '2' => '2 action - ' . ($penalty_base * -1) . ' multi action penalty',
      '3' => '3 action - ' . ($penalty_base * -2) . ' multi action penalty',
      '4' => '4 action - ' . ($penalty_base * -3) . ' multi action penalty',
    ),
    '#default_value' => 'hidden',
  );
  $values = array();
  for ($i = 1; $i < 5; $i++) {
    $values[] = array('value' => $i);
  }
  // Display a form for each action.
  for ($i = 1; $i < 5; $i++) {
    $form['action_' . $i] = array(
      '#type' => 'fieldset',
      '#title' => t('Action #' . $i),
      '#states' => array(
        'visible' => array(
          ':input[name="actions"]' => $values,
        ),
      ),
    );
    array_shift($values); // Clip an action off the array of visible.
    // Select a type for this action.
    $form['action_' . $i]['roll_type_' . $i] = array(
      '#type' => 'select',
      '#options' => array(
        'one_trait' => t('One trait'),
        'two_trait' => t('Two trait'),
        'trait_vs' => t('Trait vs. trait'),
        'two_trait_vs' => t('Two trait vs. two trait'),
        'combat' => t('Combat'),
        'magic' => t('Magic'),
      ),
    );
    // Subforms for each type of roll
    $form['action_' . $i]['one_trait_' . $i] = _dice_ruler_form_one_trait($i);
    $form['action_' . $i]['two_trait_' . $i] = _dice_ruler_form_two_trait($i);
    $form['action_' . $i]['trait_vs_' . $i] = _dice_ruler_form_trait_vs($i);
    $form['action_' . $i]['two_trait_vs_' . $i] = _dice_ruler_form_two_trait_vs($i);
    $form['action_' . $i]['combat_' . $i] = _dice_ruler_form_combat($i);
    $form['action_' . $i]['magic_' . $i] = _dice_ruler_form_magic($i);
  }
  // Provide button.
  $form['rule_dice'] = array(
    '#type' => 'button',
    '#value' => t('Rule roll'),
    '#ajax' => array(
      'callback' => 'dice_ruler_form_ajax',
      'wrapper' => 'dice_ruler_dice_results',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#states' => array(
      'invisible' => array(
        ':input[name="actions"]' => array('value' => 'hidden'),
      ),
    ),
  );
  // Show results!
  $results = array();
  for ($i=1; $i < $number_actions + 1; $i++) {
    $results[] = '<label for="dice-ruler-dice-result">' . t('Action #') . $i . '</label>' .
      '<div class="dice-ruler-dice-result">' .
      _dice_ruler_form_get_results_for_action($form, $form_state, $i, $number_actions) .
      '</div>';
  }
  $form['dice_ruler_dice_results'] = array(
    '#type' => 'item',
    '#markup' => implode('</br>', $results),
    '#prefix' => '<div id="dice_ruler_dice_results">',
    '#suffix' => '</div>',
    '#states' => array(
      'invisible' => array(
        ':input[name="actions"]' => array('value' => 'hidden'),
      ),
    ),
  );
  // Attach the JS for this ruler to pick up results from the chatroom.
  drupal_add_js(drupal_get_path('module', 'dice_ruler') . '/js/dice_ruler.js');
  // Attach the CSS for this ruler styling.
  drupal_add_css(drupal_get_path('module', 'dice_ruler') . '/css/dice_ruler.css');
  return $form;
}

/**
 * Helper function, given a form state, figure out results for selection to echo.
 */
function _dice_ruler_form_get_results_for_action($form, $form_state, $i, $number_actions) {
  $penalty_base = variable_get('dice_ruler_extra_action_penalty', 20);
  $action_penalty = $penalty_base * ($number_actions - 1);

  // Gather the results by action number.
  $results = t('No roll performed.');
  if (!empty($form_state['values']['roll_type_' . $i])) {
    $results = '';
    switch ($form_state['values']['roll_type_' . $i]) {
      case 'one_trait':
        $new_might = $form_state['values']['one_trait_might_' . $i] - $action_penalty;
        $new_might = ($new_might > 0) ? $new_might : 1;
        $results .= _dice_ruler_one_trait(
          trim($new_might),
          trim($form_state['values']['one_trait_diff_' . $i]),
          trim($form_state['values']['one_trait_add_diff_' . $i]),
          trim($form_state['values']['one_trait_rolled_' . $i])
        );
      break;
      case 'two_trait':
        $new_might_a = $form_state['values']['two_trait_might_a_' . $i] - $action_penalty;
        $new_might_a = ($new_might_a > 0) ? $new_might_a : 1;
        $new_might_b = $form_state['values']['two_trait_might_b_' . $i] - $action_penalty;
        $new_might_b = ($new_might_b > 0) ? $new_might_b : 1;
        $results .= _dice_ruler_two_trait(
          trim($new_might_a),
          trim($form_state['values']['two_trait_diff_a_' . $i]),
          trim($form_state['values']['two_trait_add_diff_a_' . $i]),
          trim($form_state['values']['two_trait_rolled_a_' . $i]),
          trim($new_might_b),
          trim($form_state['values']['two_trait_diff_b_' . $i]),
          trim($form_state['values']['two_trait_add_diff_b_' . $i]),
          trim($form_state['values']['two_trait_rolled_b_' . $i])
        );
      break;
      case 'trait_vs':
        $new_might_a = $form_state['values']['trait_vs_might_a_' . $i] - $action_penalty;
        $new_might_a = ($new_might_a > 0) ? $new_might_a : 1;
        $results .= _dice_ruler_trait_vs(
          trim($new_might_a),
          trim($form_state['values']['trait_vs_add_diff_a_' . $i]),
          trim($form_state['values']['trait_vs_rolled_a_' . $i]),
          trim($form_state['values']['trait_vs_might_b_' . $i]),
          trim($form_state['values']['trait_vs_add_diff_b_' . $i]),
          trim($form_state['values']['trait_vs_rolled_b_' . $i])
        );
      break;
      case 'two_trait_vs':
        $new_might_aa = $form_state['values']['two_trait_vs_might_aa_' . $i] - $action_penalty;
        $new_might_aa = ($new_might_aa > 0) ? $new_might_aa : 1;
        $new_might_ab = $form_state['values']['two_trait_vs_might_ab_' . $i] - $action_penalty;
        $new_might_ab = ($new_might_ab > 0) ? $new_might_ab : 1;
        $new_might_ba = $form_state['values']['two_trait_vs_might_ba_' . $i] - $action_penalty;
        $new_might_ba = ($new_might_ba > 0) ? $new_might_ba : 1;
        $new_might_bb = $form_state['values']['two_trait_vs_might_bb_' . $i] - $action_penalty;
        $new_might_bb = ($new_might_bb > 0) ? $new_might_bb : 1;
        $results .= _dice_ruler_two_trait_vs(
          trim($new_might_aa),
          trim($form_state['values']['two_trait_vs_add_diff_aa_' . $i]),
          trim($form_state['values']['two_trait_vs_rolled_aa_' . $i]),
          trim($new_might_ab),
          trim($form_state['values']['two_trait_vs_add_diff_ab_' . $i]),
          trim($form_state['values']['two_trait_vs_rolled_ab_' . $i]),
          trim($new_might_ba),
          trim($form_state['values']['two_trait_vs_add_diff_ba_' . $i]),
          trim($form_state['values']['two_trait_vs_rolled_ba_' . $i]),
          trim($new_might_bb),
          trim($form_state['values']['two_trait_vs_add_diff_bb_' . $i]),
          trim($form_state['values']['two_trait_vs_rolled_bb_' . $i])
        );
      break;
      case 'combat':
        // If we use classes, look up and set the correct class based weapon value.
        $a_type = $form_state['values']['combat_weapon_a_' . $i];
        $b_type = $form_state['values']['combat_weapon_b_' . $i];
        $add_a = !empty($form_state['values']['combat_weapon_a_add_' . $i]) ? $form_state['values']['combat_weapon_a_add_' . $i] : 0;
        $add_b = !empty($form_state['values']['combat_weapon_b_add_' . $i]) ? $form_state['values']['combat_weapon_b_add_' . $i] : 0;
        $percs = _dice_ruler_weapon_percentages();
        $form_state['values']['combat_weapon_a_' . $i] = $add_a + $percs[$a_type];
        $form_state['values']['combat_weapon_b_' . $i] = $add_b + $percs[$b_type];
        if ($form_state['values']['combat_weapon_a_' . $i] != 0) {
          $results .= '<div class="dice-ruler-dice-multi-action-alert">' . t('Character A, additional damage percent: %pen%',
              array('%pen' => $form_state['values']['combat_weapon_a_' . $i])) . '</div>';
        }
        if ($form_state['values']['combat_weapon_b_' . $i] != 0) {
          $results .= '<div class="dice-ruler-dice-multi-action-alert">' . t('Character B, additional damage percent: %pen%',
              array('%pen' => $form_state['values']['combat_weapon_b_' . $i])) . '</div>';
        }
        // Figure out the penalties for character b.
        $number_actions_b = !empty($form_state['values']['number_actions_b_' . $i]) ? trim($form_state['values']['number_actions_b_' . $i]) : 1;
        $action_penalty_b = $penalty_base * ($number_actions_b - 1);
        // Default mod is zero.
        $mod_base_a = $mod_base_b = 0;

        // Based on the weapon, figure out the modifier for a and b.
        $mods = _dice_ruler_weapon_modifiers();
        $mod_base_a = $mods[$a_type];
        // Display mod.
        $penalty_base_str = array();
        for ($this_attack = 1; $this_attack < $number_actions; $this_attack++) {
          $penalty_base_str[] = ($penalty_base + $mod_base_a) * ($this_attack);
        }
        $penalty_base_str = implode(' / ', $penalty_base_str);
        if ($number_actions > 1) {
          $results .= '<div class="dice-ruler-dice-multi-action-alert">' .
            t('Character A taking %num_actions actions is at multi action penalties for all actions: %penalty_base_str',
              array('%num_actions' => $number_actions, '%penalty_base_str' => $penalty_base_str)) . '</div>';
        }
        else {
          $results .= '<div class="dice-ruler-dice-multi-action-alert">' .
            t('Character A taking %num_actions actions and is at no penalty.',
              array('%num_actions' => $number_actions) . '</div>';
        }
        // And recalculate the correct modifier to apply.
        $action_penalty = ($penalty_base + $mod_base_a) * ($number_actions - 1);

        // Based on the weapon, figure out the modifier for a and b.
        $mod_base_b = $mods[$b_type];
        // Display mod.
        $penalty_base_str = array();
        for ($this_attack = 1; $this_attack < $number_actions_b; $this_attack++) {
          $penalty_base_str[] = ($penalty_base + $mod_base_b) * ($this_attack);
        }
        $penalty_base_str = implode(' / ', $penalty_base_str);
        if ($number_actions_b > 1) {
          $results .= '<div class="dice-ruler-dice-multi-action-alert">' .
            t('Character B taking %num_actions actions is at multi action penalties for all actions: %penalty_base_str',
              array('%num_actions' => $number_actions_b, '%penalty_base_str' => $penalty_base_str)) . '</div>';
        }
        else {
          $results .= '<div class="dice-ruler-dice-multi-action-alert">' .
            t('Character B taking %num_actions actions and is at no penalty.',
              array('%num_actions' => $number_actions_b) . '</div>';
        }
        // And recalculate the correct modifier to apply.
        $action_penalty_b = ($penalty_base + $mod_base_b) * ($number_actions_b - 1);

        // Character A.
        $new_might_dex = $form_state['values']['combat_might_a_dex_' . $i] - $action_penalty;
        $new_might_dex = ($new_might_dex > 0) ? $new_might_dex : 1;
        $new_might_str = $form_state['values']['combat_might_a_str_' . $i] - $action_penalty;
        $new_might_str = ($new_might_str > 0) ? $new_might_str : 1;
        $new_might_end = $form_state['values']['combat_might_a_end_' . $i] - $action_penalty;
        $new_might_end = ($new_might_end > 0) ? $new_might_end : 1;
        // Character B.
        $new_might_dex_b = $form_state['values']['combat_might_b_dex_' . $i] - $action_penalty_b;
        $new_might_dex_b = ($new_might_dex_b > 0) ? $new_might_dex_b : 1;
        $new_might_str_b = $form_state['values']['combat_might_b_str_' . $i] - $action_penalty_b;
        $new_might_str_b = ($new_might_str_b > 0) ? $new_might_str_b : 1;
        $new_might_end_b = $form_state['values']['combat_might_b_end_' . $i] - $action_penalty_b;
        $new_might_end_b = ($new_might_end_b > 0) ? $new_might_end_b : 1;
        // Get results.
        $results .= _dice_ruler_combat(
          // Character A.
          trim($new_might_dex),
          trim($form_state['values']['combat_add_diff_a_dex_' . $i]),
          trim($form_state['values']['combat_rolled_a_dex_' . $i]),
          trim($new_might_str),
          trim($form_state['values']['combat_add_diff_a_str_' . $i]),
          trim($form_state['values']['combat_rolled_a_str_' . $i]),
          trim($new_might_end),
          trim($form_state['values']['combat_add_diff_a_end_' . $i]),
          trim($form_state['values']['combat_rolled_a_end_' . $i]),
          trim($form_state['values']['combat_weapon_a_' . $i]),
          // And the opposition.
          trim($new_might_dex_b),
          trim($form_state['values']['combat_add_diff_b_dex_' . $i]),
          trim($form_state['values']['combat_rolled_b_dex_' . $i]),
          trim($new_might_str_b),
          trim($form_state['values']['combat_add_diff_b_str_' . $i]),
          trim($form_state['values']['combat_rolled_b_str_' . $i]),
          trim($new_might_end_b),
          trim($form_state['values']['combat_add_diff_b_end_' . $i]),
          trim($form_state['values']['combat_rolled_b_end_' . $i]),
          trim($form_state['values']['combat_weapon_b_' . $i])
        );
      break;
      case 'magic':
        $new_might_a = $form_state['values']['magic_might_a_' . $i] - $action_penalty;
        $new_might_a = ($new_might_a > 0) ? $new_might_a : 1;
        $new_might_b = $form_state['values']['magic_might_b_' . $i] - $action_penalty;
        $new_might_b = ($new_might_b > 0) ? $new_might_b : 1;
        $results .= _dice_ruler_magic(
          trim($new_might_a),
          trim($form_state['values']['magic_diff_a_' . $i]),
          trim($form_state['values']['magic_add_diff_a_' . $i]),
          trim($form_state['values']['magic_rolled_a_' . $i]),
          trim($new_might_b),
          trim($form_state['values']['magic_diff_b_' . $i]),
          trim($form_state['values']['magic_add_diff_b_' . $i]),
          trim($form_state['values']['magic_rolled_b_' . $i]),
          trim($form_state['values']['magic_target_stat_int_' . $i]),
          trim($form_state['values']['magic_target_stat_spi_' . $i]),
          trim($form_state['values']['magic_target_skill_' . $i])
        );
      break;
    }
  }
  return $results;
}

/**
 * AJAX callback for ruling form.
 */
function dice_ruler_form_ajax($form, $form_state) {
  return $form['dice_ruler_dice_results'];
}

/**
 * Handle ruling for one trait.
 */
function _dice_ruler_one_trait(
  $one_trait_might = 50,
  $one_trait_diff = 50,
  $one_trait_add_diff = 0,
  $one_trait_rolled = 50
) {
  // Check that all are numeric.
  if (!empty($one_trait_might) && !is_numeric($one_trait_might)
    || !empty($one_trait_diff) && !is_numeric($one_trait_diff)
    || !empty($one_trait_add_diff) && !is_numeric($one_trait_add_diff)
    || !empty($one_trait_rolled) && !is_numeric($one_trait_rolled)) {
    return t('Not all values given were numeric. We need numbers for math.');
  }
  // Check our required values are set.
  if (empty($one_trait_might)
    || empty($one_trait_diff)
    || empty($one_trait_rolled)) {
    return t('Not all required values given, or values are zero.');
  }
  // Set default if empty.
  if (empty($one_trait_add_diff)) {
    $one_trait_add_diff = 0;
  }
  // Get results from our master function.
  $results = _dice_ruler_make_ruling(
  $one_trait_might,
  $one_trait_diff,
  $one_trait_add_diff,
  $one_trait_rolled,
  TRUE);
  // Now put all these into a table to display.
  $header = array(
    t('Might'),
    t('Diff'),
    t('Add diff.'),
    t('Rolled'),
    t('Roll needed'),
    t('Success'),
    t('Winsby'),
    t('Points'),
    t('% of diff'),
    t('Failed might'),
  );
  $rows[] = $results;
  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
  ));
  return $output;
}

/**
 * Handle ruling for two trait.
 */
function _dice_ruler_two_trait(
  $two_trait_might_a,
  $two_trait_diff_a,
  $two_trait_add_diff_a,
  $two_trait_rolled_a,
  $two_trait_might_b,
  $two_trait_diff_b,
  $two_trait_add_diff_b,
  $two_trait_rolled_b
) {
  // Check that all are numeric.
  if (!empty($two_trait_might_a) && !is_numeric($two_trait_might_a)
    || !empty($two_trait_diff_a) && !is_numeric($two_trait_diff_a)
    || !empty($two_trait_add_diff_a) && !is_numeric($two_trait_add_diff_a)
    || !empty($two_trait_rolled_a) && !is_numeric($two_trait_rolled_a)) {
    return t('Not all values given were numeric. We need numbers for math.');
  }
  // Check our required values are set.
  if (empty($two_trait_might_a)
    || empty($two_trait_diff_a)
    || empty($two_trait_rolled_a)) {
    return t('Not all required values given, or values are zero.');
  }
  // Set default if empty.
  if (empty($two_trait_add_diff_a)) {
    $two_trait_add_diff_a = 0;
  }
  // Check that all are numeric.
  if (!empty($two_trait_might_b) && !is_numeric($two_trait_might_b)
    || !empty($two_trait_diff_b) && !is_numeric($two_trait_diff_b)
    || !empty($two_trait_add_diff_b) && !is_numeric($two_trait_add_diff_b)
    || !empty($two_trait_rolled_b) && !is_numeric($two_trait_rolled_b)) {
    return t('Not all values given were numeric. We need numbers for math.');
  }
  // Check our required values are set.
  if (empty($two_trait_might_b)
    || empty($two_trait_diff_b)
    || empty($two_trait_rolled_b)) {
    return t('Not all required values given, or values are zero.');
  }
  // Set default if empty.
  if (empty($two_trait_add_diff_b)) {
    $two_trait_add_diff_b = 0;
  }
  $results = _dice_ruler_make_two_trait_ruling(
    $two_trait_might_a,
    $two_trait_diff_a, // Difficulty.
    $two_trait_add_diff_a,
    $two_trait_rolled_a,
    $two_trait_might_b,
    $two_trait_diff_b, // Difficulty.
    $two_trait_add_diff_b,
    $two_trait_rolled_b
  );
  // Now put all these into a table to display.
  $header = array(
    t('Might'),
    t('Diff'),
    t('Add diff.'),
    t('Rolled'),
    t('Roll needed'),
    t('Success'),
    t('Winsby'),
    t('Points'),
    t('% of diff'),
    t('Failed might'),
  );
  $rows[] = $results;
  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
  ));
  return $output;
}

/**
 * Handle ruling for trait vs. trait.
 */
function _dice_ruler_trait_vs(
  $trait_vs_might_a,
  $trait_vs_add_diff_a,
  $trait_vs_rolled_a,
  $trait_vs_might_b,
  $trait_vs_add_diff_b,
  $trait_vs_rolled_b
) {
  // Check that all are numeric.
  if (!empty($trait_vs_might_a) && !is_numeric($trait_vs_might_a)
    || !empty($trait_vs_add_diff_a) && !is_numeric($trait_vs_add_diff_a)
    || !empty($trait_vs_rolled_a) && !is_numeric($trait_vs_rolled_a)) {
    return t('Not all values given were numeric. We need numbers for math.');
  }
  // Check our required values are set.
  if (empty($trait_vs_might_a)
    || empty($trait_vs_rolled_a)) {
    return t('Not all required values given, or values are zero.');
  }
  // Set default if empty.
  if (empty($trait_vs_add_diff_a)) {
    $trait_vs_add_diff_a = 0;
  }
  // Check that all are numeric.
  if (!empty($trait_vs_might_b) && !is_numeric($trait_vs_might_b)
    || !empty($trait_vs_add_diff_b) && !is_numeric($trait_vs_add_diff_b)
    || !empty($trait_vs_rolled_b) && !is_numeric($trait_vs_rolled_b)) {
    return t('Not all values given were numeric. We need numbers for math.');
  }
  // Check our required values are set.
  if (empty($trait_vs_might_b)
    || empty($trait_vs_rolled_b)) {
    return t('Not all required values given, or values are zero.');
  }
  // Set default if empty.
  if (empty($trait_vs_add_diff_b)) {
    $trait_vs_add_diff_b = 0;
  }
  // Setup for the tables.
  $header = array(
    t('Might'),
    t('Diff'),
    t('Add diff.'),
    t('Rolled'),
    t('Roll needed'),
    t('Success'),
    t('Winsby'),
    t('Points'),
    t('% of diff'),
    t('Failed might'),
  );
  $output = '';
  $output .= '<div><b>' . t('First character\'s results.') . '</b></div>';
  // Get results from our master function.
  $rows[] = array();
  $results = _dice_ruler_make_ruling(
  $trait_vs_might_a,
  $trait_vs_might_b,
  $trait_vs_add_diff_a,
  $trait_vs_rolled_a,
  TRUE);
  $rows[] = $results;
  // Now put all these into a table to display.
  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
  ));
  $rows = array();
  // Second roll.
  $output .= '<div><b>' . t('Second character\'s results.') . '</b></div>';
  $results = _dice_ruler_make_ruling(
  $trait_vs_might_b,
  $trait_vs_might_a,
  $trait_vs_add_diff_b,
  $trait_vs_rolled_b,
  TRUE);
  $rows[] = $results;
  // Now put all these into a table to display.
  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
  ));
  return $output;
}

/**
 * Handle ruling for two trait vs. trait.
 */
function _dice_ruler_two_trait_vs(
  $two_trait_vs_might_a_a, // value_characterID_traitID
  $two_trait_vs_add_diff_a_a,
  $two_trait_vs_rolled_a_a,
  $two_trait_vs_might_a_b,
  $two_trait_vs_add_diff_a_b,
  $two_trait_vs_rolled_a_b,
  $two_trait_vs_might_b_a,
  $two_trait_vs_add_diff_b_a,
  $two_trait_vs_rolled_b_a,
  $two_trait_vs_might_b_b,
  $two_trait_vs_add_diff_b_b,
  $two_trait_vs_rolled_b_b
) {
  // Check that all are numeric.
  if (!empty($two_trait_vs_might_a_a) && !is_numeric($two_trait_vs_might_a_a)
    || !empty($two_trait_vs_add_diff_a_a) && !is_numeric($two_trait_vs_add_diff_a_a)
    || !empty($two_trait_vs_rolled_a_a) && !is_numeric($two_trait_vs_rolled_a_a)
  	|| !empty($two_trait_vs_might_a_b) && !is_numeric($two_trait_vs_might_a_b)
    || !empty($two_trait_vs_add_diff_a_b) && !is_numeric($two_trait_vs_add_diff_a_b)
    || !empty($two_trait_vs_rolled_a_b) && !is_numeric($two_trait_vs_rolled_a_b)
    ) {
    return t('Not all values given were numeric. We need numbers for math.');
  }
  // Check our required values are set.
  if (empty($two_trait_vs_might_a_a)
    || empty($two_trait_vs_rolled_a_a)
    || empty($two_trait_vs_might_a_b)
    || empty($two_trait_vs_rolled_a_b)) {
    return t('Not all required values given, or values are zero.');
  }
  // Set default if empty.
  if (empty($two_trait_vs_add_diff_a_a) || empty($two_trait_vs_add_diff_a_b)) {
    $two_trait_vs_add_diff_a_a = 0;
    $two_trait_vs_add_diff_a_b = 0;
  }
  // Check that all are numeric.
  if (!empty($two_trait_vs_might_b_a) && !is_numeric($two_trait_vs_might_b_a)
    || !empty($two_trait_vs_add_diff_b_a) && !is_numeric($two_trait_vs_add_diff_b_a)
    || !empty($two_trait_vs_rolled_b_a) && !is_numeric($two_trait_vs_rolled_b_a)
    || !empty($two_trait_vs_might_b_b) && !is_numeric($two_trait_vs_might_b_b)
    || !empty($two_trait_vs_add_diff_b_b) && !is_numeric($two_trait_vs_add_diff_b_b)
    || !empty($two_trait_vs_rolled_b_b) && !is_numeric($two_trait_vs_rolled_b_b)) {
    return t('Not all values given were numeric. We need numbers for math.');
  }
  // Check our required values are set.
  if (empty($two_trait_vs_might_b_a)
    || empty($two_trait_vs_rolled_b_a)
    || empty($two_trait_vs_might_b_b)
    || empty($two_trait_vs_rolled_b_b)) {
    return t('Not all required values given, or values are zero.');
  }
  // Set default if empty.
  if (empty($two_trait_vs_add_diff_b_a) || empty($two_trait_vs_add_diff_b_b)) {
    $two_trait_vs_add_diff_b_a = 0;
    $two_trait_vs_add_diff_b_b = 0;
  }
  // Setup for the tables.
  $header = array(
    t('Might'),
    t('Diff'),
    t('Add diff.'),
    t('Rolled'),
    t('Roll needed'),
    t('Success'),
    t('Winsby'),
    t('Points'),
    t('% of diff'),
    t('Failed might'),
  );
  $output = '';
  $output .= '<div><b>' . t('First character\'s results.') . '</b></div>';
  // Get results from our master function.
  $results = _dice_ruler_make_two_trait_ruling(
  $two_trait_vs_might_a_a,
  $two_trait_vs_might_b_a, // DIFF
  $two_trait_vs_add_diff_a_a,
  $two_trait_vs_rolled_a_a,
  $two_trait_vs_might_a_b,
  $two_trait_vs_might_b_b, // DIFF
  $two_trait_vs_add_diff_a_b,
  $two_trait_vs_rolled_a_b
  );
  $rows[] = $results;
  // Now put all these into a table to display.
  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
  ));
  $rows = array();
  // Second roll.
  $output .= '<div><b>' . t('Second character\'s results.') . '</b></div>';
  $results = _dice_ruler_make_two_trait_ruling(
  $two_trait_vs_might_b_a,
  $two_trait_vs_might_a_a, // DIFF
  $two_trait_vs_add_diff_b_a,
  $two_trait_vs_rolled_b_a,
  $two_trait_vs_might_b_b,
  $two_trait_vs_might_a_b, // DIFF
  $two_trait_vs_add_diff_b_b,
  $two_trait_vs_rolled_b_b
  );
  $rows[] = $results;
  // Now put all these into a table to display.
  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
  ));
  return $output;
}

/**
 * Handle ruling for combat.
 */
function _dice_ruler_combat(
  $combat_might_a_dex,
  $combat_add_diff_a_dex,
  $combat_rolled_a_dex,
  $combat_might_a_str,
  $combat_add_diff_a_str,
  $combat_rolled_a_str,
  $combat_might_a_end,
  $combat_add_diff_a_end,
  $combat_rolled_a_end,
  $combat_weapon_a,
  $combat_might_b_dex,
  $combat_add_diff_b_dex,
  $combat_rolled_b_dex,
  $combat_might_b_str,
  $combat_add_diff_b_str,
  $combat_rolled_b_str,
  $combat_might_b_end,
  $combat_add_diff_b_end,
  $combat_rolled_b_end,
  $combat_weapon_b
) {
  // Check that all are numeric.
  if (!empty($combat_might_a_dex) && !is_numeric($combat_might_a_dex)
    || !empty($combat_add_diff_a_dex) && !is_numeric($combat_add_diff_a_dex)
    || !empty($combat_rolled_a_dex) && !is_numeric($combat_rolled_a_dex)
    || !empty($combat_might_a_str) && !is_numeric($combat_might_a_str)
    || !empty($combat_add_diff_a_str) && !is_numeric($combat_add_diff_a_str)
    || !empty($combat_rolled_a_str) && !is_numeric($combat_rolled_a_str)
    || !empty($combat_might_a_end) && !is_numeric($combat_might_a_end)
    || !empty($combat_add_diff_a_end) && !is_numeric($combat_add_diff_a_end)
    || !empty($combat_rolled_a_end) && !is_numeric($combat_rolled_a_end)
    || !empty($combat_weapon_a) && !is_numeric($combat_weapon_a)
    ) {
    return t('Not all values given were numeric. We need numbers for math.');
  }
  // Check our required values are set.
  if (empty($combat_might_a_dex)
    || empty($combat_might_a_str)
    || empty($combat_might_a_end)) {
    return t('Not all required values given, or values are zero.');
  }
  // It is not possible in an un-even contest for the might to be zero. They will always have at least a might.
  // But they might not have a roll - if so, default to zero.
  if (empty($combat_rolled_a_dex)) {
    $combat_rolled_a_dex = 1;
  }
  if (empty($combat_rolled_a_str)) {
    $combat_rolled_a_str = 1;
  }
  if (empty($combat_rolled_a_end)) {
    $combat_rolled_a_end = 1;
  }
  // Set default if empty.
  if (empty($combat_add_diff_a_dex)) {
    $combat_add_diff_a_dex = 0;
  }
  if (empty($combat_add_diff_a_str)) {
    $combat_add_diff_a_str = 0;
  }
  if (empty($combat_add_diff_a_end)) {
    $combat_add_diff_a_end = 0;
  }
  // Check that all are numeric.
  if (!empty($combat_might_b_dex) && !is_numeric($combat_might_b_dex)
    || !empty($combat_add_diff_b_dex) && !is_numeric($combat_add_diff_b_dex)
    || !empty($combat_rolled_b_dex) && !is_numeric($combat_rolled_b_dex)
    || !empty($combat_might_b_str) && !is_numeric($combat_might_b_str)
    || !empty($combat_add_diff_b_str) && !is_numeric($combat_add_diff_b_str)
    || !empty($combat_rolled_b_str) && !is_numeric($combat_rolled_b_str)
    || !empty($combat_might_b_end) && !is_numeric($combat_might_b_end)
    || !empty($combat_add_diff_b_end) && !is_numeric($combat_add_diff_b_end)
    || !empty($combat_rolled_b_end) && !is_numeric($combat_rolled_b_end)
    || !empty($combat_weapon_b) && !is_numeric($combat_weapon_b)
    ) {
    return t('Not all values given were numeric. We need numbers for math.');
  }
  // Check our required values are set.
  if (!isset($combat_might_b_dex)
    || !isset($combat_might_b_str)
    || !isset($combat_might_b_end)) {
    return t('Not all required values given, or values are zero.');
  }
  // It is not possible in an un-even contest for the might to be zero. They will always have at least a might.
  // But they might not have a roll - if so, default to zero.
  if (empty($combat_rolled_b_dex)) {
    $combat_rolled_b_dex = 1;
  }
  if (empty($combat_rolled_b_str)) {
    $combat_rolled_b_str = 1;
  }
  if (empty($combat_rolled_b_end)) {
    $combat_rolled_b_end = 1;
  }
  // Set default if empty.
  if (empty($combat_add_diff_b_dex)) {
    $combat_add_diff_b_dex = 0;
  }
  if (empty($combat_add_diff_b_str)) {
    $combat_add_diff_b_str = 0;
  }
  if (empty($combat_add_diff_b_end)) {
    $combat_add_diff_b_end = 0;
  }
  // Prepare weapon combat damages
  if (empty($combat_weapon_a)) {
    $combat_weapon_a = 0;
  }
  elseif($combat_weapon_a > 1)  {
    $combat_weapon_a = $combat_weapon_a / 100;
  }
  if (empty($combat_weapon_b)) {
    $combat_weapon_b = 0;
  }
  elseif($combat_weapon_b > 1)  {
    $combat_weapon_b = $combat_weapon_b / 100;
  }

  // And make the rolls. The second value in a set (labeled defender) is always the difficulty.
  $attack_a_vs_b = _dice_ruler_make_two_trait_ruling(
    $combat_might_a_dex,
    $combat_might_b_dex, // Defender.
    $combat_add_diff_a_dex,
    $combat_rolled_a_dex,
    $combat_might_a_str,
    $combat_might_b_end, // Defender.
    $combat_add_diff_a_str,
    $combat_rolled_a_str
  );
  array_unshift($attack_a_vs_b, 'A Attacks B:');
  $remove_field = array_pop($attack_a_vs_b);
  $remove_field = array_pop($attack_a_vs_b);
  $attack_a_vs_b[] = ($attack_a_vs_b[8] + ($attack_a_vs_b[8] * $combat_weapon_a)) . t(' to B, w/ weapon');
  $rows[] = $attack_a_vs_b;
  $attack_b_vs_a = _dice_ruler_make_two_trait_ruling(
    $combat_might_b_dex,
    $combat_might_a_dex, // Defender.
    $combat_add_diff_b_dex,
    $combat_rolled_b_dex,
    $combat_might_b_str,
    $combat_might_a_end, // Defender.
    $combat_add_diff_b_str,
    $combat_rolled_b_str
  );
  array_unshift($attack_b_vs_a, 'B Attacks A:');
  $remove_field = array_pop($attack_b_vs_a);
  $remove_field = array_pop($attack_b_vs_a);
  $attack_b_vs_a[] = ($attack_b_vs_a[8] + ($attack_b_vs_a[8] * $combat_weapon_b)) . t(' to A, w/ weapon');
  $rows[] = $attack_b_vs_a;
  $attack_a_points = $attack_a_vs_b[8]; // PP produced by a
  $attack_b_points = $attack_b_vs_a[8]; // PP produced by b
  $block_a_vs_b = _dice_ruler_make_two_trait_ruling(
    $combat_might_a_str,
    $combat_might_b_dex, // Defender.
    $combat_add_diff_a_str,
    $combat_rolled_a_str,
    $combat_might_a_end,
    $combat_might_b_str, // Defender.
    $combat_add_diff_a_end,
    $combat_rolled_a_end
  );
  array_unshift($block_a_vs_b, 'A Blocks B:');
  $remove_field = array_pop($block_a_vs_b);
  $remove_field = array_pop($block_a_vs_b);
  $block_a_vs_b[] = (($attack_b_points - $block_a_vs_b[8]) > 0) ?
    ($attack_b_points - $block_a_vs_b[8] + (($attack_b_points - $block_a_vs_b[8]) * $combat_weapon_b)) . t(' to A, w/ weapon') : 0 . t(' to A');
  $rows[] = $block_a_vs_b;
  $block_b_vs_a = _dice_ruler_make_two_trait_ruling(
    $combat_might_b_str,
    $combat_might_a_dex, // Defender.
    $combat_add_diff_b_str,
    $combat_rolled_b_str,
    $combat_might_b_end,
    $combat_might_a_str, // Defender.
    $combat_add_diff_b_end,
    $combat_rolled_b_end
  );
  array_unshift($block_b_vs_a, 'B Blocks A:');
  $remove_field = array_pop($block_b_vs_a);
  $remove_field = array_pop($block_b_vs_a);
  $block_b_vs_a[] = (($attack_a_points - $block_b_vs_a[8]) > 0) ?
    ($attack_a_points - $block_b_vs_a[8] + (($attack_a_points - $block_b_vs_a[8]) * $combat_weapon_a)) . t(' to B, w/ weapon') : 0 . t(' to B');
  $rows[] = $block_b_vs_a;
  $parry_a_vs_b = _dice_ruler_make_two_trait_ruling(
    $combat_might_a_dex,
    $combat_might_b_dex, // Defender.
    $combat_add_diff_a_dex,
    $combat_rolled_a_dex,
    $combat_might_a_str,
    $combat_might_b_str, // Defender.
    $combat_add_diff_a_str,
    $combat_rolled_a_str
  );
  array_unshift($parry_a_vs_b, 'A Parrys B:');
  $remove_field = array_pop($parry_a_vs_b);
  $remove_field = array_pop($parry_a_vs_b);
  $parry_a_vs_b[] = (($attack_b_points - $parry_a_vs_b[8]) > 0) ?
    ($attack_b_points - $parry_a_vs_b[8] + (($attack_b_points - $parry_a_vs_b[8]) * $combat_weapon_b)) . t(' to A, w/ weapon') : 0 . t(' to A');
  $rows[] = $parry_a_vs_b;
  $parry_b_vs_a = _dice_ruler_make_two_trait_ruling(
    $combat_might_b_dex,
    $combat_might_a_dex, // Defender.
    $combat_add_diff_b_dex,
    $combat_rolled_b_dex,
    $combat_might_b_str,
    $combat_might_a_str, // Defender.
    $combat_add_diff_b_str,
    $combat_rolled_b_str
  );
  array_unshift($parry_b_vs_a, 'B Parrys A:');
  $remove_field = array_pop($parry_b_vs_a);
  $remove_field = array_pop($parry_b_vs_a);
  $parry_b_vs_a[] = (($attack_a_points - $parry_b_vs_a[8]) > 0) ?
    ($attack_a_points - $parry_b_vs_a[8] + (($attack_a_points - $parry_b_vs_a[8]) * $combat_weapon_a)) . t(' to B, w/ weapon') : 0 . t(' to B');
  $rows[] = $parry_b_vs_a;
  $dodge_a_vs_b = _dice_ruler_make_two_trait_ruling(
    $combat_might_a_dex,
    $combat_might_b_dex, // Defender.
    $combat_add_diff_a_dex,
    $combat_rolled_a_dex,
    $combat_might_a_end,
    $combat_might_b_str, // Defender.
    $combat_add_diff_a_end,
    $combat_rolled_a_end
  );
  array_unshift($dodge_a_vs_b, 'A Dodges B:');
  $remove_field = array_pop($dodge_a_vs_b);
  $remove_field = array_pop($dodge_a_vs_b);
  $dodge_a_vs_b[] = (($attack_b_points - $dodge_a_vs_b[8]) > 0) ?
    ($attack_b_points - $dodge_a_vs_b[8] + (($attack_b_points - $dodge_a_vs_b[8]) * $combat_weapon_b)) . t(' to A, w/ weapon') : 0 . t(' to A');
  $rows[] = $dodge_a_vs_b;
  $dodge_b_vs_a = _dice_ruler_make_two_trait_ruling(
    $combat_might_b_dex,
    $combat_might_a_dex, // Defender.
    $combat_add_diff_b_dex,
    $combat_rolled_b_dex,
    $combat_might_b_end,
    $combat_might_a_str, // Defender.
    $combat_add_diff_b_end,
    $combat_rolled_b_end
  );
  array_unshift($dodge_b_vs_a, 'B Dodges A:');
  $remove_field = array_pop($dodge_b_vs_a);
  $remove_field = array_pop($dodge_b_vs_a);
  $dodge_b_vs_a[] = (($attack_a_points - $dodge_b_vs_a[8]) > 0) ?
    ($attack_a_points - $dodge_b_vs_a[8] + (($attack_a_points - $dodge_b_vs_a[8]) * $combat_weapon_a)) . t(' to B, w/ weapon') : 0 . t(' to B');
  $rows[] = $dodge_b_vs_a;
  // Now put all these into a table to display.
  $header = array(
    t('Action'),
    t('Might'),
    t('Diff'),
    t('Add diff.'),
    t('Rolled'),
    t('Roll needed'),
    t('Success'),
    t('Winsby'),
    t('Points'),
    t('After defense'),
  );
  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
  ));
  return $output;
}

/**
 * Handle ruling for magic.
 */
function _dice_ruler_magic(
  $magic_might_a,
  $magic_diff_a,
  $magic_add_diff_a,
  $magic_rolled_a,
  $magic_might_b,
  $magic_diff_b,
  $magic_add_diff_b,
  $magic_rolled_b,
  $magic_target_stat_int,
  $magic_target_stat_spi,
  $magic_target_skill
) {
  // How this normally works.
  // Add the difficulty for the casting to the target stat.
  // And figure out if the target was affected...
  // Check that all are numeric.
  if (!empty($magic_might_a) && !is_numeric($magic_might_a)
    || !empty($magic_diff_a) && !is_numeric($magic_diff_a)
    || !empty($magic_add_diff_a) && !is_numeric($magic_add_diff_a)
    || !empty($magic_rolled_a) && !is_numeric($magic_rolled_a)) {
    return t('Not all values given were numeric. We need numbers for math.');
  }
  // Check our required values are set.
  if (empty($magic_might_a)
    || empty($magic_diff_a)
    || empty($magic_rolled_a)) {
    return t('Not all required values given, or values are zero.');
  }
  // Set default if empty.
  if (empty($magic_add_diff_a)) {
    $magic_add_diff_a = 0;
  }
  // Check that all are numeric.
  if (!empty($magic_might_b) && !is_numeric($magic_might_b)
    || !empty($magic_diff_b) && !is_numeric($magic_diff_b)
    || !empty($magic_add_diff_b) && !is_numeric($magic_add_diff_b)
    || !empty($magic_rolled_b) && !is_numeric($magic_rolled_b)) {
    return t('Not all values given were numeric. We need numbers for math.');
  }
  // Check our required values are set.
  if (empty($magic_might_b)
    || empty($magic_diff_b)
    || empty($magic_rolled_b)) {
    return t('Not all required values given, or values are zero.');
  }
  // Set default if empty.
  if (empty($magic_add_diff_b)) {
    $magic_add_diff_b = 0;
  }
  // Set defaults for the target.
  if (empty($magic_target_stat_int)) {
    $magic_target_stat_int = 0;
  }
  if (empty($magic_target_stat_spi)) {
    $magic_target_stat_spi = 0;
  }
  if (empty($magic_target_skill)) {
    $magic_target_skill = 0;
  }
  // Check that all are numeric.
  if (!empty($magic_target_stat_int) && !is_numeric($magic_target_stat_int)
    || !empty($magic_target_stat_spi) && !is_numeric($magic_target_stat_spi)
    || !empty($magic_target_skill) && !is_numeric($magic_target_skill)) {
    return t('Not all values given were numeric. We need numbers for math.');
  }
  // Set header.
  $header = array(
    t('Might'),
    t('Diff'),
    t('Add diff.'),
    t('Rolled'),
    t('Roll needed'),
    t('Success'),
    t('Winsby'),
    t('Points'),
    t('% of diff'),
    t('Failed might'),
  );
  $output = '';
  // Calculate the rulings to succeed at the spell at all.
  $rows = array();
  $results = _dice_ruler_make_magic_ruling(
    $magic_might_a,
    $magic_diff_a,
    $magic_add_diff_a,
    $magic_rolled_a,
    $magic_might_b,
    $magic_diff_b,
    $magic_add_diff_b,
    $magic_rolled_b);
  $rows[] = $results;
  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
  ));
  // If we have a resisting target calculate the ruling for resisted.
  if ($magic_target_stat_int != 0 || $magic_target_stat_spi != 0 || $magic_target_skill != 0) {
    $output .= '<div><b>' . t('Resisted roll results') . ':</b></div>';
    // Set the target diffs for resisted rolls.
    $magic_diff_a = $magic_diff_a + $magic_target_stat_int + $magic_target_skill;
    $magic_diff_b = $magic_diff_b + $magic_target_stat_spi + $magic_target_skill;
    $output .= '<div>' . t('With target\'s resistance, the base difficulty is') .': '. $magic_diff_a .  ' / ' . $magic_diff_b . '</div>';
    // Combine results.
    $rows = array();
    $results = _dice_ruler_make_magic_ruling(
      $magic_might_a,
      $magic_diff_a,
      $magic_add_diff_a,
      $magic_rolled_a,
      $magic_might_b,
      $magic_diff_b,
      $magic_add_diff_b,
      $magic_rolled_b);
    $rows[] = $results;
    $output .= theme('table', array(
      'header' => $header,
      'rows' => $rows,
    ));
  }
  return $output;
}

function _dice_ruler_make_magic_ruling(
  $magic_might_a,
  $magic_diff_a,
  $magic_add_diff_a,
  $magic_rolled_a,
  $magic_might_b,
  $magic_diff_b,
  $magic_add_diff_b,
  $magic_rolled_b) {
  // Get results from our ruling function.
  $magic_a = _dice_ruler_make_ruling(
    $magic_might_a,
    $magic_diff_a,
    0,
    $magic_rolled_a);
  $magic_b = _dice_ruler_make_ruling(
    $magic_might_b,
    $magic_diff_b,
    0,
    $magic_rolled_b);
  // Figure out as per a two-trait.
  $versus_one = (($magic_rolled_a - $magic_a[4]) >= 0) ? $magic_add_diff_a : 0; // 4 => Roll needed
  $versus_two = (($magic_rolled_b - $magic_b[4]) >= 0) ? $magic_add_diff_b : 0; // 4 => Roll needed
  $winsby_one = $magic_a[3] - $magic_a[4];
  $winsby_two = $magic_b[3] - $magic_b[4];
  $magic_winsby = ($winsby_one / 2) + ($winsby_two / 2) + $versus_one + $versus_two; // 6 => Windsby
  $magic_success = ($magic_winsby >= 0) ? 'yes' : 'no';
  if ($magic_success == 'no') {
    $magic_success = ($magic_winsby < -50) ? 'mishap' : 'no';
  }
  $magic_points = ($magic_winsby >= 0) ? ($magic_might_a + $magic_might_b) / 2 * $magic_winsby / 100 : 0;
  $magic_perc_diff = 'n/a';
  if ($magic_success != 'yes') {
    $magic_diff_perc_a = $magic_might_a * ((tan(($magic_rolled_a - 50.5) / 49.5 * atan(0.06 * 50)) / 6 + 0.5) / (0.5 - tan(($magic_rolled_a - 50.5) / 49.5 * atan(0.06 * 50)) / 6));
    $magic_diff_perc_b = $magic_might_b * ((tan(($magic_rolled_b - 50.5) / 49.5 * atan(0.06 * 50)) / 6 + 0.5) / (0.5 - tan(($magic_rolled_b - 50.5) / 49.5 * atan(0.06 * 50)) / 6));
    $magic_perc_diff = (($magic_diff_perc_a / $magic_diff_a) + ($magic_diff_perc_b / $magic_diff_b)) / 2;
  }
  $magic_failed_might = 0;
  if ($magic_success != 'yes') {
    $magic_failed_might = round((($magic_diff_a + $magic_diff_b) / 2) * (1 - $magic_perc_diff));
  }
  return array(
    '<div>' . $magic_might_a . '</div><div style="border-top:1px solid;">' . $magic_might_b . '</div>', // Display the two.
    '<div>' . $magic_diff_a . '</div><div style="border-top:1px solid;">' . $magic_diff_b . '</div>', // Display the two.
    '<div>' . $magic_add_diff_a . '</div><div style="border-top:1px solid;">' . $magic_add_diff_b . '</div>', // Display the two.
    '<div>' . $magic_rolled_a . '</div><div style="border-top:1px solid;">' . $magic_rolled_b . '</div>', // Display the two.
    '<div>' . number_format($magic_a[4], 1) . '</div><div style="border-top:1px solid;">' . number_format($magic_b[4], 1) . '</div>', // Display the two.
    $magic_success,
    is_numeric($magic_winsby) ? number_format($magic_winsby) : $magic_winsby,
    is_numeric($magic_points) ? number_format($magic_points) : $magic_points,
    is_numeric($magic_perc_diff) ? number_format($magic_perc_diff, 2) : $magic_perc_diff,
    $magic_failed_might,
  );
}

/**
 * Helper function, make a roll.
 */
function _dice_ruler_make_ruling(
  $one_trait_might,
  $one_trait_diff,
  $one_trait_add_diff,
  $one_trait_rolled,
  $format_results = FALSE
) {
  // The ladder is an eyeball. This is a gemoetric solution. I hope you like trig.
  $roll_needed = 50.5 + atan(0.06 * (100 * ($one_trait_diff + $one_trait_add_diff) / ($one_trait_diff + $one_trait_add_diff + $one_trait_might) - 50)) * 49.5 / atan(0.06 * 50);
  $success = ($one_trait_rolled < $roll_needed) ? 'no' : 'yes';
  $winsby_diff = (($one_trait_rolled - $roll_needed) >= 0 ) ? $one_trait_add_diff : 0;
  $winsby = ($one_trait_rolled - $roll_needed ) + $winsby_diff;
  $points = 0;
  if ($success == 'yes') {
    $points = $one_trait_might * ( $winsby / 100);
  }
  $perc_diff = 'n/a';
  if ($success == 'no') {
    $diff_perc = $one_trait_might * ((tan(($one_trait_rolled - 50.5) / 49.5 * atan(0.06 * 50)) / 6 + 0.5) / (0.5 - tan(($one_trait_rolled - 50.5) / 49.5 * atan(0.06 * 50)) / 6));
    $perc_diff = 0;
    if ($one_trait_diff != 0) {
      $perc_diff = $diff_perc / $one_trait_diff;
    }
  }
  $failed_might = 0;
  if ($success == 'no') {
    $failed_might = round($one_trait_diff * (1 - $perc_diff));
  }
  // Return array results.
  return array(
    $one_trait_might,
    $one_trait_diff,
    $one_trait_add_diff,
    $one_trait_rolled,
    ($format_results) ? number_format($roll_needed, 2) : $roll_needed,
    $success,
    ($format_results) ? number_format($winsby, 2) : $winsby,
    ($format_results) ? number_format($points, 2) : $points,
    is_numeric($perc_diff) ? number_format($perc_diff, 2) : $perc_diff,
    $failed_might,
  );
}

/**
 * Helper function, make a roll.
 */
function _dice_ruler_make_two_trait_ruling(
    $two_trait_might_a,
    $two_trait_diff_a,
    $two_trait_add_diff_a,
    $two_trait_rolled_a,
    $two_trait_might_b,
    $two_trait_diff_b,
    $two_trait_add_diff_b,
    $two_trait_rolled_b
) {
  // Get results from our master function.
  $trait_a = _dice_ruler_make_ruling(
  $two_trait_might_a,
  $two_trait_diff_a,
  $two_trait_add_diff_a,
  $two_trait_rolled_a);
  $trait_b = _dice_ruler_make_ruling(
  $two_trait_might_b,
  $two_trait_diff_b,
  $two_trait_add_diff_b,
  $two_trait_rolled_b);
  $versus_one = (($two_trait_rolled_a - $trait_a[4]) >= 0) ? $two_trait_add_diff_a : 0; // 4 => Roll needed
  $versus_two = (($two_trait_rolled_b - $trait_b[4]) >= 0) ? $two_trait_add_diff_b : 0; // 4 => Roll needed
  $winsby_one = $trait_a[3] - $trait_a[4];
  $winsby_two = $trait_b[3] - $trait_b[4];
  $two_trait_winsby = ($winsby_one / 2) + ($winsby_two / 2) + $versus_one + $versus_two; // 6 => Windsby
  $two_trait_success = ($two_trait_winsby >= 0) ? 'yes' : 'no';
  if ($two_trait_success == 'no') {
    $two_trait_success = ($two_trait_winsby < -50) ? 'mishap' : 'no';
  }
  $two_trait_points = ($two_trait_winsby >= 0) ? ($two_trait_might_a + $two_trait_might_b) / 2 * $two_trait_winsby / 100 : 0;
  $two_trait_perc_diff = 'n/a';
  if ($two_trait_success != 'yes') {
    $two_trait_diff_perc_a = $two_trait_might_a * ((tan(($two_trait_rolled_a - 50.5) / 49.5 * atan(0.06 * 50)) / 6 + 0.5) / (0.5 - tan(($two_trait_rolled_a - 50.5) / 49.5 * atan(0.06 * 50)) / 6));
    $two_trait_diff_perc_b = $two_trait_might_b * ((tan(($two_trait_rolled_b - 50.5) / 49.5 * atan(0.06 * 50)) / 6 + 0.5) / (0.5 - tan(($two_trait_rolled_b - 50.5) / 49.5 * atan(0.06 * 50)) / 6));
    $two_trait_perc_diff = (($two_trait_diff_perc_a / $two_trait_diff_a) + ($two_trait_diff_perc_b / $two_trait_diff_b)) / 2;
  }
  $two_trait_failed_might = 0;
  if ($two_trait_success != 'yes') {
    $two_trait_failed_might = round((($two_trait_diff_a + $two_trait_diff_b) / 2) * (1 - $two_trait_perc_diff));
  }
  // Combine results.
  return array(
    '<div>' . $two_trait_might_a . '</div><div style="border-top:1px solid;">' . $two_trait_might_b . '</div>', // Display the two.
    '<div>' . $two_trait_diff_a . '</div><div style="border-top:1px solid;">' . $two_trait_diff_b . '</div>', // Display the two.
    '<div>' . $two_trait_add_diff_a . '</div><div style="border-top:1px solid;">' . $two_trait_add_diff_b . '</div>', // Display the two.
    '<div>' . $two_trait_rolled_a . '</div><div style="border-top:1px solid;">' . $two_trait_rolled_b . '</div>', // Display the two.
    '<div>' . number_format($trait_a[4], 1) . '</div><div style="border-top:1px solid;">' . number_format($trait_b[4], 1) . '</div>', // Display the two.
    $two_trait_success,
    is_numeric($two_trait_winsby) ? number_format($two_trait_winsby) : $two_trait_winsby,
    is_numeric($two_trait_points) ? number_format($two_trait_points) : $two_trait_points,
    is_numeric($two_trait_perc_diff) ? number_format($two_trait_perc_diff, 2) : $two_trait_perc_diff,
    $two_trait_failed_might,
  );
}