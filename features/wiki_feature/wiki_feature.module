<?php
/**
 * @file
 * Code for the Wiki features feature.
 */

include_once 'wiki_feature.features.inc';

/**
 * Implements hook_permission().
 */
function wiki_feature_permission() {
  return array(
    'edit locked wiki'=> array(
      'title' => t('edit locked wiki'),
      'description' => t('Edit a wiki in a locked workflow state.'),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function wiki_feature_menu_alter(&$items) {
  if (isset($items['node/%node/edit'])) {
    $items['node/%node/edit']['access callback'] = '_wiki_feature_edit_access_callback';
  }
}

/**
 * Menu access callback.
 */
function _wiki_feature_edit_access_callback($node) {
  if ($node->type == 'wiki_page' && _wiki_feature_locked($node)) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Implements hook_block_info().
 */
function wiki_feature_block_info() {
  $blocks = array();
  $blocks['wiki_feature_parent_breadcrumb'] = array(
    'info' => t('Wiki Parent Breadcrumb'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['wiki_feature_parent_links'] = array(
    'info' => t('Wiki Parent Links'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['wiki_feature_sibling_links'] = array(
    'info' => t('Wiki Sibling Links'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['wiki_feature_children_links'] = array(
    'info' => t('Wiki Child Links'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_theme().
 */
function wiki_feature_theme($existing, $type, $theme, $path) {
  $themes['wiki_feature_breadcrumb'] = array(
    'variables' => array(
      'links' => array(),
    ),
  );
  $themes['wiki_feature_links'] = array(
    'variables' => array(
      'links' => array(),
    ),
  );
  return $themes;
}

/**
 * Default theme function.
 */
function theme_wiki_feature_breadcrumb($vars) {
  $links = $vars['links'];
  $themed_links = array();
  foreach ($links as $i => $link) {
    $link = menu_get_item(drupal_get_normal_path($link));
    if (!empty($link['title'])) {
      $themed_links[] = l($link['title'], $link['href']);
    }
  }
  if (empty($themed_links)) {
    return '<div class="wiki-feature wiki-feature-links breadcrumb"></div>';
  }
  return '<div class="wiki-feature wiki-feature-links breadcrumb">' .
    '<ol class="wiki-feature-links breadcrumb">' . 
    '<li>' . implode(' â€º </li><li>', $themed_links) . '</li>' . 
    '</ol>' .
    '</div>';
}

/**
 * Default theme function.
 */
function theme_wiki_feature_links($vars) {
  $links = $vars['links'];
  $themed_links = array();
  foreach ($links as $i => $link) {
    $link = menu_get_item(drupal_get_normal_path($link));
    if (!empty($link['title'])) {
      $themed_links[] = l($link['title'], $link['href']);
    }
  }
  if (empty($themed_links)) {
    return '<div class="wiki-feature wiki-feature-links menu"></div>';
  }
  return '<div class="wiki-feature wiki-feature-links menu">' .
    '<ul class="wiki-feature-links menu">' . 
    '<li>' . implode('</li><li class="menu__item is-leaf leaf">', $themed_links) . '</li>' . 
    '</ul>' .
    '</div>';
}

/**
 * Implements hook_block_view().
 */
function wiki_feature_block_view($delta = '') {
  // If we're not on a wiki page, skip it.
  $node = menu_get_object();
  if (!isset($node->type) || $node->type != 'wiki_page') {
    return array();
  }
  $block = array();
  $path = drupal_get_path_alias();
  // Per delta, select an output.
  switch ($delta) {
    case 'wiki_feature_parent_breadcrumb':
      $links = _wiki_feature_get_parent_links($path);
      $block['subject'] = t('Wiki Parent Breadcrumb');
      $block['content'] = theme('wiki_feature_breadcrumb', array('links' => $links));
    break;
    case 'wiki_feature_parent_links':
      $links = _wiki_feature_get_parent_links($path);
      $block['subject'] = t('Wiki Parent Links');
      $block['content'] = theme('wiki_feature_links', array('links' => $links));
    break;
    case 'wiki_feature_sibling_links':
      $links = _wiki_feature_get_sibling_links($path);
      $block['subject'] = t('Wiki Sibling Links');
      $block['content'] = theme('wiki_feature_links', array('links' => $links));
    break;
    case 'wiki_feature_children_links':
      $links = _wiki_feature_get_child_links($path);
      $block['subject'] = t('Wiki Child Links');
      $block['content'] = theme('wiki_feature_links', array('links' => $links));
    break;
    default:
      /// Do nothing.
    break;
  }
  return $block;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wiki_feature_form_wiki_page_node_form_alter(&$form, &$form_state) {
  // Allow permissioned user to edit the wiki.
  if (user_access('edit locked wiki')) {
  	return;
  }
  // Else check for workflow state.
  if ($form['#node']->type == 'wiki_page' && _wiki_feature_locked($form['#node'])) {
    drupal_set_message(t('This wiki article is locked. You are not allowed to edit it.'));
    foreach (element_children($form) as $child) {
	    unset($form[$child]);
    }
  }
}

/**
 * Helper function, determine if the wiki page is locked.
 */
function _wiki_feature_locked($node) {
  if (isset($node->nid) && $state = workflow_get_workflow_node_by_nid($node->nid)) {
    $state = workflow_get_workflow_states_by_sid($state->sid);
    if ($state->state == 'locked') {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * DB function, pull the links from the DB.
 */
function _wiki_feature_get_parent_links($path) {
  // Given a string path, find the router parents above it.
  $components = explode('/', $path);
  $parent_path = '';
  $slash = '';
  $parent_links = array();
  foreach ($components as $component) {
    $parent_path .= $slash . $component;
    $slash = '/';
    $parent_links[] = $parent_path;
  }
  return $parent_links;
}

/**
 * DB function, pull the links from the DB.
 */
function _wiki_feature_get_child_links($path) {
  // Given a string path, find the router parents above it.
  $parent_path = '';
  $slash = '';  
  $links = db_query('SELECT alias FROM {url_alias} WHERE alias LIKE :parent', array(':parent' => $path . '/%'));
  $child_links = array();
  foreach ($links as $link) {
    $child_links[] = $link->alias;
  }
  return $child_links;
}

/**
 * DB function, pull the links from the DB.
 */
function _wiki_feature_get_sibling_links($path) {
  // Given a string path, find the router parents above it.
  $components = explode('/', $path);
  $self = array_pop($components);
  $parent_path = implode('/', $components);
  $links = _wiki_feature_get_child_links($parent_path);
  return array_diff($links, array($path));
}