<?php
/**
 * @file
 * Code for the Wiki features feature.
 */

include_once 'wiki_feature.features.inc';

/**
 * Implements hook_permission().
 */
function wiki_feature_permission() {
  return array(
    'edit locked wiki'=> array(
      'title' => t('edit locked wiki'),
      'description' => t('Edit a wiki in a locked workflow state.'),
    ),
    'consolidate wiki rooms'=> array(
      'title' => t('consolidate wiki rooms'),
      'description' => t('Consolidate wiki rooms.'),
    ),
    'administer wiki feature'=> array(
      'title' => t('administer wiki feature'),
      'description' => t('Administer Wiki Feature settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function wiki_feature_menu() {
  $items['admin/config/system/wiki_feature'] = array(
    'title' => 'Wiki Feature',
    'description' => 'Configure settings for the wiki feature',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_wiki_feature_admin_settings'),
    'access arguments' => array('administer wiki feature'),
  );
  $items['wiki_feature/autocomplete/room'] = array(
    'title' => 'Wiki feature room lookup',
    'type' => MENU_CALLBACK,
    'page callback' => '_wiki_feature_autocomplete_room',
    'access arguments' => array('administer wiki feature'),
  );
  return $items;
}

/**
 * Autocomplete function, callback for room look up.
 */
function _wiki_feature_autocomplete_room($string = '') {
  $matches = array();
  if (!empty($string)) {
    $results = db_query('SELECT n.nid, n.title FROM {node} n ' .
      'WHERE n.title LIKE :title',
      array(':title' => '%' . $string . '%'));
    foreach ($results as $result) {
      $label = $result->title . ' [nid:' . $result->nid . ']';
      $matches[ check_plain($label) ] = check_plain($label);
    }
  }
  drupal_json_output($matches);
}

/**
 * Implementation of admin settings form.
 */
function _wiki_feature_admin_settings($form, &$form_state) {
  $form['wiki_feature_root'] = array(
    '#title' => t('Wiki root room'),
    '#type' => 'textfield',
    '#default_value' => variable_get('wiki_feature_root', ''),
    '#autocomplete_path' => 'wiki_feature/autocomplete/room',
  );
  $form['wiki_feature_link_depth'] = array(
    '#title' => t('Wiki children depth'),
    '#description' => t('Set how many levels down should children links follow, at minimum 1.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('wiki_feature_link_depth', 1),
  );
  $form['wiki_feature_subpage_block_label'] = array(
    '#title' => t('Wiki subpage block text'),
    '#type' => 'textfield',
    '#default_value' => variable_get('wiki_feature_subpage_block_label', t('Subpages')),
  );
  $form['wiki_feature_subpage_label'] = array(
    '#title' => t('Wiki subpage link text'),
    '#type' => 'textfield',
    '#default_value' => variable_get('wiki_feature_subpage_label', t('Make a subpage of this page')),
  );
  $form['wiki_feature_templates'] = array(
    '#title' => t('Wiki templates'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#tree' => TRUE,
  );
  // X templates, with Name and value.
  // And one blank set of fields to add more to it.
  $headers = array(
    t('Template name'),
    t('Template'),
  );
  $rows = array();
  $templates = variable_get('wiki_feature_templates', array());
  foreach ($templates as $index => $template_data) {
    if (!empty($template_data['template_name'])) {
      $form['wiki_feature_templates'][$index]['template_name'] = array(
        '#title' => t('Template_name'),
        '#type' => 'textfield',
        '#default_value' => $template_data['template_name'],
      );
      $form['wiki_feature_templates'][$index]['template'] = array(
        '#title' => t('Template'),
        '#type' => 'textarea',
        '#default_value' => $template_data['template'],
      );
    }
  }
  $new_index = count($templates);
  $form['wiki_feature_templates'][$new_index]['template_name'] = array(
    '#title' => t('Template name'),
    '#description' => t('The name the template will be listed under for the display.'),
    '#type' => 'textfield',
  );
  $form['wiki_feature_templates'][$new_index]['template'] = array(
    '#title' => t('Template'),
    '#description' => t('The text of the template.'),
    '#type' => 'textarea',
  );
  return system_settings_form($form);
}

/**
 * Implements hook_menu_alter().
 */
function wiki_feature_menu_alter($node, $op, $account) {
  if ($op == 'update' && $node->type == 'wiki_page' && _wiki_feature_locked($node)) {
    return NODE_ACCESS_DENY;
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_node_view().
 */
function wiki_feature_node_view($node, $view_mode, $langcode) {

  // If node is a wiki page, give a link to make a new page.
  if ($node->type == 'wiki_page' && $view_mode == 'full' && node_access('create', $node)) {
    $subpage_label = variable_get('wiki_feature_subpage_label', 'Make a subpage of this page');
    $node->content['wiki_feature_new_child'] = array(
      '#markup' => '<div class="wiki_feature_subpage_link" style="font-weight:bold;float:right;">'.
         l(t('@page', array('@page' => $subpage_label)), 'node/add/wiki-page',
           array('query' => array('edit[title]' => $node->title . '/New Page'))) .
        '</div>',
      '#weight' => -1000,
    );
  }

  // If node is a wiki page, give a button to convert to a room.
  if ($node->type == 'wiki_page' && $view_mode == 'full' && user_access('consolidate wiki rooms')) {
    $node->content['wiki_feature_consolidate_child_rooms'] = array(
      '#markup' => drupal_render(drupal_get_form('_wiki_feature_consolidate_child_rooms', $node)),
      '#weight' => 1000,
    );
  }

}

/**
 * Form to consolidate children rooms.
 */
function _wiki_feature_consolidate_child_rooms($form, &$form_state, $node) {
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );
  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Consolidate children rooms'),
  );
  return $form;
}

/**
 * Form submit handler.
 */
function _wiki_feature_consolidate_child_rooms_submit($form, &$form_state) {
  $node = node_load($form_state['values']['nid']);
  if ($node) {
    _wiki_feature_merge_children($node);
  }
}

/**
 * Recursively merge all rooms below this room into one article.
 */
function _wiki_feature_merge_children($node) {
  if (empty($node)) {
    return;
  }
  $output = $node->body[ $node->language ][0]['value'];
  $path = drupal_get_path_alias('node/' . $node->nid);
  $children = _wiki_feature_get_child_paths($path);
  foreach ($children as $child) {
    $child = drupal_get_normal_path($child);
    if (strpos($child, 'node/')  !== FALSE) {
      $node_id = substr($child, 5);
      if (is_numeric($node_id)) {
        $child_node = node_load($node_id);
        if ($child_node) {
          // Merge everything below the child.
          _wiki_feature_merge_children($child_node);
          // Then put the child into this node.
          $output .= "\n\n";
          $title_end = explode('/', $child_node->title);
          $title_end = array_pop($title_end);
          $output .= '[b]' . $title_end . '[/b]' . "\n\n";
          $output .= $child_node->body[ $child_node->language ][0]['value'];
          // And flag the child for delete.
          $child_node->field_flag_for_deletion[ $child_node->language ][0]['value'] = 1;
          node_save($child_node);
       }
      }
    }
  }
  // Save this node before returning upwards.
  $node->body[ $node->language ][0]['value'] = $output;
  node_save($node);
}

/**
 * Implements hook_block_info().
 */
function wiki_feature_block_info() {
  $blocks = array();
  $blocks['wiki_feature_parent_breadcrumb'] = array(
    'info' => t('Wiki Parent Breadcrumb'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['wiki_feature_parent_links'] = array(
    'info' => t('Wiki Parent Links'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['wiki_feature_sibling_links'] = array(
    'info' => t('Wiki Sibling Links'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['wiki_feature_children_links'] = array(
    'info' => t('Wiki Child Links'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['wiki_feature_templates'] = array(
    'info' => t('Wiki Templates'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Implements hook_freelinking_alter().
 */
function wiki_feature_freelinking_alter(&$freelinking) {
  foreach ($freelinking as $plugin => $details) {
    // Only change for the nodetitle default freelink module.
    if ($plugin == 'nodetitle') {
      // Override the value for callback.
      $freelinking[$plugin]['callback'] = 'wiki_feature_freelinking_nodetitle_callback';
    }
  }
}

/**
 * Replacement callback for nodetitle plugin
 */
function wiki_feature_freelinking_nodetitle_callback($target, $plugin) {
  $node = wiki_feature_freelinking_nodetitle_nid_from_title($target); // WIKI FEARTURE: This is where the big change is. Call diff function.
  // If no node was found, identify proceed with configured failover
  if (!$node) {
    return _freelinking_nodetitle_failure($target);
  }
  // Construct values for link.
  $title = $target['text'] ? $target['text'] : $node->title;
  if (!$target['tooltip']) {
    $target['tooltip'] = freelinking_internal_tooltip('node', $node->nid);
  }
  // Return link structure.
  return array($title, 'node/' . $node->nid, array(
      'attributes' => array('title' => $target['tooltip']),
      'language' => $node->language,
  ));
}

/**
 * Grab the nid associated with the title.
 * Attempt some degree of language sensibility
 */
function wiki_feature_freelinking_nodetitle_nid_from_title(&$target) {
  $title = $target['dest'];
  // Get any content type restriction.
  if (isset($target['type'])) {
    $type = check_plain($target['type']);
  }
  else {
    $type = variable_get('freelinking_nodetitle_searchcontenttype', 'none');
  }
  $sql = "SELECT title, nid, language FROM {node} WHERE title = :title"; 
  $params = array(':title' => $title);
  if ($type != 'none') {
    $sql .= " AND type = :type";
    $params[':type'] = $type;
  }
  $result = db_query($sql, $params);
  $set = array();
  foreach ($result as $record) {
    $set[] = $record;
  }
  // WIKI FEATURE: This is where the big change is. Allow partial match on title IFF not found on full match.
  if (empty($set)) {
    $sql = "SELECT title, nid, language FROM {node} WHERE title LIKE :title"; 
    $params = array(':title' => '%' . $title);
    if ($type != 'none') {
      $sql .= " AND type = :type";
      $params[':type'] = $type;
    }
    $result = db_query($sql, $params);
    $set = array();
    foreach ($result as $record) {
      $set[] = $record;
    }
  }
  // Still nothing? Ok. One last try.
  if (empty($set)) {
    $title_end = explode('/', $title);
    $title_end = array_pop($title_end);
    $sql = "SELECT title, nid, language FROM {node} WHERE title LIKE :title"; 
    $params = array(':title' => '%' . $title_end);
    if ($type != 'none') {
      $sql .= " AND type = :type";
      $params[':type'] = $type;
    }
    $result = db_query($sql, $params);
    $set = array();
    foreach ($result as $record) {
      $set[] = $record;
    }
  }
  // And if nothing was found even then - only then return NULL.
  if (empty($set)) {
    return NULL;
  }
  // Language restriction. Includes next-best-language logic.
  $language = array(language_default('language'), '');
  if (module_exists('locale')) {
    if (isset($target['language'])) {
      array_unshift($language, $target['language']);
    }
    foreach ($language as $priority) {
      foreach ($set as $node) {
        if ($priority == $node->language) {
          $retn = $node;
          break 2;
        }
      }
    }
  }
  else {
    $retn = $set[0];
  }
  return $retn;
}

/**
 * Implements hook_freelink_alter().
 */
function wiki_feature_freelink_alter(&$link, $target, $plugin_name, $plugin) {
  // Trim title down to the last leaf for displaying the link.
  $title = $link[0];
  $title = explode('/', $title);
  if (is_array($title)) {
    $title = array_pop($title);
  }
  // And set it.
  $link[0] = $title;
}

/**
 * Implements hook_block_view().
 */
function wiki_feature_block_view($delta = '') {
  $block = array();
  $path = drupal_get_path_alias();
  $position = strpos($path, 'wiki/');
  if ($position === FALSE || $position !== 0) {
    return array();
  }
  // Per delta, select an output.
  switch ($delta) {
    case 'wiki_feature_parent_breadcrumb':
      $links = _wiki_feature_get_parent_links($path);
      $block['subject'] = t('Wiki Parent Breadcrumb');
      $content = theme('wiki_feature_breadcrumb', array('links' => $links));
      $block['content'] = $content;
    break;
    case 'wiki_feature_parent_links':
      $links = _wiki_feature_get_parent_links($path);
      $block['subject'] = t('Wiki Parent Links');
      if (!empty($links)) {
        $block['content'] = theme('wiki_feature_links', array('links' => $links));
        $block['content'] = $content;
      }
    break;
    case 'wiki_feature_sibling_links':
      $links = _wiki_feature_get_sibling_links($path);
      $block['subject'] = t('Wiki Sibling Links');
      if (!empty($links)) {
        $content = theme('wiki_feature_links', array('links' => $links));
        $block['content'] = $content;
      }
    break;
    case 'wiki_feature_children_links':
      $depth_limit = variable_get('wiki_feature_link_depth', 1);
      $links = _wiki_feature_get_children_tree($path, $depth_limit);
      $block['subject'] = t('Children links');
      if (!empty($links)) {
        $content['sub_pages'] = array(
        	'#type' => 'fieldset',
        	'#title' => variable_get('wiki_feature_subpage_block_label', t('Subpages')),
        	'#attributes' => array('class' => array('collapsible')), // For use outside a form.
        );
        $content['sub_pages']['links'] = array(
        	'#theme' => 'wiki_feature_links',
        	'#links' => $links,
        );
        $block['content'] = $content;
      }
    break;
    case 'wiki_feature_templates':
      $templates = variable_get('wiki_feature_templates', array());
      if (!empty($templates)) {
        $items = array();
        foreach ($templates as $index => $template_data) {
          if (!empty($template_data['template_name'])) {
            $items[] = '<span class="wiki_feature_templates wiki_feature_templates_' . $index . '">' .
              '<span class="wiki_feature_template_name"><a href="#">' . check_plain($template_data['template_name']) . '</a></span>' .
              '<span class="wiki_feature_template" style="display:none;">' . check_plain($template_data['template']) . '</span>' .
            '</span>';
          }
        }
        // Include the JS for this feature.
        drupal_add_js(drupal_get_path('module', 'wiki_feature') . '/js/wiki_feature.js');
        $block['subject'] = t('Wiki templates');
        $block['content'] = theme('item_list', array('items' => $items));
        $block['content'] .= '<div>' . t('These templates are provided to make it easier to quickly load a basic template for ' .
          'wiki articles. If you already have information in the page, or are not using a template feel free to ignore these links.') .
          '</div>';
      }
    break;
    default:
      /// Do nothing.
    break;
  }
  // Include the css overall for addressing blocks as needed.
  drupal_add_css(drupal_get_path('module', 'wiki_feature') . '/css/wiki_feature.css');
  return $block;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wiki_feature_form_wiki_page_node_form_alter(&$form, &$form_state) {

  // Save the old title so if it changes, we can update other wiki articles w/title.
  $form['wiki_feature_old_title'] = array(
    '#type' => 'hidden',
    '#value' => $form['#node']->title,
  );

  // Allow permissioned user to edit the wiki.
  if (user_access('edit locked wiki')) {
    return;
  }
  // Else check for workflow state.
  if (!empty($form['#node']->type) && $form['#node']->type == 'wiki_page' && _wiki_feature_locked($form['#node'])) {
    drupal_set_message(t('This wiki article is locked. You are not allowed to edit it.'));
    foreach (element_children($form) as $child) {
      unset($form[$child]);
    }
  }
}

/**
 * Implements hook_node_update().
 */
function wiki_feature_node_update($node) {

  // Tweak things only if wiki page.
  if ($node->title == 'wiki_page') {
    // If the title has changed, make sure we get all parents as well.
    $old_title = $node->wiki_feature_old_title;
    if ($old_title != $node->title) {
      $search = $old_title;
      $replace = $node->title;
      // Grab each node to update it.
      // We could do this in the MySQL directly, but then the path alias wouldn't update to match.
      $nids = db_query('SELECT n.nid FROM {node} n WHERE n.title LIKE :title',
        array(':title' => $search . '/%'));
      // Search and replace in MYSQL directly.
      foreach ($nids as $nid) {
        if ($nid->nid != $node->nid) {
  	      $child_wiki = node_load($nid->nid);
          $child_wiki->title = str_replace($search, $replace, $child_wiki->title);
          node_save($child_wiki);
        }
      }
      // Flush Entity Cache record.
      if (module_exists('entitycache')) {
        cache_clear_all('*', 'cache_entity_node', TRUE);
      }
    }
  }

}

function _wiki_feature_update_tree_of_titles($form, &$form_state) {
  $old_title = $form_state['values'][''];
}

/**
 * Implements hook_theme().
 */
function wiki_feature_theme($existing, $type, $theme, $path) {
  $themes['wiki_feature_breadcrumb'] = array(
    'variables' => array(
      'links' => array(),
    ),
  );
  $themes['wiki_feature_links'] = array(
    'variables' => array(
      'links' => array(),
    ),
  );
  return $themes;
}

/**
 * Default theme function.
 */
function theme_wiki_feature_breadcrumb($vars) {
  // Process all links.
  $links = $vars['links'];
  foreach ($links as $index => $link) {
    $links[$index] = $link .' / ';
  }
  if (empty($links)) {
    return '<div class="wiki-feature wiki-feature-links breadcrumb"></div>';
  }
  $themed_links = theme('item_list', array('items' => $links));
  return '<div class="wiki-feature wiki-feature-links breadcrumb">' .
    $themed_links .
    '</div>';
}

/**
 * Default theme function.
 */
function theme_wiki_feature_links($vars) {
  $links = $vars['links'];
  if (empty($links)) {
    return '<div class="wiki-feature wiki-feature-links menu"></div>';
  }
  $themed_links = theme('item_list', array('items' => $links));
  return '<div class="wiki-feature wiki-feature-links">' .
    $themed_links .
    '</div>';
}

/**
 * Helper function, determine if the wiki page is locked.
 */
function _wiki_feature_locked($node) {
  if (isset($node->nid) && $state = workflow_get_workflow_node_by_nid($node->nid)) {
    $state = workflow_get_workflow_states_by_sid($state->sid);
    if ($state->state == 'locked') {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Helper function, given a string retrieve any nid in the format [nid:XXX].
 * Or look for the node by title.
 */
function _wiki_feature_autocomplete_get_nid($room_selected) {
  $result = preg_match('/\[nid:([0-9]+)\]$/', $room_selected, $matches);
  if ($result > 0) {
    $nid = $matches[$result];
    $node = node_load($nid);
    if (empty($node)) {
      $nodes = node_load_multiple(array(), array('title' => $room_selected));
      foreach ($nodes as $nid => $this_node) {
        $node = $this_node;
      }
    }
    if (!empty($node) && $node->status == 1) {
      return $node->nid;
    }
  }
  return FALSE;
}

/**
 * Helper, convert a path into a link.
 */
function _wiki_feature_translate_path_to_link($path) {
  $link = drupal_get_normal_path($path);
  // Findout if there's a node for this path.
  $node = array();
  if (strpos($link, 'node/')  !== FALSE) {
    $node_id = substr($link, 5);
    if (is_numeric($node_id)) {
      $node = node_load($node_id);
    }
  }
  // Set short title default.
  $short_title = explode('/', $path);
  $short_title = check_plain(ucwords(array_pop($short_title)));

  // Check if a link exists.
  $link = menu_get_item(drupal_get_normal_path($link));
  if (!empty($link['title'])) {
    $link_title = explode('/', $link['title']);
    if (is_array($link_title)) {
      $short_title = check_plain(ucwords(array_pop($link_title)));
    }
  }
  // If there is, check access so know to display link or plain text.
  $link = l($short_title, $link['href']);
  if (!empty($node) && !node_access('view', $node)) { // If a node and not allowed to view.
    $link = $short_title;
  }
  return $link;
}

/**
 * Helper function, RECURSIVE, call for children gathering for display to given depth.
 */
function _wiki_feature_get_children_tree($path, $depth_limit = 1, $depth = 0) {
  $found_links = _wiki_feature_get_child_paths($path);
  $links = array();
  $depth++;
  // Check recursive values.
  foreach ($found_links as $index => $link) {
    if ($depth < $depth_limit) {
      $links[$index]['data'] = _wiki_feature_translate_path_to_link($link);
      $links[$index]['children'] = _wiki_feature_get_children_tree($link, $depth_limit, $depth);
    }
    else {
      $links[$index] = _wiki_feature_translate_path_to_link($link);
    }
  }
  return $links;
}

/**
 * DB function, pull the links from the DB.
 */
function _wiki_feature_get_parent_links($path) {
  // Given a string path, find the router parents above it.
  $components = explode('/', $path);
  $parent_path = '';
  $slash = '';
  $parent_links = array();
  foreach ($components as $component) {
    $parent_path .= $slash . $component;
    $slash = '/';
    // Don't include the 'wiki' path, we wanna use the set root instead.
    if ($parent_path != 'wiki') {
      $parent_links[] = $parent_path;
    }
  }
  $parent_links;
  // Get wiki root.
  $root = variable_get('wiki_feature_root', '');
  if (!empty($root)) {
    $root = _wiki_feature_autocomplete_get_nid($root);
    if ($path != $root) {
      // Add root at front of stack.
      array_unshift($parent_links, 'node/' . $root);
    }
  }
  foreach ($parent_links as $index => $parent_link) {
  	$parent_links[$index] = _wiki_feature_translate_path_to_link($parent_link);
  }
  return $parent_links;
}

/**
 * DB function, pull the links from the DB.
 */
function _wiki_feature_get_sibling_links($path) {
  // Given a string path, find the router parents above it.
  $components = explode('/', $path);
  $self = array_pop($components);
  $parent_path = implode('/', $components);
  $links = _wiki_feature_get_child_paths($parent_path);
  $links = array_diff($links, array($path));
  foreach ($links as $index => $link) {
  	$links[$index] = _wiki_feature_translate_path_to_link($link);
  }
  return $links;
}

/**
 * DB function, pull the links from the DB.
 */
function _wiki_feature_get_child_paths($path) {
  // Given a string path, find the router parents above it.
  $parent_path = '';
  $regexp = '^' . $path . '/[a-zA-Z0-9-]+$';
  $links = db_query('SELECT alias FROM {url_alias} WHERE alias REGEXP :regexp', array(':regexp' => $regexp));
  $child_links = array();
  foreach ($links as $link) {
    $child_links[] = $link->alias;
  }
  // Views don't place links in the url_alias table.
  // So views don't show up as childnre.
  // Nor as siblings if there's a % in the path for the view.
  $links = db_query('SELECT link_path FROM {menu_links} WHERE link_path REGEXP :regexp', array(':regexp' => $regexp));
  $child_links = array();
  foreach ($links as $link) {
    $child_links[] = $link->alias;
  }
  // And filter to just unique results.
  return array_unique ($child_links);
}