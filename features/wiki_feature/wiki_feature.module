<?php
/**
 * @file
 * Code for the Wiki features feature.
 */

include_once 'wiki_feature.features.inc';

/**
 * Implements hook_permission().
 */
function wiki_feature_permission() {
  return array(
    'edit locked wiki'=> array(
      'title' => t('edit locked wiki'),
      'description' => t('Edit a wiki in a locked workflow state.'),
    ),
    'administer wiki feature'=> array(
      'title' => t('administer wiki feature'),
      'description' => t('Administer Wiki Feature settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function wiki_feature_menu() {
  $items['admin/config/system/wiki_feature'] = array(
    'title' => 'Wiki Feature',
    'description' => 'Configure the root page of your wiki feature',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_wiki_feature_admin_settings'),
    'access arguments' => array('administer wiki feature'),
  );
  $items['wiki_feature/autocomplete/room'] = array(
    'title' => 'Wiki feature room lookup',
    'type' => MENU_CALLBACK,
    'page callback' => '_wiki_feature_autocomplete_room',
    'access arguments' => array('administer wiki feature'),
  );
  return $items;
}

/**
 * Autocomplete function, callback for room look up.
 */
function _wiki_feature_autocomplete_room($string = '') {
  $matches = array();
  $room_type = variable_get('item_helper_room_type', '');
  if (!empty($string) && !empty($room_type)) {
    $results = db_query('SELECT n.nid, n.title FROM {node} n ' .
      'WHERE n.type LIKE :type ' .
      'AND n.title LIKE :title',
      array(':type' => $room_type, ':title' => '%' . $string . '%'));
    foreach ($results as $result) {
      $label = $result->title . ' [nid:' . $result->nid . ']';
      $matches[ check_plain($label) ] = check_plain($label);
    }
  }
  drupal_json_output($matches);
}

/**
 * Implementation of admin settings form.
 */
function _wiki_feature_admin_settings($form, &$form_state) {
  $form['wiki_feature_root'] = array(
    '#title' => t('Wiki root room'),
    '#type' => 'textfield',
    '#default_value' => variable_get('wiki_feature_root', ''),
    '#autocomplete_path' => 'wiki_feature/autocomplete/room',
  );
  return system_settings_form($form);
}

/**
 * Implements hook_node_access().
 */
function wiki_feature_menu_alter($node, $op, $account) {
  if ($op == 'update' && $node->type == 'wiki_page' && _wiki_feature_locked($node)) {
    return NODE_ACCESS_DENY;
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_block_info().
 */
function wiki_feature_block_info() {
  $blocks = array();
  $blocks['wiki_feature_parent_breadcrumb'] = array(
    'info' => t('Wiki Parent Breadcrumb'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['wiki_feature_parent_links'] = array(
    'info' => t('Wiki Parent Links'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['wiki_feature_sibling_links'] = array(
    'info' => t('Wiki Sibling Links'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['wiki_feature_children_links'] = array(
    'info' => t('Wiki Child Links'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_freelinking_alter().
 */
function wiki_feature_freelinking_alter(&$freelinking) {
  foreach ($freelinking as $plugin => $details) {
    // Only change for the nodetitle default freelink module.
    if ($plugin == 'nodetitle') {
      // Override the value for callback.
      $freelinking[$plugin]['callback'] = 'wiki_feature_freelinking_nodetitle_callback';
    }
  }
}

/**
 * Replacement callback for nodetitle plugin
 */
function wiki_feature_freelinking_nodetitle_callback($target, $plugin) {
  $node = wiki_feature_freelinking_nodetitle_nid_from_title($target); // WIKI FEARTURE: This is where the big change is. Call diff function.
  // If no node was found, identify proceed with configured failover
  if (!$node) {
    return _freelinking_nodetitle_failure($target);
  }
  // Construct values for link.
  $title = $target['text'] ? $target['text'] : $node->title;
  if (!$target['tooltip']) {
    $target['tooltip'] = freelinking_internal_tooltip('node', $node->nid);
  }
  // Return link structure.
  return array($title, 'node/' . $node->nid, array(
      'attributes' => array('title' => $target['tooltip']),
      'language' => $node->language,
  ));
}

/**
 * Grab the nid associated with the title.
 * Attempt some degree of language sensibility
 */
function wiki_feature_freelinking_nodetitle_nid_from_title(&$target) {
  $title = $target['dest'];
  // Get any content type restriction.
  if (isset($target['type'])) {
    $type = check_plain($target['type']);
  }
  else {
    $type = variable_get('freelinking_nodetitle_searchcontenttype', 'none');
  }
  $sql = "SELECT title, nid, language FROM {node} WHERE title = :title"; 
  $params = array(':title' => $title);
  if ($type != 'none') {
    $sql .= " AND type = :type";
    $params[':type'] = $type;
  }
  $result = db_query($sql, $params);
  $set = array();
  foreach ($result as $record) {
    $set[] = $record;
  }
  // WIKI FEARTURE: This is where the big change is. Allow partial match on title IFF not found on full match.
  if (empty($set)) {
    $sql = "SELECT title, nid, language FROM {node} WHERE title LIKE :title"; 
    $params = array(':title' => '%' . $title);
    if ($type != 'none') {
      $sql .= " AND type = :type";
      $params[':type'] = $type;
    }
    $result = db_query($sql, $params);
    $set = array();
    foreach ($result as $record) {
      $set[] = $record;
    }
  }
  // And if nothing was found even then - only then return NULL.
  if (empty($set)) {
    return NULL;
  }
  // Language restriction. Includes next-best-language logic.
  $language = array(language_default('language'), '');
  if (module_exists('locale')) {
    if (isset($target['language'])) {
      array_unshift($language, $target['language']);
    }
    foreach ($language as $priority) {
      foreach ($set as $node) {
        if ($priority == $node->language) {
          $retn = $node;
          break 2;
        }
      }
    }
  }
  else {
    $retn = $set[0];
  }
  return $retn;
}

/**
 * Implements hook_freelink_alter().
 */
function wiki_feature_freelink_alter(&$link, $target, $plugin_name, $plugin) {
  // Trim title down to the last leaf for displaying the link.
  $title = $link[0];
  $title = explode('/', $title);
  if (is_array($title)) {
    $title = array_pop($title);
  }
  // And set it.
  $link[0] = $title;
}

/**
 * Implements hook_block_view().
 */
function wiki_feature_block_view($delta = '') {
  // If we're not on a wiki page, skip it.
  $node = menu_get_object();
  if (!isset($node->type) || $node->type != 'wiki_page') {
    return array();
  }
  $block = array();
  $path = drupal_get_path_alias();
  // Per delta, select an output.
  switch ($delta) {
    case 'wiki_feature_parent_breadcrumb':
      $links = _wiki_feature_get_parent_links($path);
      $block['subject'] = t('Wiki Parent Breadcrumb');
      $block['content'] = theme('wiki_feature_breadcrumb', array('links' => $links));
    break;
    case 'wiki_feature_parent_links':
      $links = _wiki_feature_get_parent_links($path);
      $block['subject'] = t('Wiki Parent Links');
      $block['content'] = theme('wiki_feature_links', array('links' => $links));
    break;
    case 'wiki_feature_sibling_links':
      $links = _wiki_feature_get_sibling_links($path);
      $block['subject'] = t('Wiki Sibling Links');
      $block['content'] = theme('wiki_feature_links', array('links' => $links));
    break;
    case 'wiki_feature_children_links':
      $links = _wiki_feature_get_child_links($path);
      $block['subject'] = t('Wiki Child Links');
      $block['content'] = theme('wiki_feature_links', array('links' => $links));
    break;
    default:
      /// Do nothing.
    break;
  }
  return $block;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wiki_feature_form_wiki_page_node_form_alter(&$form, &$form_state) {
  // Allow permissioned user to edit the wiki.
  if (user_access('edit locked wiki')) {
  	return;
  }
  // Else check for workflow state.
  if (!empty($form['#node']->type) && $form['#node']->type == 'wiki_page' && _wiki_feature_locked($form['#node'])) {
    drupal_set_message(t('This wiki article is locked. You are not allowed to edit it.'));
    foreach (element_children($form) as $child) {
	    unset($form[$child]);
    }
  }
}

/**
 * Implements hook_theme().
 */
function wiki_feature_theme($existing, $type, $theme, $path) {
  $themes['wiki_feature_breadcrumb'] = array(
    'variables' => array(
      'links' => array(),
    ),
  );
  $themes['wiki_feature_links'] = array(
    'variables' => array(
      'links' => array(),
    ),
  );
  return $themes;
}

/**
 * Default theme function.
 */
function theme_wiki_feature_breadcrumb($vars) {
  // Get wiki root.
  $root = variable_get('wiki_feature_root', '');
  if (!empty($root)) {
    $root = _wiki_feature_autocomplete_get_nid($root);
    // Add root at front of stack.
    array_unshift($vars['links'], 'node/' . $root);
  }
  // Process all links.
  $themed_links = array();
  foreach ($vars['links'] as $i => $link) {
    $link = menu_get_item(drupal_get_normal_path($link));
    if (!empty($link['title'])) {
      $short_title = explode('/', $link['title']);
      if (is_array($short_title)) {
        $short_title = array_pop($short_title);
      }
      $themed_links[] = l($short_title, $link['href']);
    }
  }
  if (empty($themed_links)) {
    return '<div class="wiki-feature wiki-feature-links breadcrumb"></div>';
  }
  return '<div class="wiki-feature wiki-feature-links breadcrumb">' .
    '<ol class="wiki-feature-links breadcrumb">' . 
    '<li>' . implode(' â€º </li><li>', $themed_links) . '</li>' . 
    '</ol>' .
    '</div>';
}

/**
 * Default theme function.
 */
function theme_wiki_feature_links($vars) {
  $links = $vars['links'];
  $themed_links = array();
  foreach ($links as $i => $link) {
    $link = drupal_get_normal_path($link);
    $node = array();
    if (strpos($link, 'node/')  !== FALSE) {
      $node_id = substr($link, 5);
      if (is_numeric($node_id)) {
        $node = node_load($node_id);
      }
    }
    if (strpos($link, 'node/') === FALSE || (!empty($node) && node_access('view', $node))) { // Not a node (view link), or if a published node.
      $link = menu_get_item($link);
      if (!empty($link['title'])) {
        $short_title = explode('/', $link['title']);
        if (is_array($short_title)) {
          $short_title = array_pop($short_title);
        }
        $themed_links[] = l($short_title, $link['href']);
      }
    }
  }
  if (empty($themed_links)) {
    return '<div class="wiki-feature wiki-feature-links menu"></div>';
  }
  return '<div class="wiki-feature wiki-feature-links menu">' .
    '<ul class="wiki-feature-links menu">' . 
    '<li class="menu__item is-leaf leaf">' . implode('</li><li class="menu__item is-leaf leaf">', $themed_links) . '</li>' . 
    '</ul>' .
    '</div>';
}

/**
 * Helper function, determine if the wiki page is locked.
 */
function _wiki_feature_locked($node) {
  if (isset($node->nid) && $state = workflow_get_workflow_node_by_nid($node->nid)) {
    $state = workflow_get_workflow_states_by_sid($state->sid);
    if ($state->state == 'locked') {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Helper function, given a string retrieve any nid in the format [nid:XXX].
 * Or look for the node by title.
 */
function _wiki_feature_autocomplete_get_nid($room_selected) {
  $result = preg_match('/\[nid:([0-9]+)\]$/', $room_selected, $matches);
  if ($result > 0) {
    $nid = $matches[$result];
    $node = node_load($nid);
    if (empty($node)) {
      $nodes = node_load_multiple(array(), array('title' => $room_selected));
      foreach ($nodes as $nid => $this_node) {
        $node = $this_node;
      }
    }
    $room_type = variable_get('item_helper_room_type', '');
    if (!empty($node) && $node->type == $room_type && $node->status == 1) {
      return $node->nid;
    }
  }
  return FALSE;
}

/**
 * DB function, pull the links from the DB.
 */
function _wiki_feature_get_parent_links($path) {
  // Given a string path, find the router parents above it.
  $components = explode('/', $path);
  $parent_path = '';
  $slash = '';
  $parent_links = array();
  foreach ($components as $component) {
    $parent_path .= $slash . $component;
    $slash = '/';
    $parent_links[] = $parent_path;
  }
  return $parent_links;
}

/**
 * DB function, pull the links from the DB.
 */
function _wiki_feature_get_child_links($path) {
  // Given a string path, find the router parents above it.
  $parent_path = '';
  $regexp = '^' . $path . '/[a-zA-Z0-9-]+$';
  $links = db_query('SELECT alias FROM {url_alias} WHERE alias REGEXP :regexp', array(':regexp' => $regexp));
  $child_links = array();
  foreach ($links as $link) {
    $child_links[] = $link->alias;
  }
  return $child_links;
}

/**
 * DB function, pull the links from the DB.
 */
function _wiki_feature_get_sibling_links($path) {
  // Given a string path, find the router parents above it.
  $components = explode('/', $path);
  $self = array_pop($components);
  $parent_path = implode('/', $components);
  $links = _wiki_feature_get_child_links($parent_path);
  return array_diff($links, array($path));
}