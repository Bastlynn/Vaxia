<?php
/**
 * @file
 * Drupal needs this blank file.
 */

include_once 'sh_test.features.inc';

/**
 * Implements hook_permission().
 */
function sh_test_permission() {
  return array(
    'approve sh test'=> array(
      'title' => t('approve sh test'),
      'description' => t('Approve the ASH 3 test.'),
    ),
    'approve sh starvation'=> array(
      'title' => t('approve sh starvation'),
      'description' => t('Approve the ASH 3 test in starvation mode.'),
    ),
    'view sh test results'=> array(
      'title' => t('view sh test results'),
      'description' => t('View SH test results.'),
    ),
    'view session qualify'=> array(
      'title' => t('view session qualify'),
      'description' => t('View if a session qualifies for system.'),
    ),
    'administrate sh test'=> array(
      'title' => t('administrate sh test'),
      'description' => t('Administrate the SH test.'),
    ),
  );
}

/**
 * Implements hook_rules_event_info().
 */
function sh_test_rules_event_info() {
  $items = array(
    'overdue_application' => array(
      'label' => t('Application overdue'),
      'group' => t('SH test'),
      'variables' => array(
        'node' => array(
            'type' => 'node',
            'label' => t('Application'),
        ),
      ),
    ),
  );
  return $items;
}

/**
 * Implements hook_cron().
 */
function sh_test_cron() {
  _sh_test_cron_check_overdue();
}

/**
 * Cron handler for overdue applications.
 */
function _sh_test_cron_check_overdue() {
  if (!function_exists('rules_invoke_event')) {
    return; // Bail out if no rules.
  }
  $last_run = variable_get('sh_test_cron', 0);
  $yesterday = strtotime('-1 day');
  if ($last_run < $yesterday) {
    $timeframe = strtotime('-1 week');
    $applications = db_query('SELECT n.nid FROM {node} n ' .
      'LEFT JOIN {webform} w ON w.nid = n.nid ' .
      'WHERE w.status = 1 '. // Where the webform is still open.
      'AND n.type = \'storyhost_application\' ' . // And it's a storyhost application type.
      'AND n.changed < :timeframe', // And it's been open for more than a week.
      array(':timeframe' => $timeframe));
    // Now that we have a list of applications that might qualify.
    $today = strtotime('now');
    foreach ($applications as $application) {
      $node = node_load($application->nid);
      // Execute the rule.
      rules_invoke_event('overdue_application', $node);
    }
  }
}

/**
 * Implements hook_node_view().
 */
function sh_test_node_view($node, $view_mode, $langcode) {

  // Only override the displays for proposals.
  if ($node->type == 'storyhost_application') {
    module_load_include('inc', 'webform', 'includes/webform.report');
    // Show results if any.
    global $user;
    if ($node->uid == $user->uid || user_access('view sh test results') || user_access('administrate sh test')) {
      $node->content['application_results'] = array(
        '#markup' => '<div class="application_result">' . webform_results_table($node) . '</div>',
        '#weight' => 1003,
      );
    }
  }
  
  // Display if this session report counts towards SH requirements.
  if ($node->type == 'session_report' && user_access('view session qualify')) {
    $message = t('This session report %display count towards session requirements on site.',
      array('%display' => 'does NOT'));
    if (sh_test_session_counts($node)) {
      $message = t('This session report %display count towards session requirements on site.',
        array('%display' => 'does'));
    }
    $requirements = array();
    if (variable_get('sh_test_session_party_size', TRUE)) {
      $size_min = variable_get('sh_test_session_party_size_min', 2);
      $requirements[] = t('At least %size_min in the party.', array('%size_min' => $size_min));
      $npcs = variable_get('sh_test_session_party_size_npcs', FALSE);
      $npcs = $npcs ? 'DO' : 'do not';
      $requirements[] = t('NPCs %npcs count.', array('%npcs' => $npcs));
      $ashs = variable_get('sh_test_session_party_size_ashs', FALSE);
      $ashs = $ashs ? 'DO' : 'do not';
      $requirements[] = t('A/SH accounts %ashs count.', array('%ashs' => $ashs));
      $own_pcs = variable_get('sh_test_session_party_size_own_pcs', FALSE);
      $own_pcs = $own_pcs ? 'DO' : 'do not';
      $requirements[] = t('The A/SH\'s own PCs %own_pcs count.', array('%own_pcs' => $own_pcs));
    }
    if (variable_get('sh_test_session_expires', TRUE)) {
      $timeframe = variable_get('sh_test_session_expires_timeframe', '3 years');
      $requirements[] = t('The session was run within the last %timeframe.', array('%timeframe' => $timeframe));
    }
    // Add settings.
    $message .= ' ' . implode(' ', $requirements);
    $node->content['session_report_state'] = array(
      '#markup' => '<div class="session_report_state">' . $message . '</div>',
      '#weight' => 1003,
    );
  }

}

/**
 * Implements hook_form_alter().
 */
function sh_test_form_alter(&$form, &$form_state, $form_id) {
  // If we're viewing a webform.
  // Why hook_form_alter and not hook_form_FORM_ID_alter? Because webform's form id varies: webform_client_form_NID.
  if (strstr($form_id, 'webform_client_form') !== FALSE) {
    $node = $form['#node'];
    // If we're not looking at a proposal, bail out with the normal view.
    if ($node->type != 'storyhost_application') {
      return; // Use defaults.
    }
    // Check for ownership. If the owner made this application, they can't vote on it.
    global $user;
    if ($user->uid == $node->uid) {
      $form['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_menu().
 */
function sh_test_menu() {
  $items['admin/vaxia/sh_test'] = array(
    'title' => 'Storyhost course settings',
    'description' => 'Settings for the Vaxia Storyhost course.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_sh_test_admin_settings'),
    'access arguments' => array('administrate sh test'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Menu callback, admin form.
 */
function _sh_test_admin_settings($form, &$form_state) {
  $form['sh_test_starvation_mode'] = array(
    '#title' => t('Minimum Storyhosts'),
    '#description' => t('Below this number of storyhosts we are in starvation mode for ASH 3.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('sh_test_starvation_mode', '4'),
  );
  $form['sh_test_approval_min'] = array(
    '#title' => t('Minimum approval percent'),
    '#description' => t('At least these many approvals are required to pass ASH 3.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('sh_test_approval_min', '75'),
  );
  $form['sh_test_approval_min_starvation'] = array(
    '#title' => t('Minimum starvation approval percent'),
    '#description' => t('At least these many approvals are required to pass ASH 3 in starvation mode.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('sh_test_approval_min_starvation', '50'),
  );
  $form['session_requires'] = array(
    '#type' => 'fieldset',
    '#title' => t('Session requirements'),
    '#collapsible' => TRUE,
    '#collpased' => TRUE,
  );
  $form['session_requires']['sh_test_session_party_size'] = array(
    '#type' => 'checkbox',
    '#title' => t('Check participants'),
    '#description' => t('Use participants to check if session counts towards system.'),
    '#default_value' => variable_get('sh_test_session_party_size', TRUE),
  );
  $form['session_requires']['sh_test_session_party_size_min'] = array(
    '#type' => 'textfield',
    '#title' => t('Participant requirements'),
    '#description' => t('At least these many participants are required for this session to count in the system.'),
    '#default_value' => variable_get('sh_test_session_party_size_min', 2),
  );
  $form['session_requires']['sh_test_session_party_size_npcs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Count NPCs'),
    '#description' => t('Count NPCs as participants.'),
    '#default_value' => variable_get('sh_test_session_party_size_npcs', FALSE),
  );
  $form['session_requires']['sh_test_session_party_size_ashs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Count A/SHs'),
    '#description' => t('Count A/SHs as participants.'),
    '#default_value' => variable_get('sh_test_session_party_size_ashs', FALSE),
  );
  $form['session_requires']['sh_test_session_party_size_own_pcs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Count own PCs'),
    '#description' => t('Count your own PCs as participants.'),
    '#default_value' => variable_get('sh_test_session_party_size_own_pcs', FALSE),
  );
  $form['session_requires']['sh_test_session_expires'] = array(
    '#type' => 'checkbox',
    '#title' => t('Check dates held'),
    '#description' => t('Use the date held to check if session counts towards system.'),
    '#default_value' => variable_get('sh_test_session_expires', TRUE),
  );
  $form['session_requires']['sh_test_session_expires_timeframe'] = array(
    '#type' => 'textfield',
    '#title' => t('Expiration timeframe'),
    '#description' => t('The session must have been held with this timeframe for it to count in the system.'),
    '#default_value' => variable_get('sh_test_session_expires_timeframe', '3 years'),
  );
  $form['sh_test_recalc_xp'] = array(
    '#type' => 'submit',
    '#value' => t('Recalculate Earned XP'),
    '#submit' => array('_sh_test_recalc_xp_submit'),
  );
  return system_settings_form($form);
}

/**
 * Submit handler for recalculating all active user XP values.
 * In case we've gotten something out of sync for any given users.
 */
function _sh_test_recalc_xp_submit($form, &$form_state) {
  $result = db_query('REPLACE INTO field_data_field_xp_over_time ' .
    'SELECT \'user\', \'user\', 0, u.uid, u.uid, \'und\', 0, SUM(xp.xp) as value FROM users u ' .
    'LEFT JOIN node n ON u.uid = n.uid  ' .
    'LEFT JOIN character_sheet_xp xp ON n.nid = xp.nid  ' .
    'WHERE n.type = \'character_sheet\' ' .
    //'AND n.status = 1 ' .
    'AND xp.type = \'xp\' ' .
    'GROUP BY u.uid');
  $result = db_query('REPLACE INTO field_revision_field_xp_over_time ' .
    'SELECT \'user\', \'user\', 0, u.uid, u.uid, \'und\', 0, SUM(xp.xp) as value FROM users u ' .
    'LEFT JOIN node n ON u.uid = n.uid  ' .
    'LEFT JOIN character_sheet_xp xp ON n.nid = xp.nid  ' .
    'WHERE n.type = \'character_sheet\' ' .
    //'AND n.status = 1 ' .
    'AND xp.type = \'xp\' ' .
    'GROUP BY u.uid');
  drupal_set_message(t('SH totals for all active players have been reset.'));
}

/**
 * Helper for rules. Check how many sessions a given user has run so far.
 */
function sh_test_check_sessions_ran($uid, $ran) {
  $count = 0;
  $nodes = node_load_multiple(array(), array('type' => 'session_report', 'uid' => $uid ));
  foreach ($nodes as $node) {
    if (sh_test_session_counts($node)) {
      $count++;
    }
  }
  if ($count >= $ran) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Helper for rules. Check if an SH has run recently.
 */
function sh_test_check_last_run($uid, $time) {
  $time .= ' ago';
  // Get the last SH ran, and check for if created matches date.
  $results = db_query('SELECT nid FROM {nodes} ' .
    'WHERE uid = :uid AND type = :type AND created >= :created' .
    'ORDER BY created DESC',
    array(':uid' => $uid, ':type' => 'session_report', ':created' => strtotime($time)));
  foreach ($results as $nid) {
    $node = node_load($nid);
    $timespan = strtotime($time);
    if (sh_test_session_counts($node) && $node->created >= $timespan) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Helper for rules. Check if an SH has run recently.
 */
function sh_test_check_date_last_run($uid, $time) {
  // 6 months for evaluators, else lose it all.
  // 3 months for story hosts who are NOT evaluators.
  $time .= ' ago';
  // Get the last SH ran, and check for if created matches date.
  $results = db_query('SELECT nid FROM {nodes} ' .
    'WHERE uid = :uid AND type = :type ' .
    'ORDER BY created DESC LIMIT 0,1 ',
    array(':uid' => $uid, ':type' => 'session_report'));
  foreach ($results as $nid) {
    $node = node_load($nid);
    $timespan = strtotime($time);
    if (sh_test_session_counts($node) && $node->created >= $timespan) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Helper for rules. Check if an SH has run recently.

function sh_test_check_last_eval($uid, $time = '', $mode = 'bool') {
  $nodes = node_load_multiple(array(), array('type' => 'session_report', 'uid' => $uid ));
  foreach ($nodes as $node) {
    $timespan = strtotime($time);
    if (sh_test_session_counts($node) && $node->created >= $timespan) {
      return FALSE;
    }
  }
  return TRUE;
}
 */

/**
 * Helper function, determine if a session counts towards the system.
 */
function sh_test_session_counts($session) {
  $session_counts = TRUE;
  // Check if the session is published.
  if ($session->status == 0) {
    $session_counts = FALSE;
  }
  // Check if the session meets participant requirements.
  if (variable_get('sh_test_session_party_size', TRUE)) {
    $npcs = variable_get('sh_test_session_party_size_npcs', FALSE);
    $ashs = variable_get('sh_test_session_party_size_ashs', FALSE);
    $own_pcs = variable_get('sh_test_session_party_size_own_pcs', FALSE);
    $count_part = 0;
    foreach ($session->field_characters_involved[$session->language] as $delta => $character) {
      // Find character.
      if (!empty($character['node'])) {
        $character = $character['node'];
      }
      elseif (!empty($character['nid'])) {
        $character = node_load($character['nid']);
      }
      else {
        $character = node_load($character);
      }
      $counts = TRUE;
      // Check if NPCs.
      if (!$npcs && $character->field_is_npc[$character->language][0]['value'] == 1) {
        $counts = FALSE;
      }
      if (!$npcs && $character->field_is_open_npc[$character->language][0]['value'] == 1) {
        $counts = FALSE;
      }
      // Check if A/SHs.
      if (!$ashs && $character->field_is_storyteller[$character->language][0]['value'] == 1) {
        $counts = FALSE;
      }
      // Check if own PCs.
      if (!$own_pcs && $character->uid == $session->uid) {
        $counts = FALSE;
      }
      // Set the count if it does.
      if ($counts) {
        $count_part++;
      }
    }
    // Check the requirement. Do we have enough people?
    $requires = variable_get('sh_test_session_party_size_min', 2);
    if ($count_part < $requires) {
      $session_counts = FALSE;
    }
  }
  // Check if the session meets timeframe requirements.
  // If the user is returning from the past, then the past sessions shouldn't count.
  // Or if the user has taken a crazy long time to get through the ASH course, ditto.
  if (variable_get('sh_test_session_expires', TRUE)) {
    $timeframe = variable_get('sh_test_session_expires_timeframe', '3 years');
    $cutoff_date = strtotime($timeframe . ' ago'); // 3 years ago.
    if ($session->created < $cutoff_date) {
      $session_counts = FALSE;
    }
  }
  // Return.
  return $session_counts;
}

/**
 * Helper for rules. Check if we are so low on SH's that we just need to pass the user through.
 */
function sh_test_check_starvation_mode() {
  $result = db_query('SELECT COUNT(ur.uid) FROM {users_roles} ur ' .
    'LEFT JOIN {role} r ON ur.rid = r.rid ' .
    'WHERE r.name = :name', array(':name' => 'storyteller') );
  $count = 0;
  foreach ($result as $value) {
    $count = $value;
  }
  if ($count < variable_get('sh_test_starvation_mode', '4')) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Helper for rules. Setup the webform response for approving new candidates.
 */
function sh_test_setup_approval_form($user, $node, $entity_created) {
  $user->field_ash_3_answers[$lang][0]['value'] = $output;
  $user->field_ash_3_answers[$lang][0]['format'] = 'wiki';
  user_save($user);

  $output = sh_test_ash_3_get_answers($user, $node);
  if (empty($output)) {
    drupal_set_message(t('An error was encountered, no output able to be created.'));
    return;
  }
  // Set the webform body
  $entity_created->body[$entity_created->language][0]['value'] = $output;
  $entity_created->webform['confirmation'] = t('Thank you!');
  $entity_created->webform['confirmation_format'] = 'plain_text';
  $entity_created->webform['submit_limit'] = 1;
  // Save the node
  node_save($entity_created);
  // Set approving roles for users.
  $approving = array();
  if (sh_test_check_starvation_mode()) {
    $approving = user_roles(FALSE, 'approve sh test');
  }
  else {
    $approving = user_roles(FALSE, 'approve sh starvation');
  }
  $record = db_query('DELETE FROM {webform_roles} WHERE nid = :nid', array(':nid' => $entity_created->nid));
  foreach ($approving as $role) {
    if ($role) {
      $this_role = user_role_load_by_name($role_name);
      db_insert('webform_roles')->fields(array('nid' => $entity_created->nid, 'rid' => $this_role->rid))->execute();
    }
  }
  // Include the webform module that allows components to be created.
  module_load_include('inc', 'webform', 'includes/webform.components');
  // Create the standard webform field for approval.
  $items = 'approve|' .  t('Yes. I approve this SH candidate to become a full SH.') . "\n" .
    'disapprove|' . t('No. I would like to see some improvements, and have included the details below.');
  $component = array();
  $component['nid'] = $entity_created->nid;
  $component['pid'] = 0;
  $component['form_key'] = 'approval';
  $component['name'] = t('Approve');
  $component['type'] = 'select';
  $component['mandatory'] = 1;
  $component['extra'] = array(
    'description' => '',
    'items' => $items,
    'multiple' => '1',
    'aslist' => '0',
    );
  $component['weight'] = 0;
  webform_component_insert($component);
  $component = array();
  $component['nid'] = $entity_created->nid;
  $component['pid'] = 0;
  $component['form_key'] = 'comments';
  $component['name'] = t('Comments');
  $component['type'] = 'textarea';
  $component['mandatory'] = 1;
  $component['extra'] = array(
    );
  $component['weight'] = 1;
  webform_component_insert($component);
}

/**
 * Helper for rules. Save the webform response for users answering ASH 3.
 */
function sh_test_setup_ash_3_save_answers($user, $node) {
  $output = sh_test_ash_3_get_answers($user, $node);
  if (empty($output)) {
    drupal_set_message(t('An error was encountered, no output able to be created.'));
    return;
  }
  // Save the output to the user field.
  $lang = !empty($user->language) ? $user->language : 'und';
  $user->field_ash_3_answers[$lang][0]['value'] = $output;
  $user->field_ash_3_answers[$lang][0]['format'] = 'wiki';
  user_save($user);
}

/**
 * Helper for rules. Given data, gather the quiz output.
 */
function sh_test_ash_3_get_answers($user, $node) {
  // Find the result ID for this test taken.
  $uid = $user->uid;
  $nid = $node->nid;
  $vid = $node->vid;
  $results = db_query("SELECT r.result_id FROM {quiz_node_results} r " .
    "WHERE r.uid = :uid " .
    "AND r.nid = :nid " .
    "AND r.vid = :vid " .
    "ORDER BY r.time_end DESC LIMIT 0,1 ",
    array(
    ':uid' => $uid,
    ':nid' => $nid,
    ':vid' => $vid,
    ));
  $rid = '';
  foreach ($results as $result) {
    $rid = $result->result_id;
  }
  if (empty($rid)) {
    drupal_set_message(t('An error was encountered, no result ID able to be found.'));
    return '';
  }
  // Now get the printed out set of answers.
  $questions = _quiz_get_answers($node, $rid);
  ksort($questions);
  $output = '';
  foreach ($questions as $question_nid => $question) {
    $q_title = $question->title;
    $full_question = node_load($question_nid);
    $q = $full_question->body[$full_question->language][0]['value'];
    $a = $question->answers[0]['answer'];
    $output .= '<h3><b>' . $q_title . '</b></h3><p><b>'. $q . '</b></p><p>' . $a . '</p><hr><br/>';
  }
  return $output;
}

/**
 * Helper for rules. Check if enough storyhosts have approved this application.
 */
function sh_test_check_ash_3_approvals($nid) {
  $results = db_query("SELECT wd.data FROM {webform_submitted_data} wd " .
    "WHERE wd.nid = :nid " .
    "AND wd.cid = 1", // There is only the one form element.
    array(':nid' => $nid,));
  $count = 0;
  foreach ($results as $result) {
    if ($result->data == 'approve') {
      $count++;
    }
  }
  // Total eligable SH evals.
  $node = node_load($nid);
  $approvers = get_possible_approvers($node->uid);
  $approvers = count($approvers);
  $percentage = $count / $approvers; // Leave with decimals, cause that's valid. Math is like that.
  // Do we have quorum?
  if (sh_test_check_starvation_mode()) {
    if ($percentage >= variable_get('sh_test_approval_min', '75')) {
      return TRUE;
    }
  }
  else {
    if ($percentage >= variable_get('sh_test_approval_min_starvation', '50')) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Helper function, get possible approvers.
 */
function get_possible_approvers($applicant) {
  $approving = array();
  if (sh_test_check_starvation_mode()) {
    $approving = user_roles(FALSE, 'approve sh test');
  }
  else {
    $approving = user_roles(FALSE, 'approve sh starvation');
  }
  $approvers = array();
  foreach ($approving as $role) {
    if ($role) {
      $users = db_query('SELECT uid FROM {users_roles} WHERE rid = :rid', array('rid' => $role));
      foreach ($users as $user) {
        if ($users->uid != $applicant) { // Don't count the self.
          $approvers[$user->uid] = $user->uid;
        }
      }
    }
  }
  return $approvers;
}

/**
 * Helper for rules. Check if all possible users have weighed in.
 */
function sh_test_check_ash_3_responses($nid) {
  $results = db_query("SELECT wd.data FROM {webform_submitted_data} wd " .
    "WHERE wd.nid = :nid " .
    "AND wd.cid = 1", // There is only the one form element.
    array(':nid' => $nid,));
  $count = 0;
  foreach ($results as $result) {
    $count++;
  }
  // Total eligable SH evals.
  $node = node_load($nid);
  $approvers = get_possible_approvers($node->uid);
  // Has everyone that could vote, voted?
  if ($count >= count($approvers)) {
    return TRUE;
  }
  return FALSE;
}