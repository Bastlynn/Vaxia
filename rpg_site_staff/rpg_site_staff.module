<?php
/**
 * @file
 * Code for the RPG Site Staff feature.
 */

include_once 'rpg_site_staff.features.inc';

/**
 * Implements hook_permission().
 */
function rpg_site_staff_permission() {
  return array(
    'view session notes'=> array(
      'title' => t('view session notes'),
      'description' => t('View session notes.'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function rpg_site_staff_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  // Hide anything in the hidden fieldgroup.
  $form['#fieldgroups']['group_hidden']->format_type='hidden';
  foreach ($form['#group_children'] as $field => $group) {
    if ($group == 'group_hidden') {
      $form[$field]['#access'] = FALSE;
    }
  }
}

/*
 * Implements hook_node_view().
 */
function rpg_site_staff_node_view($node, $view_mode, $langcode) {
  // If node session report, make sure users can view the reports.
  if ($node->type == 'session_report') {
    global $user;
    // Check if the user has the 'view session notes' permission.
    if (!user_access('view session notes') && !empty($node->content['field_additional_notes'])) {
      unset($node->content['field_additional_notes']);
    }
  }
}

/**
 * Helper function for views.
 */
function _rpg_site_staff_return_title($uid) {
  $output = 'Storyhost';
  $this_user = user_load($uid);
  $this_role = isset($this_user->roles) ? $this_user->roles : array();
  if (!isset($this_role[9])) {
    $output = 'Assistant Storyhost';
  }
  return $output;
}

/**
 * Helper function for views.
 */
function _rpg_site_staff_create_content_count_value($uid, $type = 'session_report') {
  $timeframe = strtotime('1 year ago');
  $results = db_query('SELECT COUNT(n.nid) AS count, n.type ' .
    'FROM {node} n ' .
    'WHERE n.uid = :uid AND n.type = :type AND created > :timeframe',
    array(':uid' => $uid, ':type' => $type, ':timeframe' => $timeframe));
  $value = array();
  foreach ($results as $result) {
    return $result->count;
  }
  return 0;
}

/**
 * Helper function for views.
 */
function _rpg_site_staff_revise_content_count_value($uid, $type = 'session_report') {
  $timeframe = strtotime('1 year ago');
  $results = db_query('SELECT COUNT(r.nid) AS count, n.type ' .
    'FROM {node_revision} r ' .
    'LEFT JOIN {node} n ON n.nid = r.nid ' .
    'WHERE r.uid = :uid AND n.type = :type AND timestamp > :timeframe',
    array(':uid' => $uid, ':type' => $type, ':timeframe' => $timeframe));
  $value = array();
  foreach ($results as $result) {
    return $result->count;
  }
  return 0;
}

/**
 * Helper function for views.
 */
function _rpg_site_staff_eligable_session_count_value($uid) {
  $timeframe = strtotime('1 year ago');
  $results = db_query('SELECT n.nid ' .
    'FROM {node} n ' .
    'WHERE n.uid = :uid AND n.type = \'session_report\' AND created > :timeframe',
    array(':uid' => $uid, ':timeframe' => $timeframe));
  $value = array();
  $count = 0;
  foreach ($results as $result) {
    if (function_exists('sh_test_session_counts')) {
      $session = node_load($result->nid);
      if (sh_test_session_counts($session)) {
        $count++;
      }
    }
  }
  return $count;
}