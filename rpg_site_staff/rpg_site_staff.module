<?php
/**
 * @file
 * Code for the RPG Site Staff feature.
 */

include_once 'rpg_site_staff.features.inc';
include_once 'rpg_site_staff.election.inc';

/**
 * Implements hook_permission().
 */
function rpg_site_staff_permission() {
  return array(
    'view session notes'=> array(
      'title' => t('view session notes'),
      'description' => t('View session notes.'),
    ),
    'can vote on elections'=> array(
      'title' => t('can vote on elections'),
      'description' => t('Vote on elections.'),
    ),
    'administrate staff settings'=> array(
      'title' => t('administrate staff settings'),
      'description' => t('Administrate staff settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function rpg_site_staff_menu() {
  $items['admin/vaxia/rpg_site_staff'] = array(
    'title' => 'RPG Staff settings',
    'description' => 'Settings for staff and player administration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_rpg_site_staff_admin_settings'),
    'access arguments' => array('administrate staff settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function rpg_site_staff_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  // Hide anything in the hidden fieldgroup.
  $form['#fieldgroups']['group_hidden']->format_type='hidden';
  foreach ($form['#group_children'] as $field => $group) {
    if ($group == 'group_hidden') {
      $form[$field]['#access'] = FALSE;
    }
  }
}

/*
 * Implements hook_node_view().
 */
function rpg_site_staff_node_view($node, $view_mode, $langcode) {
  // If node session report, make sure users can view the reports.
  if ($node->type == 'session_report') {
    global $user;
    // Check if the user has the 'view session notes' permission.
    if (!user_access('view session notes') && !empty($node->content['field_additional_notes'])) {
      unset($node->content['field_additional_notes']);
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function rpg_site_staff_node_delete($node) {
  // Delete an election associated with a proposal if we delete the node.
  if ($node->type == 'proposal') {
    _rpg_site_staff_delete_election_by_nid($node->nid);
  }
}

/**
 * Implements hook_node_update().
 */
function rpg_site_staff_node_update($node) {
  // Check a proposal for an election value.
  if ($node->type == 'proposal') {
    _rpg_site_staff_election_check_close($node);
  }
}

/**
 * Implements hook_cron().
 */
function rpg_site_staff_cron() {
  $last_run = variable_get('election_cron', 0);
  $yesterday = strtotime('-1 day');
  if ($last_run < $yesterday) {
    $today = date('m/d/Y');
    $today = strtotime($today . ' 00:00:01'); // We always want to plan to run just after midnight.
    variable_set('election_cron', $today);
    _rpg_site_staff_cron_election();
  }
}

/**
 * Implements hook_cronapi().
 */
function rpg_site_staff_cronapi($op, $job = NULL) {
  $items['_rpg_site_staff_cron_election'] = array(
  	'description' => 'Election: Check election day',
  	'rule' => '1 1 * * *', // Once every day at 1:01 AM.
  );
  return $items;
}

/**
 * Menu callback, admin form.
 */
function _rpg_site_staff_admin_settings($form, &$form_state) {
  _rpg_site_staff_admin_election_settings($form, $form_state);
  // Add any other site staff settings here.
  return system_settings_form($form);
}

/**
 * Helper function for views.
 */
function _rpg_site_staff_return_title($uid) {
  $output = 'Storyhost';
  $this_user = user_load($uid);
  $this_role = isset($this_user->roles) ? $this_user->roles : array();
  if (!isset($this_role[9])) {
    $output = 'Assistant Storyhost';
  }
  return $output;
}

/**
 * Helper function for views.
 */
function _rpg_site_staff_create_content_count_value($uid) {
  $results = db_query('SELECT COUNT(n.nid) AS count, n.type ' .
    'FROM {node} n ' .
    'WHERE n.uid = :uid GROUP BY n.type',
    array(':uid' => $uid));
  $value = array();
  foreach ($results as $result) {
    $value[$result->type] = $result->count;
  }
  return $value;
}

/**
 * Helper function for views.
 */
function _rpg_site_staff_revise_content_count_value($uid) {
  $results = db_query('SELECT COUNT(r.nid) AS count, n.type ' .
    'FROM {node_revision} r ' .
    'LEFT JOIN {node} n ON n.nid = r.nid ' .
    'WHERE r.uid = :uid GROUP BY n.type',
    array(':uid' => $uid));
  $value = array();
  foreach ($results as $result) {
    $value[$result->type] = $result->count;
  }
  return $value;
}

/**
 * Helper function for views.
 */
function _rpg_site_staff_content_count_display($value) {
  $output = '<ul>';
  foreach ($value as $type => $count) {
    if (in_array($type, array('wiki_page', 'session_report', ) )) {
        $output .= '<li>'. $type . ' : ' . $count . '</li>';
    }
  }
  $output .= '</ul>';
  return $output;
}
