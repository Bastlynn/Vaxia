<?php
/**
 * @file
 * Drupal needs this blank file.
 */


/**
 * Helper function for views.
 */
function _storyhost_duties_create_content_count_value($uid, $type = 'session_report') {
  $timeframe = strtotime('1 year ago');
  $results = db_query('SELECT COUNT(n.nid) AS count, n.type ' .
    'FROM {node} n ' .
    'WHERE n.uid = :uid AND n.type = :type AND created > :timeframe',
    array(':uid' => $uid, ':type' => $type, ':timeframe' => $timeframe));
  foreach ($results as $result) {
    return $result->count;
  }
  return 0;
}

/**
 * Helper function for views.
 */
function _storyhost_duties_revise_content_count_value($uid, $type = 'session_report') {
  $timeframe = strtotime('1 year ago');
  $results = db_query('SELECT COUNT(r.nid) AS count, n.type ' .
    'FROM {node_revision} r ' .
    'LEFT JOIN {node} n ON n.nid = r.nid ' .
    'WHERE r.uid = :uid AND n.type = :type AND timestamp > :timeframe',
    array(':uid' => $uid, ':type' => $type, ':timeframe' => $timeframe));
  foreach ($results as $result) {
    return $result->count;
  }
  return 0;
}


/**
 * Helper function for views.
 */
function _storyhost_duties_create_content_count_value($uid, $type = 'session_report') {
  $timeframe = strtotime('1 year ago');
  $results = db_query('SELECT COUNT(n.nid) AS count, n.type ' .
    'FROM {node} n ' .
    'WHERE n.uid = :uid AND n.type = :type AND created > :timeframe',
    array(':uid' => $uid, ':type' => $type, ':timeframe' => $timeframe));
  foreach ($results as $result) {
    return $result->count;
  }
  return 0;
}

/**
 * Helper function for views.
 */
function _storyhost_duties_revise_content_count_value($uid, $type = 'session_report') {
  $timeframe = strtotime('1 year ago');
  $results = db_query('SELECT COUNT(r.nid) AS count, n.type ' .
    'FROM {node_revision} r ' .
    'LEFT JOIN {node} n ON n.nid = r.nid ' .
    'WHERE r.uid = :uid AND n.type = :type AND timestamp > :timeframe',
    array(':uid' => $uid, ':type' => $type, ':timeframe' => $timeframe));
  foreach ($results as $result) {
    return $result->count;
  }
  return 0;
}

/**
 * Helper function for views.
 */
function _storyhost_duties_eligable_session_count_value($uid) {
  $timeframe = strtotime('1 year ago');
  $results = db_query('SELECT n.nid ' .
    'FROM {node} n ' .
    'WHERE n.uid = :uid AND n.type = \'session_report\' AND created > :timeframe',
    array(':uid' => $uid, ':timeframe' => $timeframe));
  $count = 0;
  foreach ($results as $result) {
    if (function_exists('sh_test_session_counts')) {
      $session = node_load($result->nid);
      if (sh_test_session_counts($session)) {
        $count++;
      }
    }
  }
  return $count;
}

/**
 * Helper function for views.
 */
function _storyhost_duties_prompt_eval_char_count_value($uid) {
  $timeframe = strtotime('1 year ago');
  $results = db_query('SELECT COUNT(n.nid) AS count ' .
    'FROM {node} n ' .
    'LEFT JOIN {field_data_field_is_npc} npc ON npc.entity_id = n.nid ' .
    'LEFT JOIN {field_data_field_is_open_npc} onpc ON onpc.entity_id = n.nid ' .
    'LEFT JOIN {field_data_field_is_storyteller} st ON st.entity_id = n.nid ' .
    'LEFT JOIN {workflow_node_history} w ON w.nid = n.nid ' .
    'LEFT JOIN {workflow_states} s ON s.sid = w.sid ' .
    'WHERE w.uid = :uid AND n.type = \'character_sheet\' AND n.created > :timeframe AND n.uid != w.uid ' .
    'AND npc.field_is_npc_value = 0 ' .
    'AND onpc.field_is_open_npc_value = 0 ' .
    'AND st.field_is_storyteller_value = 0 ' .
    'AND w.old_sid != w.sid AND s.state = \'approved\' ' .
    'AND w.stamp <= DATE_ADD(FROM_UNIXTIME(n.created), INTERVAL +3 DAY)',
    array(':uid' => $uid, ':timeframe' => $timeframe));
  foreach ($results as $result) {
    return $result->count;
  }
  return 0;
}

/**
 * Helper function for views.
 */
function _storyhost_duties_prompt_eval_item_count_value($uid) {
  $timeframe = strtotime('1 year ago');
  $results = db_query('SELECT COUNT(n.nid) AS count ' .
    'FROM {node} n ' .
    'LEFT JOIN {workflow_node_history} w ON w.nid = n.nid ' .
    'LEFT JOIN {workflow_states} s ON s.sid = w.sid ' .
    'WHERE w.uid = :uid AND n.type = \'items\' AND n.created > :timeframe AND n.uid != w.uid ' .
    'AND w.old_sid != w.sid AND s.state = \'approved\' ' .
    'AND w.stamp <= DATE_ADD(FROM_UNIXTIME(n.created), INTERVAL +3 DAY)',
    array(':uid' => $uid, ':timeframe' => $timeframe));
  foreach ($results as $result) {
    return $result->count;
  }
  return 0;
}

/**
 * Helper function for views.
 */
function _storyhost_duties_comments_in_sh_forums_count_value($uid) {
  $timeframe = strtotime('1 year ago');
  $results = db_query('SELECT COUNT(c.cid) AS count ' .
    'FROM {comment} c ' .
    'LEFT JOIN {node} n ON n.nid = c.nid ' .
    'LEFT JOIN {taxonomy_index} t ON t.nid = n.nid ' .
    'WHERE t.tid IN (:terms) AND c.uid = :uid AND c.created > :timeframe',
    array(':terms' => array(10, 11), ':uid' => $uid, ':timeframe' => $timeframe));
    // Taxonomy (should be configured - do that later).
    // 10, 11 are SH request forums
  foreach ($results as $result) {
    return $result->count;
  }
  return 0;
}

/**
 * Helper function for views.
 */
function _storyhost_duties_oldest_unread_pm_count_value($uid) {
  $results = db_query('SELECT COUNT(DISTINCT pm.thread_id) AS count ' .
    'FROM {pm_index} pm ' .
    'LEFT JOIN {pm_message} m ON m.mid = pm.mid ' .
    'WHERE pm.is_new = 1 AND m.author != pm.recipient ' .
    'AND pm.recipient = :uid',
    array(':uid' => $uid));
  foreach ($results as $result) {
    return $result->count;
  }
  return 0;
}

/**
 * Helper function for views.
 */
function _storyhost_duties_oldest_unread_pm_date_value($uid) {
  $results = db_query('SELECT MIN(m.timestamp) AS oldest ' .
    'FROM {pm_index} pm ' .
    'LEFT JOIN {pm_message} m ON m.mid = pm.mid ' .
    'WHERE pm.is_new = 1 AND m.author != pm.recipient ' .
    'AND pm.recipient = :uid ' .
    'GROUP BY pm.thread_id',
    array(':uid' => $uid));
  foreach ($results as $result) {
    return format_date($result->oldest);
  }
  return t('all read');
}
