<?php
/**
 * @file
 * Code for the Vaxia NPCs feature.
 */

include_once 'items.features.inc';

/**
 * Implements hook_permission().
 */
function items_permission() {
  return array(
    'change item owner' => array(
      'title' => t('change item owner'),
      'description' => t('Change the owner of an item.'),
    ),
    'edit playable item' => array(
      'title' => t('edit playable item'),
      'description' => t('Edit an item in play.'),
    ),
    'administer item settings' => array(
      'title' => t('administer item settings'),
      'description' => t('Administer item settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function items_menu() {
  $items['admin/vaxia/items'] = array(
    'title' => 'Item settings',
    'description' => 'Configure item types',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_items_admin_settings'),
    'access arguments' => array('administer item settings'),
  );
  return $items;
}

/*
 * Implements hook_node_view().
 */
function items_node_view($node, $view_mode, $langcode) {
  // If node is a character sheet.
  if (_character_sheet_is_enabled($node)) {
    // Hide items that aren't approved yet.
    $lang = $node->language;
    if (!empty($node->field_items[$lang])) {
      foreach ($node->field_items[$lang] as $index => $this_item) {
        $this_item = isset($this_item['node']) ? ($this_item['node']) : '';
        if (!isset($this_item->workflow_state_name) || !_items_is_playable($this_item)) {
          // Remove this item from display.
          unset($node->content['field_items']['#items'][$index]);
        }
      }
    }
  } // End character sheet view.
}

/**
 * Implements hook_node_presave().
 */
function items_node_presave($node) {
  if ($node->type != 'items') {
    return;
  }
  $lang = isset($node->language) ? $node->language : 'und';
  $field_calc_value = isset($node->field_calc_value[$lang][0]['value']) ? $node->field_calc_value[$lang][0]['value'] : FALSE;
  $recalc_value = variable_get('items_recalculate_values', FALSE);
  if ($recalc_value || $field_calc_value) {
    // And figure out the true item value.
    // Set the currently declared value.
    $curr_value = isset($node->field_value[$lang][0]['value']) ? $node->field_value[$lang][0]['value'] : 0;
    // Get the value.
    $real_value = _items_get_item_value($node);
    // Set the value.
    $node->field_value[$lang][0]['value'] = $real_value;
    $node->field_declared_value[$lang][0]['value'] = (is_numeric($curr_value) && ($curr_value > 0))
      ? $curr_value : $real_value;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function items_form_workflow_tab_form_alter(&$form, &$form_state, $form_id) {
  // Disable character owners in addition to node owners for approving.
  // You need a THIRD PARTY.
  if (!empty($node) && !empty($node->type) && $node->type == 'items') {
    $lang = $node->language;
    $character_owner = isset($node->field_character_owner[$lang][0]['nid'])
      ? node_load($node->field_character_owner[$lang][0]['nid']) : FALSE;
    if ($character_owner && !empty($form['#wf']->name) && !empty($node) && $user->uid == $character_owner->uid) {
      $workflow_name = $form['#wf']->name;
      $options = $form['workflow'][$workflow_name]['#options'];
      $index = array_search('approved', $options);
      if ($index !== FALSE && $index != $node->workflow) {
        drupal_set_message(t('You own the character that owns this item, you cannot set it to approved. ' .
          'Currently: ' . $node->workflow_state_name));
        unset($options[$index]);
        unset($form['workflow'][$workflow_name][$index]);
        $form['workflow'][$workflow_name]['#options'] = $options;
        $form['workflow'][$workflow_name]['#default_value'] = $node->workflow;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function items_form_items_node_form_alter(&$form, &$form_state, $form_id) {
  // Display message and disable form if item already approved.
  $node = isset($form['#node']) ? $form['#node'] : '';
  if (!user_access('edit playable item') && empty($node->clone_from_original_nid) && _items_is_playable($node)) {
    $allowed_edit = array('field_item_desc', 'field_item_history', 'field_character_owner',
      'field_sh_notes', 'field_sh_private_notes', 'field_player_notes', 'field_creation_history');
    foreach (element_children($form) as $child) {
      if ((strpos($child, 'field_') === 0 || $child == 'title') && !in_array($child, $allowed_edit)) {
        $form[$child]['#disabled'] = TRUE;
      }
    }
    // Display value of item.
    _items_get_item_value($node);
    // Display alert.
    drupal_set_message('You are attempting to edit an Item that has already been approved for play. Item numbers cannot be further edited ' .
      'after approval. Please revert this Item to draft, and take it through the approval process again if you need to update numbers.');
  }
  // Disable workflow form in afterbuild if item is owned by player.
  $form['#after_build'][] = '_items_node_form_workflow_after_build';
}

/**
 * Menu callback.
 */
function _items_admin_settings($form, &$form_state) {
  // Make sure we have the vaxia helper file included.
  module_load_include('inc', 'vaxia', 'helper');
  // Get all workflows ready for form output
  $workflow_options = _vaxia_get_workflow_options();
  // Set the state.
  $form['items_approved_workflow'] = array(
    '#title' => 'Item approved',
    '#description' => 'Workflow state for approved items.',
    '#type' => 'select',
    '#options' => $workflow_options,
    '#default_value' => variable_get('items_approved_workflow', ''),
  );
  $form['items_primary_value'] = array(
    '#title' => t('Value modifier for primary stats'),
    '#type' => 'textfield',
    '#default_value' => variable_get('items_primary_value', 1),
  );
  $form['items_secondary_value'] = array(
    '#title' => t('Value modifier for secondary stats'),
    '#type' => 'textfield',
    '#default_value' => variable_get('items_secondary_value', 1.5),
  );
  $form['items_skills_value'] = array(
    '#title' => t('Value modifier for skills'),
    '#type' => 'textfield',
    '#default_value' => variable_get('items_skills_value', 0.75),
  );
  $form['items_bonus_value'] = array(
    '#title' => t('Silver value per bonus'),
    '#type' => 'textfield',
    '#default_value' => variable_get('items_bonus_value', 50),
  );
  $form['items_overlap_value'] = array(
    '#title' => t('Silver value per overlap'),
    '#type' => 'textfield',
    '#default_value' => variable_get('items_overlap_value', 2),
  );
  $form['items_recalculate_values'] = array(
    '#title' => t('Recalculate value on save'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('items_recalculate_values', FALSE),
  );
  return system_settings_form($form);
}

/**
 * Helper function for item existing.
 */
function _items_is_playable($item) {
  if (isset($item->workflow)
    && (isset($item->workflow_state_name) && $item->workflow_state_name == t('approved')) ) {
    return TRUE;
  }
  return FALSE;
}

function _items_owned_by_user($item, $user) {
}

/**
 * Implements form after build.
 */
function _items_node_form_workflow_after_build($form, $form_state) {
  global $user;
  $node = isset($form['#node']) ? $form['#node'] : '';
  // You own the item.
  if (!empty($form['#wf']->name) && !empty($node) && $user->uid == $node->uid && $node->type == 'items') {
    $workflow_name = $form['#wf']->name;
    $options = $form['workflow'][$workflow_name]['#options'];
    $index = array_search('approved', $options);
    if ($index !== FALSE && $index != $node->workflow) {
      drupal_set_message(t('You own this item, you cannot set it to approved. Currently: ' . $node->workflow_state_name));
      unset($options[$index]);
      unset($form['workflow'][$workflow_name][$index]);
      $form['workflow'][$workflow_name]['#options'] = $options;
      $form['workflow'][$workflow_name]['#default_value'] = $node->workflow;
    }
  }
  // You own the character that owns the item.
  if ($node->type == 'items') {
    $lang = $node->language;
    $character_owner = isset($node->field_character_owner[$lang][0]['nid'])
      ? node_load($node->field_character_owner[$lang][0]['nid']) : FALSE;
    if ($character_owner && !empty($form['#wf']->name) && !empty($node) && $user->uid == $character_owner->uid) {
      $workflow_name = $form['#wf']->name;
      $options = $form['workflow'][$workflow_name]['#options'];
      $index = array_search('approved', $options);
      if ($index !== FALSE && $index != $node->workflow) {
        drupal_set_message(t('You own the character that owns this item, you cannot set it to approved. ' .
          'Currently: ' . $node->workflow_state_name));
        unset($options[$index]);
        unset($form['workflow'][$workflow_name][$index]);
        $form['workflow'][$workflow_name]['#options'] = $options;
        $form['workflow'][$workflow_name]['#default_value'] = $node->workflow;
      }
    }
  }
  return $form;
}

/**
 * Helper function, figure out the value of an item.
 */
function _items_get_item_value($node) {
  $lang = isset($node->language) ? $node->language : 'und';
  $real_value = 0;
  // Price the benefits for items stats.
  $stats = _items_item_stats('primary');
  $second_stats = _items_item_stats('secondary');
  // Get the benefits and penalties for item mods.
  $primary = _items_value_stat_bonus($node, $stats);
  $secondary = _items_value_stat_bonus($node, $second_stats);
  $skill = _items_value_stat_bonus($node, array('skill'));
  $items_primary_value = variable_get('items_primary_value', 1);
  $items_secondary_value = variable_get('items_secondary_value', 1.5);
  $items_skills_value = variable_get('items_skills_value', 0.75);
  $bonus = ($primary * $items_primary_value) + ($secondary * $items_secondary_value) + ($skill * $items_skills_value);
  $bonus_value = 0;
  if ($bonus > 0) {
    $bonus_value = variable_get('items_bonus_value', 50);
    $double = floor(($bonus - 1 ) / 5);
    for ($i=0; $i<$double; $i++) {
      $bonus_value = $bonus_value * 2; // 50, 100, 200, 400 etc.
    }
    $bonus_value = $bonus * $bonus_value; // And for each point.
    drupal_set_message(t('Value of stat modifiers for %title calculated at @bonus_value silver.',
      array('%title' => $node->title, '@bonus_value' => $bonus_value)));
  }
  // Figure out what the overlap stats bonuses are for the stats.
  $primary = _items_value_stat_overlap($node, $stats);
  $secondary = _items_value_stat_overlap($node, $second_stats);
  $skill = _items_value_stat_overlap($node, array('skill'));
  $overlap = ($primary) + ($secondary) + ($skill);
  $overlap_value = 0;
  if ($overlap > 0) {
    $overlap_silver_value = variable_get('items_overlap_value', 2);
    $overlap_value = $overlap * $overlap_silver_value; // Each overlap is 2 silver.
    drupal_set_message(t('Value of overlapping stats for %title calculated at @overlap_value silver.',
      array('%title' => $node->title, '@overlap_value' => $overlap_value)));
  }
  // Calculate the value for the PP casting items - at base difficulty.
  $pp_value = 0;
  $pp = isset($node->field_pp_created[$lang][0]['value']) ? $node->field_pp_created[$lang][0]['value'] : 0;
  if ($pp > 0) {
    $uses = isset($node->field_item_use_day[$lang][0]['value']) ? $node->field_item_use_day[$lang][0]['value'] : 'at_will';
    $charges = isset($node->field_item_uses[$lang][0]['value']) ? $node->field_item_uses[$lang][0]['value'] : 1;
    // Values per.
    switch ($uses) {
      case 'once':
        $use_val = variable_get('items_once_value', 5);
        break;
      case 'per_day':
        $use_val = variable_get('items_daily_value', 250);
        break;
      case 'at_will':
      default;
        $use_val = variable_get('items_at_will_value', 750);
        break;
    }
    // Account for difficulty, for example an invisiblty potion at diff 25 vs one at diff 35...
    $base_diff = variable_get('items_at_will_value', 25);
    $item_diff = isset($node->field_item_difficulty[$lang][0]['value']) ? $node->field_item_difficulty[$lang][0]['value'] : 25;
    // Can't go below the base for an item, no underpowered item.
    if ($item_diff < $base_diff) {
      $item_diff = $base_diff;
    }
    $diff = $item_diff / $base_diff;
    $pp_value = ($pp * $use_val * $diff) * $charges; // Charge for use per day or individual one-shot item.
    drupal_set_message(t('Value of PP base effect for %title calculated at @pp_value silver.',
      array('%title' => $node->title, '@pp_value' => $pp_value)));
  }
  // Calculate the value for armor types.
  $def_value = 0;
  $absorbs = isset($node->field_armor_absorbs[$lang][0]['value']) ? $node->field_armor_absorbs[$lang][0]['value'] : 0;
  if ($absorbs > 0) {
    $abs_type = isset($node->field_absorb_type[$lang][0]['value']) ? $node->field_absorb_type[$lang][0]['value'] : 'armor';
    switch ($abs_type) {
      case 'shield':
        $abs_val = variable_get('items_shield_value', 25);
        break;
      case 'armor':
      default;
        $abs_val = variable_get('items_absorb_value', 50);
        break;
    }
    $def_value = $absorbs * $abs_val; // Figure out value by type.
    drupal_set_message(t('Value of defense for %title calculated at @def_value silver.',
      array('%title' => $node->title, '@def_value' => $def_value)));
  }
  // Calculate the value for armor types.
  $comp_value = 0;
  $build_pts = isset($node->field_build_points[$lang][0]['value']) ? $node->field_build_points[$lang][0]['value'] : 0;
  if ($build_pts > 0) {
    $comp_value = $build_pts * variable_get('items_companion_value', 2); // Figure out value by build pts.
    drupal_set_message(t('Value of companion build points for %title calculated at @comp_value silver.',
      array('%title' => $node->title, '@comp_value' => $comp_value)));
  }
  // Set the final values.
  $real_value = $bonus_value + $overlap_value + $pp_value + $def_value + $comp_value;
  drupal_set_message(t('Overall value of %title calculated at @real_value silver.',
    array('%title' => $node->title, '@real_value' => $real_value)));
  return $real_value;
}

/**
 * Helper function, get the true value of an item.
 */
function _items_value_stat_bonus($node, $stats) {
  $bonus = 0;
  $lang = $node->language;
  foreach ($stats as $stat) {
    $field = 'field_item_' . $stat;
    $field_ben = isset($node->{$field}[$lang][0]['value']) ? $node->{$field}[$lang][0]['value'] : 0;
    // Penalties will be negative, so add.
    $bonus = $bonus + $field_ben;
  }
  return $bonus;
}

/**
 * Helper function, get the true value of an item.
 */
function _items_value_stat_overlap($node, $stats) {
  $bonus = 0;
  $lang = $node->language;
  foreach ($stats as $stat) {
    $field = 'field_item_over_' . $stat;
    $field_ben = isset($node->{$field}[$lang][0]['value']) ? $node->{$field}[$lang][0]['value'] : 0;
    // Penalties will be negative, so add.
    $bonus = $bonus + $field_ben;
  }
  return $bonus;
}

/**
 * Helper for rules. Check if the item is over limits.
 */
function items_check_needs_oversight($node) {
  $limit = 7;
  $return_value = FALSE;
  $lang = $node->language;
  // Check each stat.
  $fields = _items_item_stats();
  foreach ($fields as $field_name) {
    // Check mod.
    $field_name = 'field_item_' . $field_name;
    $stat = isset($node->{$field_name}[$lang][0]['value']) ?
    $node->{$field_name}[$lang][0]['value'] : 0;
    if ($stat >= $limit) {
      $return_value = TRUE;
    }
    // Check percentage.
    $field_name = 'field_item_perc_' . $field_name;
    $stat = isset($node->{$field_name}[$lang][0]['value']) ?
    $node->{$field_name}[$lang][0]['value'] : 0;
    if ($stat >= $limit) {
      $return_value = TRUE;
    }
  }
  return $return_value;
}

/**
 * Helper function.
 */
function _items_item_stats($mode = 'all') {
  // Return by mode.
  if ($mode == 'primary') {
    return array('life', 'endurance', 'strength', 'dexterity', 'intelligence', 'spirituality', 'charisma');
  }
  if ($mode == 'secondary') {
    return array('health', 'constitution', 'agility', 'reflexes', 'awareness', 'presence', 'appearance');
  }
  // Else, return all.
  return  array('life', 'health', 'endurance', 'constitution', 'strength', 'agility', 'dexterity',
      'reflexes', 'intelligence', 'awareness', 'spirituality', 'presence', 'charisma', 'appearance', 'skill',
    );
}
