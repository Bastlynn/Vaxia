<?php
/**
 * @file
 * Code for the Vaxia NPCs feature.
 */

include_once 'items.features.inc';

/**
 * Implements hook_permission().
 */
function items_permission() {
  return array(
    'change item owner'=> array(
      'title' => t('change item owner'),
      'description' => t('Change the owner of an item.'),
    ),
    'administer item settings' => array(
      'title' => t('administer item settings'),
      'description' => t('Administer item settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function items_menu() {
  $items['admin/vaxia/items'] = array(
    'title' => 'Item settings',
    'description' => 'Configure item types',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_items_admin_settings'),
    'access arguments' => array('administer item settings'),
  );
  return $items;
}

/*
 * Implements hook_node_view().
 */
function items_node_view($node, $view_mode, $langcode) {
  // If node is a character sheet.
  if (_character_sheet_is_enabled($node)) {
    // Hide items that aren't approved yet.
    $lang = $node->language;
    if (!empty($node->field_items[$lang])) {
      foreach ($node->field_items[$lang] as $index => $this_item) {
        $this_item = isset($this_item['node']) ? ($this_item['node']) : '';
        if (!isset($this_item->workflow_state_name) || $this_item->workflow_state_name != t('approved')) {
          // Remove this item from display.
          unset($node->content['field_items']['#items'][$index]);
        }
      }
    }
  } // End character sheet view.
}

/**
 * Implements hook_node_presave().
 */
function items_node_presave($node) {
  if ($node->type != 'items') {
    return;
  }
  $recalc_value = variable_get('items_recalculate_values', FALSE);
  if ($recalc_value) {
    // And figure out the true item value.
    $lang = isset($node->language) ? $node->language : 'und';
    // Set the currently declared value.
    $curr_value = isset($node->field_value[$lang][0]['value']) ? $node->field_value[$lang][0]['value'] : 0;
    // Get the value.
    $real_value = _items_get_item_value($node);
    // Set the value.
    $node->field_value[$lang][0]['value'] = $real_value;
    $node->field_declared_value[$lang][0]['value'] = (is_numeric($curr_value) && ($curr_value > 0))
      ? $curr_value : $real_value;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function items_form_workflow_tab_form_alter(&$form, &$form_state, $form_id) {
  // Disable character owners in addition to node owners for approving.
  // You need a THIRD PARTY.
  if (!empty($node) && !empty($node->type) && $node->type == 'items') {
    $lang = $node->language;
    $character_owner = isset($node->field_character_owner[$lang][0]['nid'])
      ? node_load($node->field_character_owner[$lang][0]['nid']) : FALSE;
    if ($character_owner && !empty($form['#wf']->name) && !empty($node) && $user->uid == $character_owner->uid) {
      $workflow_name = $form['#wf']->name;
      $options = $form['workflow'][$workflow_name]['#options'];
      $index = array_search('approved', $options);
      if ($index !== FALSE && $index != $node->workflow) {
        drupal_set_message(t('You own the character that owns this item, you cannot set it to approved. ' .
          'Currently: ' . $node->workflow_state_name));
        unset($options[$index]);
        unset($form['workflow'][$workflow_name][$index]);
        $form['workflow'][$workflow_name]['#options'] = $options;
        $form['workflow'][$workflow_name]['#default_value'] = $node->workflow;
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function items_form_items_node_form_alter(&$form, &$form_state, $form_id) {
  // Display message and disable form if item already approved.
  $node = isset($form['#node']) ? $form['#node'] : '';
  if (empty($node->clone_from_original_nid) && isset($node->workflow) && $node->workflow == 4) {
    $allowed_edit = array('field_item_desc', 'field_item_history', 'field_character_owner',
      'field_sh_notes', 'field_sh_private_notes', 'field_player_notes', 'field_creation_history');
    foreach (element_children($form) as $child) {
      if ((strpos($child, 'field_') === 0 || $child == 'title') && !in_array($child, $allowed_edit)) {
        $form[$child]['#disabled'] = TRUE;
      }
    }
    // Display value of item.
    _items_get_item_value($node);
    // Display alert.
    drupal_set_message('You are attempting to edit an Item that has already been approved for play. Item numbers cannot be further edited ' .
      'after approval. Please revert this Item to draft, and take it through the approval process again if you need to update numbers.');
  }
  // Disable workflow form in afterbuild if item is owned by player.
  $form['#after_build'][] = '_items_node_form_workflow_after_build';
}

/**
 * Menu callback.
 */
function _items_admin_settings($form, &$form_state) {
  $workflow_options = _items_get_workflow_options();
  $form['items_approved_workflow'] = array(
    '#title' => 'Item approved',
    '#description' => 'Workflow state for approved items.',
    '#type' => 'select',
    '#options' => $workflow_options,
    '#default_value' => variable_get('items_approved_workflow', ''),
  );
  $form['items_recalculate_values'] = array(
    '#title' => t('Recalculate value on save'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('items_recalculate_values', FALSE),
  );
  return system_settings_form($form);
}

/**
 * Implements form after build.
 */
function _items_node_form_workflow_after_build($form, $form_state) {
  global $user;
  $node = isset($form['#node']) ? $form['#node'] : '';
  // You own the item.
  if (!empty($form['#wf']->name) && !empty($node) && $user->uid == $node->uid && $node->type == 'items') {
    $workflow_name = $form['#wf']->name;
    $options = $form['workflow'][$workflow_name]['#options'];
    $index = array_search('approved', $options);
    if ($index !== FALSE && $index != $node->workflow) {
      drupal_set_message(t('You own this item, you cannot set it to approved. Currently: ' . $node->workflow_state_name));
      unset($options[$index]);
      unset($form['workflow'][$workflow_name][$index]);
      $form['workflow'][$workflow_name]['#options'] = $options;
      $form['workflow'][$workflow_name]['#default_value'] = $node->workflow;
    }
  }
  // You own the character that owns the item.
  if ($node->type == 'items') {
    $lang = $node->language;
    $character_owner = isset($node->field_character_owner[$lang][0]['nid'])
      ? node_load($node->field_character_owner[$lang][0]['nid']) : FALSE;
    if ($character_owner && !empty($form['#wf']->name) && !empty($node) && $user->uid == $character_owner->uid) {
      $workflow_name = $form['#wf']->name;
      $options = $form['workflow'][$workflow_name]['#options'];
      $index = array_search('approved', $options);
      if ($index !== FALSE && $index != $node->workflow) {
        drupal_set_message(t('You own the character that owns this item, you cannot set it to approved. ' .
          'Currently: ' . $node->workflow_state_name));
        unset($options[$index]);
        unset($form['workflow'][$workflow_name][$index]);
        $form['workflow'][$workflow_name]['#options'] = $options;
        $form['workflow'][$workflow_name]['#default_value'] = $node->workflow;
      }
    }
  }
  return $form;
}

/**
 * Helper function, figure out the value of an item.
 */
function _items_get_item_value($node) {
  $lang = isset($node->language) ? $node->language : 'und';
  $real_value = 0;
  // Per stats.
  $stats = _items_item_stats('primary');
  $second_stats = _items_item_stats('secondary');
  // Get the benefits and penalties for item mods.
  $primary = _items_value_stat_bonus($node, $stats);
  $secondary = _items_value_stat_bonus($node, $second_stats);
  $skill = _items_value_stat_bonus($node, array('skill'));
  $bonus = ($primary) + ($secondary * 1.5) + ($skill * 0.75);
  // Now we have the values of modifiers up and down for stat bonuses and skill bonuses.
  $bonus_value = 0;
  if ($bonus > 0) {
    $bonus_value = 50;
    $double = floor(($bonus - 1 ) / 5);
    for ($i=0; $i<$double; $i++) {
      $bonus_value = $bonus_value * 2; // 50, 100, 200, 400 etc.
    }
    $bonus_value = $bonus * $bonus_value; // And for each point.
    drupal_set_message(t('Value of bonuses for %title calculated at @bonus_value silver.',
      array('%title' => $node->title, '@bonus_value' => $bonus_value)));
  }
  // Get the overlap bonuses.
  $primary = _items_value_stat_overlap($node, $stats);
  $secondary = _items_value_stat_overlap($node, $second_stats);
  $skill = _items_value_stat_overlap($node, array('skill'));
  $overlap = ($primary) + ($secondary) + ($skill);
  // Now we have the values of modifiers up and down for stat bonuses and skill overlaps.
  $overlap_value = 0;
  if ($overlap > 0) {
    $overlap_value = $overlap * 2; // Each overlap is 2 silver.
    drupal_set_message(t('Value of overlapping bonuses for %title calculated at @overlap_value silver.',
      array('%title' => $node->title, '@overlap_value' => $overlap_value)));
  }
  // Now to figure out the PP value.
  $pp_value = 0;
  $pp = isset($node->field_pp_created[$lang][0]['value']) ? $node->field_pp_created[$lang][0]['value'] : 0;
  if ($pp > 0) {
    $uses = isset($node->field_item_use_day[$lang][0]['value']) ? $node->field_item_use_day[$lang][0]['value'] : 'at_will';
    $charges = isset($node->field_item_uses[$lang][0]['value']) ? $node->field_item_uses[$lang][0]['value'] : 1;
    $use_val = 750;
    switch ($uses) {
      case 'once':
        $use_val = 5;
        break;
      case 'per_day':
        $use_val = 250;
        break;
      case 'at_will':
      default;
        $use_val = 750;
        break;
    }
    $pp_value = ($pp * $use_val) * $charges; // Charge for use per day or individual one-shot item.
    drupal_set_message(t('Value of PP effect for %title calculated at @pp_value silver.',
      array('%title' => $node->title, '@pp_value' => $pp_value)));
  }
  // Set the final values.
  $real_value = $bonus_value + $overlap_value + $pp_value;
  drupal_set_message(t('Overall value of %title calculated at @real_value silver.',
    array('%title' => $node->title, '@real_value' => $real_value)));
  return $real_value;
}

/**
 * Helper function, get the true value of an item.
 */
function _items_value_stat_bonus($node, $stats) {
  $bonus = 0;
  $lang = $node->language;
  foreach ($stats as $stat) {
    $field = 'field_item_' . $stat;
    $field_ben = isset($node->{$field}[$lang][0]['value']) ? $node->{$field}[$lang][0]['value'] : 0;
    // Penalties will be negative, so add.
    $bonus = $bonus + $field_ben;
  }
  return $bonus;
}

/**
 * Helper function, get the true value of an item.
 */
function _items_value_stat_overlap($node, $stats) {
  $bonus = 0;
  $lang = $node->language;
  foreach ($stats as $stat) {
    $field = 'field_item_over_' . $stat;
    $field_ben = isset($node->{$field}[$lang][0]['value']) ? $node->{$field}[$lang][0]['value'] : 0;
    // Penalties will be negative, so add.
    $bonus = $bonus + $field_ben;
  }
  return $bonus;
}

/**
 * Helper for rules. Check if the item is over limits.
 */
function items_check_needs_oversight($node) {
  $limit = 7;
  $return_value = FALSE;
  $lang = $node->language;
  // Check each stat.
  $fields = _items_item_stats();
  foreach ($fields as $field_name) {
    // Check mod.
    $field_name = 'field_item_' . $field_name;
    $stat = isset($node->{$field_name}[$lang][0]['value']) ?
    $node->{$field_name}[$lang][0]['value'] : 0;
    if ($stat >= $limit) {
      $return_value = TRUE;
    }
    // Check percentage.
    $field_name = 'field_item_perc_' . $field_name;
    $stat = isset($node->{$field_name}[$lang][0]['value']) ?
    $node->{$field_name}[$lang][0]['value'] : 0;
    if ($stat >= $limit) {
      $return_value = TRUE;
    }
  }
  return $return_value;
}

/**
 * Helper function.
 */
function _items_item_stats($mode = 'all') {
  // Return by mode.
  if ($mode == 'primary') {
    return array('life', 'endurance', 'strength', 'dexterity', 'intelligence', 'spirituality', 'charisma');
  }
  if ($mode == 'secondary') {
    return array('health', 'constitution', 'agility', 'field_item_reflexes', 'awareness', 'presence', 'appearance');
  }
  // Else, return all.
  return  array('life', 'health', 'endurance', 'constitution', 'strength', 'agility', 'dexterity',
      'reflexes', 'intelligence', 'awareness', 'spirituality', 'presence', 'charisma', 'appearance', 'skill',
    );
}

/**
 * Helper function.
 */
function _items_once_a_day_cron($cron, $time = '01:00:00') {
  // Make sure we have the vaxia helper file included.
  module_load_include('inc', 'vaxia', 'helper');
  // Get all workflows ready for form output
  return _vaxia_once_a_day_cron($cron, $time);
}

/**
 * Helper function.
 */
function _items_get_workflow_options() {
  // Make sure we have the vaxia helper file included.
  module_load_include('inc', 'vaxia', 'helper');
  // Get all workflows ready for form output
  return _vaxia_get_workflow_options();
}

/**
 * Helper function.
 */
function _items_get_field_value($node, $field, $default = '') {
  // Make sure we have the vaxia helper file included.
  module_load_include('inc', 'vaxia', 'helper');
  // Get all item nids in workflows.
  return _vaxia_get_field_value($node, $field, $default);
}

/**
 * Helper function.
 */
function _items_get_field_node($node, $field, $default = '') {
  // Make sure we have the vaxia helper file included.
  module_load_include('inc', 'vaxia', 'helper');
  // Get all item nids in workflows.
  return _vaxia_get_field_node($node, $field, $default);
}

/**
 * Helper function.
 */
function _items_set_field_value($node, $field, $value = '') {
  // Make sure we have the vaxia helper file included.
  module_load_include('inc', 'vaxia', 'helper');
  // Get all item nids in workflows.
  return _vaxia_set_field_value($node, $field, $value);
}

/**
 * Helper function.
 */
function _items_get_in_workflows($workflows = array()) {
  // Make sure we have the vaxia helper file included.
  module_load_include('inc', 'vaxia', 'helper');
  // Get all item nids in workflows.
  return _vaxia_get_in_workflows('items', $workflows);
}

/**
 * Helper function.
 */
function _items_check_workflow_in($node, $workflows = array()) {
  // Make sure we have the vaxia helper file included.
  module_load_include('inc', 'vaxia', 'helper');
  // Check the workflow.
  return _vaxia_check_workflow_in($node, $workflows);
}
