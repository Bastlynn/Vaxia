<?php
/**
 * @file
 * Code for the Item usesÆ’ feature.
 */

/**
 * Implements hook_permission().
 */
function item_uses_permission() {
  return array(
    'use items indefinately' => array(
      'title' => t('use items indefinately'),
      'description' => t('Use items indefinately.'),
    ),
    'administer item uses' => array(
      'title' => t('administer item uses'),
      'description' => t('Administer item uses.'),
    ),
  );
}

/**
 * Implements hook_cron();
 */
function item_uses_cron() {
  if (_items_once_a_day_cron('item_uses_daily_recharge', '01:00:00')) {
    _item_uses_daily_recharge();
  }
}

/**
 * Implements hook_menu().
 */
function item_uses_menu() {
  $items['admin/vaxia/item_uses'] = array(
    'title' => 'Item uses configuration',
    'description' => 'Configure item uses',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_item_uses_admin_settings'),
    'access arguments' => array('administer item uses'),
  );
  return $items;
}

/**
 * Implementation of admin settings form.
 */
function _item_uses_admin_settings($form, &$form_state) {
  $form['item_uses_active'] = array(
    '#title' => t('Track item uses'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('item_uses_active', TRUE),
  );
  $workflow_options = _items_get_workflow_options();
  $form['item_uses_once_workflow'] = array(
    '#title' => 'Item used up',
    '#description' => 'Workflow state for items that need otbe recharged before they can be used again.',
    '#type' => 'select',
    '#options' => $workflow_options,
    '#default_value' => variable_get('item_uses_once_workflow', ''),
  );
  $form['item_uses_daily_workflow'] = array(
    '#title' => 'Item used for day',
    '#description' => 'Workflow state for items that need a reset day before they can be used again.',
    '#type' => 'select',
    '#options' => $workflow_options,
    '#default_value' => variable_get('item_uses_daily_workflow', ''),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_comment_insert().
 */
function item_uses_comment_insert($comment) {
  // If user has no dice roller, bail.
  if (!user_access('use dice roller')) {
    return;
  }
  // If not a dice roller type, bail.
  $node = node_load($comment->nid);
  $enabled = variable_get('dice_roller_' . $node->type, FALSE);
  if (!$enabled) {
    return;
  }
  _item_uses_content_update($comment);
}

/**
 * Implements hook_node_update().
 */
function _item_uses_content_update($content) {
  // Allow for turning it all off.
  if (!variable_get('item_uses_active', TRUE) || user_access('use items indefinately') || empty($content->vaxia_rolls)) {
    return;
  }
  // Uses matter, so keep looping.
  $lang = $content->language;
  // Check items against stats.
  if (isset($content->vaxia_rolls['items'])) {
    // Gather the character information if it's set.
    $character = _items_get_field_node($content, 'field_comment_character');
    // If character set, get the stats and items.
    if (!empty($character)) {
      $once_workflow = variable_get('item_uses_once_workflow', '');
      $daily_workflow = variable_get('item_uses_daily_workflow', '');
      // Loop for each item.
      foreach ($content->vaxia_rolls['items'] as $item) {
        _item_uses_check_item_use($item, $once_workflow, $daily_workflow);
      }
    }
  }
}

/**
 * Helper function, check the item use.
 */
function _item_uses_check_item_use($item, $once_workflow, $daily_workflow) {
  $item = node_load($item);
  $uses = _items_get_field_value($item, 'field_item_use_day', 'at_will');
  $charges = _items_get_field_value($item, 'field_item_uses', 1);
  $spent_charges = _items_get_field_value($item, 'field_item_spent_uses', 0);
  // Only subtract from uses for items that are individual use.
  if (in_array($uses, array('once', 'per_day')) && $charges > 0) {
    // Reduce uses.
    $spent_charges++;
    _items_set_field_value($item, 'field_item_spent_uses', $spent_charges);
    drupal_set_message(t('@title charge used, @charges charges remaining.',
    array('@title' => $item->title, '@charges' => $charges - $spent_charges)));
    // If the item is out - note it and remove from play.
    if ($charges - $spent_charges <= 0) {
      if ($uses == 'once') {
        // For one time use.
        drupal_set_message(t('@title is out of uses cannot be used again until recharged.', array('@title' => $item->title)));
        workflow_execute_transition($item, $once_workflow, t('Item uses ran out, item temporarily removed from game.'), TRUE);
      }
      else {
        // For daily recharge use.
        drupal_set_message(t('@title is out of uses cannot be used again until tomorrow.', array('@title' => $item->title)));
        workflow_execute_transition($item, $daily_workflow, t('Item uses ran out, item temporarily removed from game.'), TRUE);
      }
    }
    // Save changes.
    node_save($item);
  } // end if $uses == 'once' uses > -1
}

/**
 * Helper function, get the cron for this run.
 */
function _item_uses_daily_recharge() {
  $items = _items_get_in_workflows(variable_get('item_uses_daily_workflow', ''));
  foreach ($items as $item) {
    $item = node_load($item->nid);
    if ($item) {
      $spent = _items_set_field_value($item, 'field_item_spent_uses', 0);
      if ($spent > 0) {
        _items_set_field_value($item, 'field_item_spent_uses', $spent_charges);
        $workflow = variable_get('items_approved_workflow', ''); // Set back to approved.
        workflow_execute_transition($item, $workflow, t('Item recharged daily.'), TRUE);
        node_save($item);
      }
    }
  }
}