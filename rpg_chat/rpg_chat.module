<?php
// $Id$

/**
 * @file
 * Reskin existing nodes and comments with a chat-room like UI.
 */

/**
 * Implements hook_form_alter().
 *
 * Alter content type settings to add "Enable dice roller?" checkbox.
 */
function rpg_chat_form_node_type_form_alter(&$form, &$form_state) {
  if (isset($form['type'])) {
    $form['rpg_chat'] = array(
      '#type' => 'fieldset',
      '#title' => t('RPG chat settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
    );

    $form['rpg_chat']['rpg_chat'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable RPG chat?'),
      '#default_value' => variable_get('rpg_chat_' . $form['#node_type']->type, FALSE),
      '#description' => t('Enable this checkbox if you want to provide a RPG chat UI for your users with this content type.'),
    );
  }
}


/**
 * Implements hook_permission().
 */
function rpg_chat_permission() {
  return array(
    'administer rpg chat' => array(
      'title' => t('Administer RPG chat'),
      'description' => t('Administer RPG chat configurations.'),
    ),
    'view rpg chat' => array(
      'title' => t('View RPG chat'),
      'description' => t('View RPG chat conversations.'),
    ),
    'view rpg mature chat' => array(
      'title' => t('View RPG mature chat'),
      'description' => t('View RPG mature chat conversations.'),
    ),
  );
}

/**
 * Implements hook_node_access().
 */
function rpg_chat_node_access($node, $op, $account) {
  // Only check if this is an rpg_node.
  if (!rpg_chat_is_enabled($node->type) ) {
    return NODE_ACCESS_IGNORE;
  }
  // You you can't view it, and you're not an admin for chat or the site.
  if (!user_access('view rpg chat') && !user_access('administer rpg chat')) {
    return NODE_ACCESS_DENY;
  }
  // If this is flagged as a mature room and you're not mature.
  if (!user_access('view rpg mature chat') && $node->field_status[$node->language][0]['value'] == 'mature') { //TODO remove dependancy.
    return NODE_ACCESS_DENY;
  }  
  // If this is flagged as a locked room and you're not an admin.
  if (!user_access('administer rpg chat') && $node->field_status[$node->language][0]['value'] == 'locked') { //TODO remove dependancy.
    return NODE_ACCESS_DENY;
  }
  // Check user specific settings.
  $banned_users = array();
  foreach ($node->field_banned_users[$node->language] as $index => $user) { //TODO remove dependancy.
    $baned_users[] = $user['uid'];
  }
  $allowed_users = array();
  foreach ($node->field_allowed_users[$node->language] as $index => $user) { //TODO remove dependancy.
    $allowed_users[] = $user['uid'];
  }
  // If you are on the banned users list, and not on the allowed users list.
  if (in_array($user->uid, $banned_users) && !in_array($user->uid, $allowed_users)) {
    return NODE_ACCESS_DENY;
  }
  // If the allowed users list is set, and you are not on it.
  if (count($allowed_users) > 0 && !in_array($user->uid, $allowed_users)) {
    return NODE_ACCESS_DENY;
  }
  // Still good? Great. Go chat.
  // Returning nothing from this function would have the same effect.
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_node_view().
 */
function rpg_chat_node_view($node, $view_mode = 'full', $langcode) {
  if (rpg_chat_is_enabled($node->type) && $view_mode == 'full' ) {
    // Modify the node with UI changes. This drives the reload.
    // Default is 60 seconds.
    $refresh = $min_refresh = $node->field_min_refresh[$node->language][0]['value']; //TODO remove dependancy.
    // TODO allow users to configure their refresh rate.
    drupal_add_js(array('rpg_chat' => array('refreshRate' => $refresh)), 'setting');
    drupal_add_js(drupal_get_path('module', 'rpg_chat').'/js/rpg_chat.js');
  }
}

/**
 * Implements hook_node_view_alter().
 * Wrap all comments in an ID wrapper for our AJAX to pick up.
 */
function rpg_chat_node_view_alter(&$build) {
  if (rpg_chat_is_enabled($build['#node']->type) ) {
    $build['comments']['comments']['#prefix'] = '<div id="rpg-chat">';
    $build['comments']['comments']['#suffix'] = '</div>';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function rpg_chat_form_comment_form_alter(&$form, &$form_state, $form_id) {
  // Check to see if this node type is a rpg chatroom.
  if (rpg_chat_is_enabled($form['#node']->type) ) {
    // Display the refresh button.
    $form['actions']['refresh'] = array(
      '#type' => 'submit',
      '#value' => 'Refresh',
      '#submit' => '', // Set to make sure validation errors are cleared.
      '#limit_validation_errors' => array(), // No validation for a refresh.
    );
    // When clicked refresh the comment display.
    $form['actions']['refresh']['#ajax'] = array(
      'callback' => 'rpg_chat_refresh_js',
      'wrapper' => 'rpg-chat',
      'method' => 'replace',
      'effect' => 'fade',
      'event' => 'click', // To allow our refresh script to hit it.
    );
    // When clicked refresh the comment display in addition to a submit.
    $form['actions']['submit']['#ajax'] = array(
      'callback' => 'rpg_chat_refresh_js',
      'wrapper' => 'rpg-chat',
      'method' => 'replace',
      'effect' => 'fade',
    );
  }
}

/**
 * AJAX callback, refreshes the comments displayed for this chatroom.
 */
function rpg_chat_refresh_js($form, &$form_state) {
  // This is to remove the "Your comment has been posted" status message.
  $published = t('Your comment has been posted.');
  if (isset($_SESSION['messages']['status'])) {
    foreach ($_SESSION['messages']['status'] as $key => $value) {
      if ($value == $published) {
        unset($_SESSION['messages']['status']);
      }
    }
  }
  $node = node_load($form['#node']->nid);
  // COPIED from comment_node_page_additions();
  // Only attempt to render comments if the node has visible comments.
  // Unpublished comments are not included in $node->comment_count, so show
  // comments unconditionally if the user is an administrator.
  if (($node->comment_count && user_access('access comments')) || user_access('administer comments')) {
    $mode = variable_get('comment_default_mode_' . $node->type, COMMENT_MODE_THREADED);
    $comments_per_page = variable_get('comment_default_per_page_' . $node->type, 50);
    if ($cids = comment_get_thread($node, $mode, $comments_per_page)) {
      $comments = comment_load_multiple($cids);
      comment_prepare_thread($comments);
      $additions = comment_view_multiple($comments, $node);
    }
  }
  $return_string = '<div id="rpg-chat">';
  foreach ($additions as $cid => $addition) {
    if (is_numeric($cid)) {
      $return_string .= drupal_render($addition);
    }
  } 
  $return_string .= '</div>';
  return $return_string;
}

/**
 * Helper function. Return RPG chat status.
 */
function rpg_chat_is_enabled($type) {
  return variable_get('rpg_chat_' . $type, FALSE);
}

// NOTE: Alias posts are handled with an additional field on comments independantly from chat. 
// This field is to be referenced when theming the comment to provide a character display.