<?php
// $Id$

/**
 * @file
 * Reskin existing nodes and comments with a chat-room like UI.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter content type settings to add "Enable dice roller?" checkbox.
 */
function rpg_chat_form_node_type_form_alter(&$form, &$form_state) {
  if (isset($form['type'])) {
    $form['rpg_chat'] = array(
      '#type' => 'fieldset',
      '#title' => t('RPG chat settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
    );
    $form['rpg_chat']['rpg_chat'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable RPG chat?'),
      '#default_value' => variable_get('rpg_chat_' . $form['#node_type']->type, FALSE),
      '#description' => t('Enable this checkbox if you want to provide a RPG chat UI '.  
        'for your users with this content type.'),
    );
  }
}

/**
 * Implements hook_permission().
 */
function rpg_chat_permission() {
  return array(
    'administer rpg chat' => array(
      'title' => t('Administer RPG chat'),
      'description' => t('Administer RPG chat configurations.'),
    ),
    'view rpg chat' => array(
      'title' => t('View RPG chat'),
      'description' => t('View RPG chat conversations.'),
    ),
    'view rpg mature chat' => array(
      'title' => t('View RPG mature chat'),
      'description' => t('View RPG mature chat conversations.'),
    ),
  );
}

/**
 * Implements hook_node_access().
 */
function rpg_chat_node_access($node, $op, $account) {
  // Only check if this is an rpg_node.
  if (!_rpg_chat_is_enabled($node->type) ) {
    return NODE_ACCESS_IGNORE;
  }
  // You you can't view it, and you're not an admin for chat or the site.
  if (!user_access('view rpg chat') && !user_access('administer rpg chat')) {
    return NODE_ACCESS_DENY;
  }
  // If this is flagged as a mature room and you're not mature. (Let's face it. No one is.)
  if (!user_access('view rpg mature chat') && $node->rpg_chat_mature) {
    return NODE_ACCESS_DENY;
  }  
  // If this is flagged as a locked room and you're not an admin.
  if (!user_access('administer rpg chat') && $node->rpg_chat_locked) {
    return NODE_ACCESS_DENY;
  }
  // Check user specific settings.
  $banned_users = $node->rpg_chat_banned_users;
  $allowed_users = $node->rpg_char_allowed_users;
  // If you are on the banned users list, and not on the allowed users list.
  if (in_array($user->uid, $banned_users) && !in_array($user->uid, $allowed_users)) {
    return NODE_ACCESS_DENY;
  }
  // If the allowed users list is set, and you are not on it.
  if (count($allowed_users) > 0 && !in_array($user->uid, $allowed_users)) {
    return NODE_ACCESS_DENY;
  }
  // Still good? Great. Go chat.
  // Returning nothing from this function would have the same effect.
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_node_load().
 */
//TODO describe these fields to views (as join table).
function rpg_chat_node_load($nodes) {
  foreach ($nodes as $node) {
    // Load all the chat related bits for this node.
    if (isset($node->type) && _rpg_chat_is_enabled($node->type)) {
      $room = _rpg_chat_get_room($node->nid);
      $nodes[$node->nid]->rpg_chat_min_refresh = $room->min_refresh;
      $nodes[$node->nid]->rpg_chat_mature = $room->mature;
      $nodes[$node->nid]->rpg_chat_locked = $room->locked;
      $nodes[$node->nid]->rpg_chat_allowed_users = unserialize($room->allowed_users);
      $nodes[$node->nid]->rpg_chat_banned_users = unserialize($room->banned_users);
      $nodes[$node->nid]->rpg_chat_current_users = _rpg_chat_get_room_users($node->nid);
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function rpg_chat_node_delete($node) {
  if (_rpg_chat_is_enabled($node->type)) {
    _rpg_chat_delete_room($node->nid);
  }
}

/**
 * Implements hook_node_view().
 */
function rpg_chat_node_view($node, $view_mode = 'full', $langcode) {
  if (_rpg_chat_is_enabled($node->type) && $view_mode == 'full' ) {
    // Modify the node with UI changes. This drives the reload.
    // Default is 60 seconds.
    $refresh = $min_refresh = 60;
    if (isset($node->rpg_chat_min_refresh)) {
      $refresh = $min_refresh = $node->rpg_chat_min_refresh;
    }
    // Allow other modules to provide custom refresh rates for users.
    // Such as from a specific implementation of a character sheet.
    $refresh = module_invoke_all('rpg_chat_user_refresh', $refresh);
    $refresh = $refresh[0];
    if ($refresh < $min_refresh) {
      $refresh = $min_refresh;
    }
    // And add the JS we need to drive the conversation.
    drupal_add_js(array('rpg_chat' => array('refreshRate' => $refresh)), 'setting');
    drupal_add_js(drupal_get_path('module', 'rpg_chat').'/js/rpg_chat.js');
  }
}

/**
 * Implements hook_node_view_alter().
 * Wrap all comments in an ID wrapper for our AJAX to pick up.
 */
function rpg_chat_node_view_alter(&$build) {
  if (_rpg_chat_is_enabled($build['#node']->type) ) {
    // Get users for display in addition to the wrapper.
    $user_names = array();
    $users = _rpg_chat_get_room_users($build['#node']->nid);
    foreach ($users as $found_user) {
      $this_user = user_load($found_user->uid);
      $user_names[] = $this_user->name;
    }
    $user_string = '<div id="rpg-chat-userlist">' .
      theme('item_list', array('title' => t('Users in this room'), 'items' => $user_names)) .
      '</div>';
    $build['comments']['comments']['#prefix'] = '<div id="rpg-chat">' . $user_string;
    $build['comments']['comments']['#suffix'] = '</div>';
  }
}

/**
 * Implements hook_form_FORM_ID_alter(). Alter the comment form with our controls.
 */
function rpg_chat_form_comment_form_alter(&$form, &$form_state, $form_id) {
  // Check to see if this node type is a rpg chatroom.
  if (_rpg_chat_is_enabled($form['#node']->type) ) {
    // Display the refresh submit.
    $form['actions']['refresh_chat'] = array(
      '#type' => 'submit',
      '#value' => 'Refresh',
      '#access' => 1,
      '#submit' => array(),
      '#limit_validation_errors' => array(), // No validation for a refresh.
    );
    // When clicked refresh the comment display.
    $form['actions']['refresh_chat']['#ajax'] = array(
      'callback' => '_rpg_chat_refresh_js',
      'wrapper' => 'rpg-chat',
      'method' => 'replace',
      'effect' => 'fade',
      'event' => 'click', // To allow our refresh script to hit it.
    );
    // When clicked refresh the comment display in addition to a submit.
    $form['actions']['submit']['#ajax'] = array(
      'callback' => '_rpg_chat_refresh_js',
      'wrapper' => 'rpg-chat',
      'method' => 'replace',
      'effect' => 'fade',
    );
    // Refresh this user's last login to this room.
    global $user;
    _rpg_chat_set_room_users($form['#node']->nid, $user->uid);
  }
}

/**
 * AJAX callback, refreshes the comments displayed for this chatroom.
 */
function _rpg_chat_refresh_js($form, &$form_state) {
  // This is to remove the "Your comment has been posted" status message.
  unset($_SESSION['messages']['status']);
  $node = node_load($form['#node']->nid);
  // COPIED from comment_node_page_additions();
  // Only attempt to render comments if the node has visible comments.
  // Unpublished comments are not included in $node->comment_count, so show
  // comments unconditionally if the user is an administrator.
  if (($node->comment_count && user_access('access comments'))
    || user_access('administer comments')) {
    $mode = variable_get('comment_default_mode_' . $node->type, COMMENT_MODE_THREADED);
    $comments_per_page = variable_get('comment_default_per_page_' . $node->type, 50);
    if ($cids = comment_get_thread($node, $mode, $comments_per_page)) {
      $found_comments = comment_load_multiple($cids);
      comment_prepare_thread($found_comments);
      $comments = comment_view_multiple($found_comments, $node);
    }
  }
  $user_names = array();
  $users = _rpg_chat_get_room_users($node->nid);
  foreach ($users as $found_user) {
    $this_user = user_load($found_user->uid);
    $user_names[] = $this_user->name;
  }
  $return_string = '<div id="rpg-chat">';
  $return_string .= '<div id="rpg-chat-userlist">' .
    theme('item_list', array('title' => t('Users in this room'), 'items' => $user_names)) .
    '</div>';
  foreach ($comments as $cid => $comment) {
    if (is_numeric($cid)) {
      $return_string .= drupal_render($comment);
    }
  }
  $return_string .= '</div>';
  // Refresh this user's last login to this room.
  global $user;
  _rpg_chat_set_room_users($node->nid, $user->uid);
  return $return_string;
}

/**
 * Implements hook_form_alter().
 *
 * Add RPG chat settings to node forms with RPG chat enabled.
 */
function rpg_chat_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form['type']['#value']) || !_rpg_chat_is_enabled($form['type']['#value'])) {
    return;
  }
  // If this is a node form, add the rpg_chat feature set.
  if (strpos($form['#form_id'], '_node_form') !== FALSE) {
    $node = node_load($form['#node']->nid);
    // RPG Chat values are loaded by node_load.
    $form['min_refresh'] = array(
      '#type' => 'textfield',
      '#title' => t('Minimum refresh rate'),
      '#default_value' => isset($node->rpg_chat_min_refresh) ? $node->rpg_chat_min_refresh : 60,
    );
    $form['mature'] = array(
      '#type' => 'checkbox',
      '#title' => t('Mature room?'),
      '#default_value' => isset($node->rpg_chat_mature) ? $node->rpg_chat_mature : FALSE,
    );
    $form['locked'] = array(
      '#type' => 'checkbox',
      '#title' => t('Locked room?'),
      '#default_value' => isset($node->rpg_chat_locked) ? $node->rpg_chat_locked : FALSE,
    );
    $form['allow_ban'] = array(
      '#type' => 'fieldset',
    );
    // Default list is node's list, if not submitted yet by AJAX.
    $allow_list = isset($node->rpg_chat_allowed_users) ? $node->rpg_chat_allowed_users : array();
    $ban_list = isset($node->rpg_chat_banned_users) ? $node->rpg_chat_banned_users : array();
    // Add users from submitted form, and account for removals.
    if (isset($form_state['values']['allow'])) {
      $allow_list = array();
      foreach($form_state['values']['allow'] as $delta => $values) {
        if ($form_state['clicked_button']['#id'] != 'allow_remove_' . $values['uid']) {
          $allow_list[] = $values['uid'];
        }
      }
    }
    if (isset($form_state['values']['ban'])) {
      $allow_list = array();
      foreach($form_state['values']['ban'] as $delta => $values) {
        if ($form_state['clicked_button']['#id'] != 'ban_remove_' . $values['uid']) {
          $ban_list[] = $values['uid'];
        }
      }
    }
    // Check for users added to the list.
    if (isset($form_state['clicked_button']['#id']) && $form_state['clicked_button']['#id'] == 'edit-submit-allow' && isset($form_state['values']['owner_name'])) {
      $uid = db_query("SELECT uid FROM {users} WHERE name = :name", array(':name' => $form_state['values']['owner_name']))->fetchField();
      $allow_list[] = $uid;
    }
    if (isset($form_state['clicked_button']['#id']) && $form_state['clicked_button']['#id'] == 'edit-submit-ban' && isset($form_state['values']['owner_name'])) {
      $uid = db_query("SELECT uid FROM {users} WHERE name = :name", array(':name' => $form_state['values']['owner_name']))->fetchField();
      $ban_list[] = $uid;
    }
    // Display allow / ban with list generated from default or form_state.
    $form['allow_ban']['allow'] = array(
      '#theme' => 'rpg_chat_user_list',
      '#type' => 'fieldset',
      '#title' => t('Allowed users'),
      '#prefix' => '<div id="rpg-chat-node-allow-list">',
      '#suffix' => '</div>',
      '#tree' => TRUE,
    );
    foreach ($allow_list as $delta => $uid) {
      $this_user = user_load($uid);
      $form['allow_ban']['allow'][$delta]['uid'] = array(
        '#type' => 'hidden',
        '#value' => $uid,
      );
      $form['allow_ban']['allow'][$delta]['name'] = array(
        '#type' => 'item',
        '#markup' => $this_user->name,
      );
      $form['allow_ban']['allow'][$delta]['allow_remove_' . $uid] = array(
        '#type' => 'submit',
        '#value' => t('Remove'),
        '#submit' => array(),
        '#limit_validation_errors' => array(), // No validation for a refresh.
        '#ajax' => array(
          'callback' => '_rpg_chat_allow_user_submit',
          'wrapper' => 'rpg-chat-node-allow-list',
          'method' => 'replace',
          'effect' => 'fade',
        ),
      );
    }
    $form['allow_ban']['ban'] = array(
      '#theme' => 'rpg_chat_user_list',
      '#type' => 'fieldset',
      '#title' => t('Banned users'),
      '#prefix' => '<div id="rpg-chat-node-ban-list">',
      '#suffix' => '</div>',
      '#tree' => TRUE,
    );
    foreach ($ban_list as $delta => $uid) {
      $this_user = user_load($uid);
      $form['allow_ban']['ban'][$delta]['uid'] = array(
        '#type' => 'hidden',
        '#value' => $uid,
      );
      $form['allow_ban']['ban'][$delta]['name'] = array(
        '#type' => 'item',
        '#markup' => $this_user->name,
      );
      $form['allow_ban']['ban'][$delta]['ban_remove_' . $uid] = array(
        '#type' => 'submit',
        '#value' => t('Remove'),
        '#submit' => array(),
        '#limit_validation_errors' => array(), // No validation for a refresh.
        '#ajax' => array(
          'callback' => '_rpg_chat_ban_user_submit',
          'wrapper' => 'rpg-chat-node-ban-list',
          'method' => 'replace',
          'effect' => 'fade',
        ),
      );
    }
    // Generate add-user form.
    $context['owner_uid'] = $node->uid;
    $user_form = node_assign_owner_action_form($context);
    // From node.module, generate an ownership form to usxe for getting users by name.
    $form['allow_ban']['add_user'] = array(
      '#type' => 'fieldset',
    );
    $form['allow_ban']['add_user']['owner_name'] = $user_form['owner_name'];
    $form['allow_ban']['add_user']['owner_name']['#title'] = t('Allow / ban user');
    $form['allow_ban']['add_user']['submit_allow'] = array(
      '#type' => 'submit',
      '#value' => t('Add user to allow list'),
      '#submit' => array(),
      //'#limit_validation_errors' => array(),
      '#ajax' => array(
        'callback' => '_rpg_chat_allow_user_submit',
        'wrapper' => 'rpg-chat-node-allow-list',
        'method' => 'replace',
        'effect' => 'fade',
      ),
    );
    $form['allow_ban']['add_user']['submit_ban'] = array(
      '#type' => 'submit',
      '#value' => t('Add user to ban list'),
      '#submit' => array(),
      //'#limit_validation_errors' => array(),
      '#ajax' => array(
        'callback' => '_rpg_chat_ban_user_submit',
        'wrapper' => 'rpg-chat-node-ban-list',
        'method' => 'replace',
        'effect' => 'fade',
      ),
    );
    $form['#validate'][] = '_rpg_chat_add_room_validate';
    $form['#submit'][] = '_rpg_chat_add_room_submit';
  }
}

/**
 * AJAX callback for adding users to the allow list.
 */
function _rpg_chat_allow_user_submit($form, $form_state) {
  return $form['allow_ban']['allow'];
}

/**
 * AJAX callback for adding users to the allow list.
 */
function _rpg_chat_ban_user_submit($form, $form_state) {
  return $form['allow_ban']['ban'];
}

/*
 * Form callback validation for _rpg_chat_node_forms.
 */
function _rpg_chat_add_room_validate($form, $form_state) {
  $count = db_query("SELECT COUNT(*) FROM {users} WHERE name = :name",
    array(':name' => $form_state['values']['owner_name']))->fetchField();
  if (intval($count) != 1) {
    form_set_error('owner_name', t('Please enter a valid username.'));
  }
}

/*
 * Implements hook_node_insert().
 */
function rpg_chat_node_insert($node) {
  rpg_chat_node_update($node);
}

/*
 * Implements hook_node_update().
 */
function rpg_chat_node_update($node) {
  // Gather all values and save them.
  $variables = array();
  $variables['nid'] = $node->nid;
  $variables['min_refresh'] = $node->min_refresh;
  $variables['mature'] = $node->mature;
  $variables['locked'] = $node->locked;
  $allowed_users = array();
  if (isset($node->allow)) {
    foreach ($node->allow as $delta => $users) {
      $allowed_users[] = $users['uid'];
    }
  }
  $banned_users = array();
  if (isset($node->ban)) {
    foreach ($node->ban as $delta => $users) {
      $banned_users[] = $users['uid'];
    }
  }
  $variables['allowed_users'] = array_unique($allowed_users);
  $variables['banned_users'] = array_unique($banned_users);
  _rpg_chat_set_room($node->nid, $variables);
}

/**
 * Implements hook_theme().
 *
 * Register themes used by this module.
 */
function rpg_chat_theme($existing, $type, $theme, $path) {
  return array(
    'rpg_chat_user_list' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Theme user lists in RPG chat forms.
 */
function theme_rpg_chat_user_list($element) {
  $element = $element['element'];
  $header = array('', '');
  $rows = array();
  foreach (element_children($element) as $i) {
    $this_user = $element[$i]['uid']['#value'];
    $uid = drupal_render($element[$i]['uid']);
    $name = drupal_render($element[$i]['name']);
    $remove = '';
    if (isset($element[$i]['allow_remove_' . $this_user])) {
      $remove = drupal_render($element[$i]['allow_remove_' . $this_user]);
    }
    if (isset($element[$i]['ban_remove_' . $this_user])) {
      $remove = drupal_render($element[$i]['ban_remove_' . $this_user]);
    }
    $rows[] = array($uid.$name, $remove);
  }
  if (!empty($rows)) {
    return theme('table', array('header' => $header, 'rows' => $rows));
  }
  else {
    return t('No users in this list.');
  }
}

/**
 * Helper function. Return RPG chat status.
 */
function _rpg_chat_is_enabled($type) {
  return variable_get('rpg_chat_' . $type, FALSE);
}

/**
 * DB function. Get room info for a node.
 */
function _rpg_chat_get_room($nid) {
  $results = db_query('SELECT * FROM {rpg_chat_room} WHERE nid = :nid', array(':nid' => $nid));
  foreach ($results as $result) {
    return $result;
  }
  return FALSE;
}

/**
 * DB function. Set room info for a node.
 */
function _rpg_chat_set_room($nid, $values) {
  // Prepare the user arrays for input.
  $values['allowed_users'] = serialize($values['allowed_users']);
  $values['banned_users'] = serialize($values['banned_users']);
  $room = _rpg_chat_get_room($nid);
  if ($room) {
    drupal_write_record('rpg_chat_room', $values, 'nid');
  }
  else {
    drupal_write_record('rpg_chat_room', $values);
  }
}

/**
 * DB function. Delete room info for a node.
 */
function _rpg_chat_delete_room($nid) {
  db_query('DELETE FROM {rpg_chat_room} WHERE nid = :nid', array(':nid' => $nid));
}

/**
 * DB function. Get users recently viewing a room.
 */
function _rpg_chat_get_room_users($nid) {
  $users = array();
  $results = db_query('SELECT * FROM {rpg_chat_room_users} WHERE nid = :nid', array(':nid' => $nid));
  foreach ($results as $result) {
    $users[] = $result;
  }
  return $users;
}

/**
 * DB function. Set users recently viewing a room, clear out logouts.
 */
function _rpg_chat_set_room_users($nid, $uid) {
  // Clear out anything past a certain timeline / session.
  db_query('DELETE FROM {rpg_chat_room_users} WHERE timestamp < :timestamp',
    array(':timestamp' => strtotime('-15 minutes') ));
  // Clear out this user and nid connection.
  db_query('DELETE FROM {rpg_chat_room_users} WHERE nid = :nid AND uid = :uid',
    array(':nid' => $nid, ':uid' => $uid));
  // Mark the timestamp for the nid/uid combination.
  $record = array(
    'uid' => $uid,
    'nid' => $nid,
    'timestamp' => strtotime('now'),
  );
  drupal_write_record('rpg_chat_room_users', $record);
}

/**
 * DB function. Delete users recently viewing a room.
 */
function _rpg_chat_delete_room_users($nid) {
  db_query('DELETE FROM {rpg_chat_room_users} WHERE nid = :nid', array(':nid' => $nid));
}

