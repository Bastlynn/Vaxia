<?php
// $Id$

/**
 * @file
 * Reskin existing nodes and comments with a chat-room like UI.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter content type settings to add "Enable dice roller?" checkbox.
 */
function rpg_chat_form_node_type_form_alter(&$form, &$form_state) {
  if (isset($form['type'])) {
    $form['rpg_chat'] = array(
      '#type' => 'fieldset',
      '#title' => t('RPG chat settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
    );

    $form['rpg_chat']['rpg_chat'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable RPG chat?'),
      '#default_value' => variable_get('rpg_chat_' . $form['#node_type']->type, FALSE),
      '#description' => t('Enable this checkbox if you want to provide a RPG chat UI '.  
        'for your users with this content type.'),
    );
  }
}

/**
 * Implements hook_permission().
 */
function rpg_chat_permission() {
  return array(
    'administer rpg chat' => array(
      'title' => t('Administer RPG chat'),
      'description' => t('Administer RPG chat configurations.'),
    ),
    'view rpg chat' => array(
      'title' => t('View RPG chat'),
      'description' => t('View RPG chat conversations.'),
    ),
    'view rpg mature chat' => array(
      'title' => t('View RPG mature chat'),
      'description' => t('View RPG mature chat conversations.'),
    ),
  );
}

/**
 * Implements hook_node_access().
 */
function rpg_chat_node_access($node, $op, $account) {
  // Only check if this is an rpg_node.
  if (!_rpg_chat_is_enabled($node->type) ) {
    return NODE_ACCESS_IGNORE;
  }
  // You you can't view it, and you're not an admin for chat or the site.
  if (!user_access('view rpg chat') && !user_access('administer rpg chat')) {
    return NODE_ACCESS_DENY;
  }
  // If this is flagged as a mature room and you're not mature.
  if (!user_access('view rpg mature chat') && $node->rpg_chat_mature) {
    return NODE_ACCESS_DENY;
  }  
  // If this is flagged as a locked room and you're not an admin.
  if (!user_access('administer rpg chat') && $node->rpg_chat_locked) {
    return NODE_ACCESS_DENY;
  }
  // Check user specific settings.
  $banned_users = $node->rpg_chat_banned_users;
  $allowed_users = $node->rpg_char_allowed_users;
  // If you are on the banned users list, and not on the allowed users list.
  if (in_array($user->uid, $banned_users) && !in_array($user->uid, $allowed_users)) {
    return NODE_ACCESS_DENY;
  }
  // If the allowed users list is set, and you are not on it.
  if (count($allowed_users) > 0 && !in_array($user->uid, $allowed_users)) {
    return NODE_ACCESS_DENY;
  }
  // Still good? Great. Go chat.
  // Returning nothing from this function would have the same effect.
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_node_load().
 */
function rpg_chat_node_load($node) {
  if (_rpg_chat_is_enabled($node->type)) {
    $room = _rpg_chat_get_room($nid);
    $node->rpg_chat_min_refresh = $room->min_refresh;
    $node->rpg_chat_mature = $room->mature;
    $node->rpg_chat_locked = $room->locked;
    $node->rpg_chat_banned_users = unserialize($room->banned_users);
    $node->rpg_chat_allowed_users = unserialize($room->banned_users);
    $node->rpg_chat_current_users = _rpg_chat_get_room_users($node->nid);
  }
}

/**
 * Implements hook_node_delete().
 */
function rpg_chat_node_delete($node) {
  if (_rpg_chat_is_enabled($node->type)) {
    _rpg_chat_delete_room($node->nid);
  }
}

/**
 * Implements hook_node_view().
 */
function rpg_chat_node_view($node, $view_mode = 'full', $langcode) {
  if (_rpg_chat_is_enabled($node->type) && $view_mode == 'full' ) {
    // Modify the node with UI changes. This drives the reload.
    // Default is 60 seconds.
    $refresh = $min_refresh = 60;
    if (isset($node->rpg_chat_min_refresh)) {
      $refresh = $min_refresh = $node->rpg_chat_min_refresh;
    }
    // Allow other modules to provide custom refresh rates for users.
    module_invoke_all('rpg_chat_user_refresh', $refresh);
    if ($refresh < $min_refresh) {
      $refresh = $min_refresh;
    }
    // And add the JS we need to drive the conversation.
    drupal_add_js(array('rpg_chat' => array('refreshRate' => $refresh)), 'setting');
    drupal_add_js(drupal_get_path('module', 'rpg_chat').'/js/rpg_chat.js');
  }
}

/**
 * Implements hook_node_view_alter().
 * Wrap all comments in an ID wrapper for our AJAX to pick up.
 */
function rpg_chat_node_view_alter(&$build) {
  if (_rpg_chat_is_enabled($build['#node']->type) ) {
    $build['comments']['comments']['#prefix'] = '<div id="rpg-chat">';
    $build['comments']['comments']['#suffix'] = '</div>';
  }
}

/**
 * Implements hook_form_FORM_ID_alter(). Alter the comment type.
 */
function rpg_chat_form_comment_form_alter(&$form, &$form_state, $form_id) {
  // Check to see if this node type is a rpg chatroom.
  if (_rpg_chat_is_enabled($form['#node']->type) ) {
    // Display the refresh button.
    $form['actions']['refresh'] = array(
      '#type' => 'submit',
      '#value' => 'Refresh',
      '#submit' => '', // Set to make sure validation errors are cleared.
      '#limit_validation_errors' => array(), // No validation for a refresh.
    );
    // When clicked refresh the comment display.
    $form['actions']['refresh']['#ajax'] = array(
      'callback' => 'rpg_chat_refresh_js',
      'wrapper' => 'rpg-chat',
      'method' => 'replace',
      'effect' => 'fade',
      'event' => 'click', // To allow our refresh script to hit it.
    );
    // When clicked refresh the comment display in addition to a submit.
    $form['actions']['submit']['#ajax'] = array(
      'callback' => '_rpg_chat_refresh_js',
      'wrapper' => 'rpg-chat',
      'method' => 'replace',
      'effect' => 'fade',
    );
  }
}

/**
 * AJAX callback, refreshes the comments displayed for this chatroom.
 */
function _rpg_chat_refresh_js($form, &$form_state) {
  // This is to remove the "Your comment has been posted" status message.
  $published = t('Your comment has been posted.');
  if (isset($_SESSION['messages']['status'])) {
    foreach ($_SESSION['messages']['status'] as $key => $value) {
      if ($value == $published) {
        unset($_SESSION['messages']['status']);
      }
    }
  }
  $node = node_load($form['#node']->nid);
  // COPIED from comment_node_page_additions();
  // Only attempt to render comments if the node has visible comments.
  // Unpublished comments are not included in $node->comment_count, so show
  // comments unconditionally if the user is an administrator.
  if (($node->comment_count && user_access('access comments'))
    || user_access('administer comments')) {
    $mode = variable_get('comment_default_mode_' . $node->type, COMMENT_MODE_THREADED);
    $comments_per_page = variable_get('comment_default_per_page_' . $node->type, 50);
    if ($cids = comment_get_thread($node, $mode, $comments_per_page)) {
      $comments = comment_load_multiple($cids);
      comment_prepare_thread($comments);
      $additions = comment_view_multiple($comments, $node);
    }
  }
  $return_string = '<div id="rpg-chat">';
  foreach ($additions as $cid => $addition) {
    if (is_numeric($cid)) {
      $return_string .= drupal_render($addition);
    }
  } 
  $return_string .= '</div>';
  global $user;
  _rpg_chat_set_room_users($form['#node']->nid, $user->uid);
  return $return_string;
}

// To every node type, add the functions to set value.

function dice_roller_form_alter(&$form, &$form_state, $form_id) {
  if (!_rpg_chat_is_enabled$form['type']['#value']) ) {
    return;
  }
  // If this is a node form, add the rpg_chat feature set.
  if (strpos($form_id, '_node_form')) {
    $form = array(
      '#type' => 'text',
      '#title' => t('Minimum refresh rate'),
      '#default_value' => 60,
    );
    $form = array(
      '#type' => 'checkbox',
      '#title' => t('Mature room?'),
      '#default_value' => FALSE,
    );
    $form = array(
      '#type' => 'checkbox',
      '#title' => t('Locked room?'),
      '#default_value' => FALSE,
    );

/*
    $node->rpg_chat_banned_users = unserialize($room->banned_users);
    $node->rpg_chat_allowed_users = unserialize($room->banned_users);
*/
    $form['allow_ban'] = array(
      '#type' => 'fieldset',
    );
    $form['allow_ban']['allow'] = array(
      '#prefix' => '<div id="rpg-chat-node-allow-list">',
      '#suffix' => '</div>',
    );
    $form['allow_ban']['allow'] = array(
      '#prefix' => '<div id="rpg-chat-node-ban-list">',
      '#suffix' => '</div>',
    );
    $context['owner_uid'] = $node->uid;
    $form = node_assign_owner_action_form($context);
    // From node.module, generate an ownership form.
    $form['owner_name']['#title'] = t('Allow / ban user');
    $form['submit_allow'] = array(
      '#type' => 'submit',
      '#value' => t('Add user to allow list'),
      '#ajax' => array(
        'callback' => '_rpg_chat_add_allow_user_submit',
        'wrapper' => 'rpg-chat-node-allow-list',
        'method' => 'replace',
        'effect' => 'fade',
      ),
    );
    $form['submit_ban'] = array(
      '#type' => 'submit',
      '#value' => t('Add user to ban list'),
      '#ajax' => array(
        'callback' => '_rpg_chat_add_ban_user_submit',
        'wrapper' => 'rpg-chat-node-ban-lists',
        'method' => 'replace',
        'effect' => 'fade',
      ),
    );
    $form['#submit'][] = '_rpg_chat_add_user_submit';
  }
  return $form;
}

function _rpg_chat_add_allow_user_submit($form, $form_state) {
  // Check submitted.
}

function _rpg_chat_add_ban_user_submit($form, $form_state) {
  // Check submitted.
}

/*
 * Form callback validation for _vaxia_change_ownership_form.
 */
function _vaxia_change_ownership_form_validate($form, $form_state) {
  $count = db_query("SELECT COUNT(*) FROM {users} WHERE name = :name",
    array(':name' => $form_state['values']['owner_name']))->fetchField();
  if (intval($count) != 1) {
    form_set_error('owner_name', t('Please enter a valid username.'));
  }
}

/**
 * Helper function. Return RPG chat status.
 */
function _rpg_chat_is_enabled($type) {
  return variable_get('rpg_chat_' . $type, FALSE);
}

/**
 * DB function.
 */
function _rpg_chat_get_room($nid) {
}

function _rpg_chat_set_room($nid, $values) {
}

function _rpg_chat_delete_room($nid) {
}

function _rpg_chat_get_room_users($nid) {
}

function _rpg_chat_set_room_users($nid, $uid) {
  // Mark the timestamp for the nid/uid combination.
  // Also clears out anything past a certain timeline / session.
}

function _rpg_chat_delete_room_users($nid) {
}
