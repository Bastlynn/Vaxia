<?php
/**
 * @file
 * Code for the Vaxia feature.
 */

include_once('vaxia.features.inc');

include_once('vaxia.dice.inc');

include_once('vaxia.character_sheet.inc');

/**
 * Implements hook_permission().
 */
function vaxia_permission() {
  return array(
    'change art owner'=> array(
      'title' => t('change art owner'),
      'description' => t('Change the owner of art.'),
    ),
    'evaluate art'=> array(
      'title' => t('evaluate art'),
      'description' => t('Evaluate art.'),
    ),
    'change item owner'=> array(
      'title' => t('change item owner'),
      'description' => t('Change the owner of items.'),
    ),
    'evaluate item'=> array(
      'title' => t('evaluate item'),
      'description' => t('Evaluate item.'),
    ),
    'post notes on character'=> array(
      'title' => t('post notes on character'),
      'description' => t('Post notes on character.'),
    ),
    'add xp to character sheet' => array(
      'title' => t('add xp to character sheet'),
      'description' => t('Add XP to a character.'),
    ),
    'add item to character sheet' => array(
      'title' => t('add item to character sheet'),
      'description' => t('Add item to a character.'),
    ),
    'add property to character sheet' => array(
      'title' => t('add property to character sheet'),
      'description' => t('Add property to a character.'),
    ),
    'add art to character sheet' => array(
      'title' => t('add art to character sheet'),
      'description' => t('Add art to a character.'),
    ),
    'add npc to character sheet' => array(
      'title' => t('add npc to character sheet'),
      'description' => t('Add npc to a character.'),
    ),
    'evaluate character'=> array(
      'title' => t('evaluate character'),
      'description' => t('Evaluate character.'),
    ),
    'post in narrative format' => array(
      'title' => t('post in narrative format'),
      'description' => t('Post in narrative format.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function vaxia_menu() {
  $items['node/%node/transfer'] = array(
    'title' => 'Transfer XP',
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_vaxia_menu_transfer_access_callback',
    'access arguments' => array(1),
    'page callback' => '_vaxia_transfer_xp',
    'page arguments' => array(1),
    'weight' => 3,
  );
  $items['node/%node/ownership'] = array(
    'title' => 'Transfer ownership',
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_vaxia_menu_ownership_access_callback',
    'access arguments' => array(1),
    'page callback' => '_vaxia_ownership',
    'page arguments' => array(1),
    'weight' => 3,
  );
  return $items;
}

/**
 * Menu access callback.
 */
function _vaxia_menu_transfer_access_callback($node) {
  $setting = variable_get('vaxia_transfer_workflow', '');
  $sheet = character_sheet_is_enabled($node->type);
  if ($sheet && !empty($setting)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Menu access callback.
 */
function _vaxia_menu_ownership_access_callback($node) {
  $vaxia_ownership_managed = array('artwork', 'items');
  if (in_array($node->type, $vaxia_ownership_managed)) {
    global $user;
    if ( ( user_access('change art owner') || user_access('change item owner'))
      || ($user->uid == $node->uid && 
        (user_access('edit any ' . $node->type . ' content') || user_access('edit own ' . $node->type . ' content')))) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_field_extra_fields().
 */
function vaxia_field_extra_fields() {
  $types = array_keys(node_type_get_types());
  $extra = array();
  foreach ($types as $type) {
    $enabled = character_sheet_is_enabled($type);
    if ($enabled && variable_get('character_sheet_system_' . $type, '') == 'vaxia') {
      $extra['node'][$type] = array(
        'form' => array(
          'vaxia_xp' => array(
            'label' => t('Total XP'),
            'description' => t('character sheet basic XP display.'),
            'weight' => 0,
          ),
        ), 
        'display' => array(
          'vaxia' => array(
            'vaxia_xp' => t('Total XP'),
            'description' => t('character sheet basic XP display.'),
            'weight' => 0,
          ),
        ),
      );
    }
  }
  return $extra;
}

/**
 * Menu callback, transfer ownership pages for items and artwork.
 */
function _vaxia_ownership($node) {
  return drupal_get_form('_vaxia_change_ownership_form', $node);
}
      
/*
 * Form callback function from nodeapi view, adds moderation form to node display.
 */
function _vaxia_change_ownership_form($form, &$form_state, $node) {
  $context['owner_uid'] = $node->uid;
  $form = node_assign_owner_action_form($context);
  // From node.module, generate an ownership form.
  $form['owner_name']['#title'] = t('Owner');
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update ownership'),
  );
  return $form;
}

/*
 * Form callback validation for _vaxia_change_ownership_form.
 */
function _vaxia_change_ownership_form_validate($form, $form_state) {
  $count = db_query("SELECT COUNT(*) FROM {users} WHERE name = :name",
    array(':name' => $form_state['values']['owner_name']))->fetchField();
  if (intval($count) != 1) {
    form_set_error('owner_name', t('Please enter a valid username.'));
  }
}

/*
 * Form callback submission for _vaxia_change_ownership_form.
 */
function _vaxia_change_ownership_form_submit($form, $form_state) {
  $values = $form_state['values'];
  $node = node_load($values['nid']);
  global $user;
  if (!empty($node) && ( (user_access('change item owner') || user_access('change art owner'))
      || ($user->uid == $node->uid && 
      (user_access('edit any ' . $node->type . ' content') || user_access('edit own ' . $node->type . ' content'))))) {
    $uid = db_query("SELECT uid from {users} WHERE name = :name", array(':name' => $values['owner_name']))->fetchField();
    if (!empty($uid)) {
      $node->uid = $uid;
    }
    node_save($node);
  }
}

/**
 * Implements process suggestion for comment theme. This allows us to override parts of the comment form.
 */
function vaxia_process_comment(&$variables) {
  if (_rpg_chat_is_enabled($variables['node']->type)) {
    $comment = $variables['comment'];
    $lang = $comment->language;
    // Add the variables for our narrative and colors.
    if( isset($comment->field_comment_narrative[$lang][0]['value']) && ($comment->field_comment_narrative[$lang][0]['value'] == 1) ) {
      $variables['classes'] .= ' rpg-chat-narrative';
    }
    // Add the style attribute for our content color.
    if (isset($comment->field_comment_color[$lang][0]['value'])) {
      $color = '#' . trim($comment->field_comment_color[$lang][0]['value']);
      $variables['content_attributes'] .= t(' style="color:@color;"', array('@color' => $color));
    }
    $variables['submitted'] = t('!username </br> !datetime',
      array('!username' => $variables['author'], '!datetime' => $variables['created']));
    // node_load caches else calling this for Every Comment would get really ugly.
    if (isset($comment->field_comment_character[$lang][0]['nid'])) {
      $character = node_load($comment->field_comment_character[$lang][0]['nid']);
      // Replace the user name with the character title.
      // TODO add link from this character name like you do for user names.
      $variables['submitted'] = t('!username </br> !datetime',
        array('!username' => $character->title, '!datetime' => $variables['created']));
      // Overwrite the user picture witha  character picture if character is set.
      if (isset($character->field_artwork[$lang][0]['nid'])) {
        $artwork = node_load($character->field_artwork[$lang][0]['nid']);
        if (isset($artwork->field_artwork_image[$lang][0]['fid'])) {
          $variables['picture'] = _vaxia_create_avatar_image_link($artwork->field_artwork_image[$lang][0]['fid'], $character->title);
        }
        else {
          $variables['picture'] = 'NO IMAGE'; // DEFAULT OR NONE. TODO configure this.
        }
      }
    }
    else {
      $user = user_load($comment->uid);
      if (isset($user->field_artwork[$lang][0]['nid'])) {
        $artwork = node_load($user->field_artwork[$lang][0]['nid']);
      }
      if (isset($artwork->field_artwork_image[$lang][0]['fid'])) {
        $variables['picture'] = _vaxia_create_avatar_image_link($artwork->field_artwork_image[$lang][0]['fid'], $user->name);
      }
      else {
        $variables['picture'] = 'NO IMAGE'; // DEFAULT OR NONE. TODO configure this.
      }
    }
  }
  // TODO ADD REPLACEMENT FOR ALL THROUGHOUT THE SITE. FORUMS TOO.
  // TODO REMOVE REGULAR PICTURE FEATURE UPDATE IN USER ADMIN
}

/**
 * Helper function, given a fid return the image link.
 */
function _vaxia_create_avatar_image_link($fid, $name) {
  $artwork_image = file_load($fid);
  $filepath = $artwork_image->uri;
  if (isset($filepath)) {
    $alt = t("@user's picture", array('@user' => $name));
    // If the image does not have a valid Drupal scheme (for eg. HTTP) don't load image styles.
    if (module_exists('image') && file_valid_uri($filepath) && $style = variable_get('user_picture_style', '')) {
      $picture = theme('image_style', array('style_name' => $style, 'path' => $filepath, 'alt' => $alt, 'title' => $alt));
    }
    else {
      $picture = theme('image', array('path' => $filepath, 'alt' => $alt, 'title' => $alt));
    }
    $attributes = array(
      'attributes' => array('title' => t('View user profile.')),
      'html' => TRUE,
    );
    return $picture;
  }
  else {
    return ''; // DEFAULT OR NONE. TODO configure this for default.
  }
}

/**
 * Implements hook_theme().
 *
 * Register themes used by this module.
 */
function vaxia_theme($existing, $type, $theme, $path) {
  return array(
    'vaxia_dice_roller' => array(
      'render element' => 'element',
      'function' => 'theme_vaxia_dice_roller',
    ),
  );
}

/**
 * Theme the dice roller.
 */
function theme_vaxia_dice_roller($element) {
  $element = $element['element'];
  $header = array( t('#'), t('d'), t('stat'), t('skill'), t('item') );
  $rows = array();
  $i = 0;
  if (isset($element['dice']) && is_array($element['dice'])) {
    foreach (element_children($element['dice']) as $dice) {
      $number = drupal_render($element['dice'][$i]['number']);
      $size = drupal_render($element['dice'][$i]['size']);
      $stat = drupal_render($element['dice'][$i]['stat']);
      $skill = drupal_render($element['dice'][$i]['skill']);
      $item = drupal_render($element['dice'][$i]['item']);
      $rows[] = array($number, $size, $stat, $skill, $item);
      $i++;
    }
  }
  if (!empty($rows)) {
    return theme('table', array('header' => $header, 'rows' => $rows)) . drupal_render($element['notes']);
  }
  else {
    return '';
  }
}

/**
 * Implements hook_form_alter().
 */
function vaxia_form_alter(&$form, &$form_state, $form_id) {
  if (!user_access('use dice roller')) {
    return; /* Exit if this user can't use the dice roller */
  }
  // If we're viewing a comment form, allow for user profile to set the character.
  if (substr($form_id, 0, 7) == 'comment' && isset($form['#node'])) {
    global $user;
    $this_player = user_load($user->uid);
    $lang = $form['language']['#value'];
    // Set character controls.
    if (isset($this_player->field_current_character[$lang][0]['nid'])) {
      $character = node_load($this_player->field_current_character[$lang][0]['nid']);
      $form['field_comment_character'][$lang]['#default_value'][0] = $character->nid;
    }
    $form['field_comment_character'][$lang]['#ajax'] = array(
      'callback' => '_vaxia_character_pick',
      'wrapper' => 'vaxia-dice-roller',
      'method' => 'replace',
      'effect' => 'fade',
    );
    // Set comment color controls.
    if (isset($this_player->field_comment_color[$lang][0]['safe_value'])) {
      $form['field_comment_color'][$lang][0]['value']['#default_value'] =
        $this_player->field_comment_color[$lang][0]['safe_value'];
    }
    // Set narrative checkbox access.
    if (!user_access('post in narrative format')) {
      $form['field_comment_narrative']['#access'] = FALSE;
    }
    // Add new fields.
    $form['uid'] = array(
      '#type' => 'hidden',
      '#value' => $this_player->uid,
    );
    $form['field_refresh_rate'] = array(
      '#type' => 'textfield',
      '#default_value' => isset($this_player->field_refresh_rate[$lang][0]['value']) ? $this_player->field_refresh_rate[$lang][0]['value'] : 60,
      '#title' => t('Refresh rate'),
    );
    $form['#submit'][] = '_vaxia_comment_set_profile_values_submit';
    $form['#submit'][] = '_vaxia_comment_add_kxp_submit';
  }
  return $form;
}

/**
 * Ajax callback for character selection.
 */
function _vaxia_character_pick($form, $form_state) {
  $roll_form = $form['vaxia_rolls'];
  return $roll_form;
}

/**
 * Additional submit handler for comment forms to set profile values for default.
 */
function _vaxia_comment_set_profile_values_submit($form, $form_state) {
  // Get the values from the comment submit handler.
  $lang = $form_state['values']['language'];
  $character = $form_state['values']['field_comment_character'][$lang][0]['nid'];
  $color = $form_state['values']['field_comment_color'][$lang][0]['value'];
  $refresh_rate = $form_state['values']['field_refresh_rate'];
  $uid = $form_state['values']['uid'];
  // Save them to the profile sheet.
  $this_player = user_load($uid);
  $this_player->field_current_character[$lang][0]['nid'] = $character;
  $this_player->field_comment_color[$lang][0]['value'] = $color;
  if (is_numeric($refresh_rate) && $refresh_rate > 4) {
    $this_player->field_refresh_rate[$lang][0]['value'] = $refresh_rate;
  }
  user_save($this_player);
}

/**
 * Additional submit handler to add kxp for commenting as a character, not narrative.
 */
function _vaxia_comment_add_kxp_submit($form, $form_state) {
  $lang = $form_state['values']['language'];
  // If posted as a character and not as narrative.
  if (!empty($form_state['values']['field_comment_character'][$lang][0]['nid']) 
    && $form_state['values']['field_comment_narrative'][$lang][0]['value'] == 0) {
    // The character gains XP per wordcount.
    $wordcount = str_word_count($form_state['values']['comment_body'][$lang][0]['value']);
    if (is_numeric($wordcount)) {
      _vaxia_add_xp($form_state['values']['field_comment_character'][$lang][0]['nid'], $wordcount, 'kxp');
    }  
  }
}

/**
 * Implements hook_rpg_chat_user_refresh().
 */
function vaxia_rpg_chat_user_refresh($refresh) {
  global $user;
  $this_player = user_load($user->uid);
  $lang = $this_player->language;
  $refresh = isset($this_player->field_refresh_rate[$lang][0]['value']) ? $this_player->field_refresh_rate[$lang][0]['value'] : 60;
  return $refresh;
}
