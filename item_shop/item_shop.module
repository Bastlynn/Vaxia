<?php
/**
 * @file
 * Code for the Item shop feature.
 */

include_once 'item_shop.features.inc';

/**
 * Implements hook_permission().
 */
function item_shop_permission() {
  return array(
    'use item shop' => array(
      'title' => t('use item shop'),
      'description' => t('Use item shop.'),
    ),
    'sellback item shop' => array(
      'title' => t('sellback item shop'),
      'description' => t('Sell items back to item shop.'),
    ),
    'set item for shop' => array(
      'title' => t('set item for shop'),
      'description' => t('Set item for shop.'),
    ),
    'administer item shop' => array(
      'title' => t('administer item shop'),
      'description' => t('Administer item shop.'),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function item_shop_menu_alter(&$items) {
  // Set a custom access callback function for our view page display path.
  $items['node/%/item_shop']['access callback'] = '_item_shop_access_callback';
}

/**
 * Implements hook_menu().
 */
function item_shop_menu() {
  $items['admin/vaxia/item_shop'] = array(
    'title' => 'Item shop configuration',
    'description' => 'Configure value percents for item handling',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_item_shop_admin_settings'),
    'access arguments' => array('administer item shop'),
  );
  return $items;
}

/**
 * Implementation of admin settings form.
 */
function _item_shop_admin_settings($form, &$form_state) {
  $form['item_shop_sellback'] = array(
    '#title' => t('Allow item shop sellback'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('item_shop_sellback', TRUE),
  );
  $form['item_shop_sellback_percentage'] = array(
    '#title' => t('Percent'),
    '#description' => t('Sellback percentage value'),
    '#type' => 'textfield',
    '#default_value' => variable_get('item_shop_sellback_percentage', 75),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_node_view().
 */
function item_shop_node_view($node, $view_mode, $langcode) {
  if (variable_get('item_shop_sellback', TRUE) == FALSE) {
    return;
  }
  if ($node->type == 'items' && user_access('sellback item shop')) {
    $character = node_load($node->field_character_owner[$node->language][0]['nid']);
    global $user;
    // Check if player's character owns the item, and other values are set.
    if ($character->uid == $user->uid &&
      !empty($node->field_value[$node->language][0]['value']) && is_numeric($node->field_value[$node->language][0]['value'])) {
      $node->content['my_additional_field'] = array(
        '#markup' => '<div class="sellback_shop">' . drupal_render(drupal_get_form('_item_shop_sellback_form', $node)) . '</div>',
        '#weight' => 1000,
      );
    }
  }
}

/**
 * Form to sellback items.
 */
function _item_shop_sellback_form($form, &$form_state, $node) {
  if (variable_get('item_shop_sellback', TRUE) == FALSE) {
    return $form;
  }
  $percentage = variable_get('item_shop_sellback_percentage', 75);
  $value = $node->field_value[$node->language][0]['value'];
  $value = $value * ($percentage / 100);
  $form['item_shop_sellback_help'] = array(
    '#markup' => '<div class="sellback_shop_help">' .
      t('%title may be automatically sold for %amount silver at %percent% of it\'s value.' .
      '</div>',
      array('%title' => $node->title, '%amount' => $value, '%percent' => $percentage)),
  );
  $form['item_shop_sellback_nid'] = array(
    '#type' => 'hidden',
    '#default_value' => $node->nid,
  );
  $form['item_shop_sellback'] = array(
    '#type' => 'submit',
    '#default_value' => t('Sell back @title', array('@title' => $node->title)),
  );
  return $form;
}

/**
 * Submit handler for form.
 */
function _item_shop_sellback_form_submit($form, &$form_state) {
  if (variable_get('item_shop_sellback', TRUE) == FALSE) {
    return $form;
  }
  global $user;
  $item = node_load($form_state['values']['item_shop_sellback_nid']);
  $value = isset($item->field_value[$item->language][0]['value']) ? $item->field_value[$item->language][0]['value'] : 0;
  if ($value > 0) {
    $percentage = variable_get('item_shop_sellback_percentage', 75);
    $value = $value * ($percentage / 100);
    $character = node_load($item->field_character_owner[$item->language][0]['nid']);
    if (isset($character->nid)) {
      // Remove the item from the sheet.
      $items = $character->field_items[$character->language];
      foreach ($items as $index => $item_nid) {
      	$item_nid = $item_nid['nid'];
        if ($item_nid == $item->nid) {
          drupal_set_message('Selling back item.');
		  // Add silver to the owning character.
		  _character_sheet_update_xp($character->nid, $value, 'silver');
		  $message = t('@xp silver added by System on selling back @title by @user.',
		    array('@xp' => $value, '@title' => $item->title, '@user' => $user->name));
		  _character_sheet_update_log($character->nid, 'silver', $message, $variables = array());
		  drupal_set_message(t('%value silver added to %title.', array('%value' => $value, '%title' => $character->title)));
          unset($character->field_items[$character->language][$index]);
		  node_save($character);
		  // Remove the sheet from the item.
		  $item->uid = 1; // Revert to admin ownership of the item.
		  unset($item->field_character_owner[$item->language][0]);
		  node_save($item);
        }
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function item_shop_module_implements_alter(&$implementations, $hook) {
  // When the implementations of hook_menu_alter are called, we need our module
  // to be called after views, so let's remove it from the implementations then
  // add it to the end.
  if ($hook == 'menu_alter') {
    if (isset($implementations['item_shop'])) {
      unset($implementations['item_shop']);
      $implementations['item_shop'] = FALSE;
    }
  }
}

/**
 * A custom 'access callback' function used by our view page display
 * to determine if its local task menu tab should show up or not.
 */
function _item_shop_access_callback($options = array()) {
  // Grab the default access callback function name, prepare the access
  // arguments, then see what the default access call back result is
  // according to views.
  $access_callback = $options[0];
  $access_arguments = $options[1];
  $access = call_user_func_array($access_callback, $access_arguments);
  // If the default access call back was false, then the user is not allowed
  // access.
  if (!$access) {
    return FALSE;
  }
  // So far the user is allowed access from the views' settings, let's now
  // determine if we want to customize the access to the tab.
  // If the node type is not an article, then we'll deny access, otherwise grant
  // access. 
  $node = node_load(arg(1));
  if ($node && $node->type != 'character_sheet') {
    return FALSE;
  }
  else {
    return TRUE; 
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function item_shop_form_views_form_item_shop_item_shop_alter(&$form, &$form_state, $form_id) {
  // Change text.
  $form['actions']['submit']['#value'] = t('Purchase items');
  // Change acess.
  global $user;
  $node = node_load(arg(1));
  if ($user->uid != $node->uid) {
    $form['actions']['submit']['#disabled'] = TRUE;
    $form['actions']['submit']['#value'] = t('This is not your character sheet');     
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function item_shop_form_items_node_form_alter(&$form, &$form_state, $form_id) {
  if (!user_access('set item for shop')) {
    $form['field_in_shop']['#access'] = FALSE;
    $form['field_in_shop']['#value'] = isset($form['field_in_shop']['#default_value']) ? $form['field_in_shop']['#default_value'] : 0;
  }
}

/**
 * Helper for views. Check if this character can afford this item.
 */
function item_shop_check_can_afford($nid) {
  // Get argument - character node.
  $character = node_load(arg(1));
  $lang = $character->language;
  // Get char from argument.
  $char = isset($character->nid) ? $character->nid : '';
  // Check values are ok.
  if (empty($char)) {
    return TRUE;
  }
  // Get realm from argument.
  $realm = isset($character->field_realm[$lang][0]['value']) ? $character->field_realm[$lang][0]['value'] : 'Vaxia';
  // Check values are ok.
  if (empty($realm)) {
    return TRUE;
  }
  // Get available silver from character.
  $silver = _character_sheet_get_xp($character->nid, 'silver');
  $silver_spent = _character_sheet_get_xp($character->nid, 'spent_silver');
  $silver_invested = _character_sheet_get_xp($character->nid, 'invest_silver');
  $available_silver = $silver - ($silver_spent + $silver_invested);
  // Available economy.
  $economy = isset($character->field_economy[$lang][0]['value']) ? $character->field_economy[$lang][0]['value'] : 0;
  $worth = _vaxia_calculate_worth($economy);
  // Grand total available.
  $total_worth = $available_silver + $worth;
  $silver = isset($total_worth) ? $total_worth : 0;
  // Check values are ok.
  if (empty($silver)) {
    return TRUE;
  }
  // Check the silver value for this item.
  $item = node_load($nid);
  $lang = $item->language;
  $this_value = $item->field_value[$lang][0]['value'];
  $this_value = str_replace(',', '', $this_value);
  $this_value = str_replace('.', '', $this_value);
  // Execute the checks.
  // If the code returns TRUE the current row is removed from the results.
  if (!is_numeric($this_value)) {
    return TRUE;
  }
  if ($silver < $this_value) {
    return TRUE;
  }
  $this_realm = isset($item->field_realm[$lang][0]['value']) ? $item->field_realm[$lang][0]['value'] : 'Vaxia';
  if ($realm != $this_realm) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Helper for views. Check if this character can afford this item.
 */
function item_shop_check_already_has($nid) {
  // Get argument - character node.
  $character = node_load(arg(1));
  $lang = $character->language;
  // Get items from character.
  $has_items = array();
  if (!empty($character->field_items[$lang]) && is_array($character->field_items[$lang])) {
    foreach ($character->field_items[$lang] as $info) {
      $this_item = node_load($info['nid']);
      $has_items[] = $this_item->title;
    }
  }
  // Execute the check.
  // If the code returns TRUE the current row is removed from the results.
  $item = node_load($nid);
  if (in_array($item->title, $has_items)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Helper for views.
 */
function _item_shop_show_footer() {
  // Get arguments.
  global $user;
  $node = node_load(arg(1));
  $output  = '';
  if ($user->uid == $node->uid) {
    // Grab the view, and load it with correct arguments.
    $lang = $node->language;
    $realm = isset($node->field_realm[$lang][0]['value']) ? $node->field_realm[$lang][0]['value'] : 'Vaxia';
    $economy = isset($node->field_economy[$lang][0]['value']) ? $node->field_economy[$lang][0]['value'] : 0;
    // Figure out the players silver and economic values.
    $silver = _character_sheet_get_xp($node->nid, 'silver');
    $silver_spent = _character_sheet_get_xp($node->nid, 'spent_silver');
    $silver_invested = _character_sheet_get_xp($node->nid, 'invest_silver');
    $available_silver = $silver - ($silver_spent + $silver_invested);
    // Available economy.
    $worth = _vaxia_calculate_worth($economy);
    // Grand total available.
    $total_worth = $available_silver + $worth;
    // Display.
    $output .= '</br>'. t('You have :silver available to spend.', array(':silver' => number_format($available_silver,2)));
    $output .= '</br>'. t('If you cash in your economy levels, you have an additional :worth silver available to spend.',
      array(':worth' => number_format($worth,2)));
    $output .= '</br>'. t('Your total worth including silver and economy is :total_worth silver.',
      array(':total_worth' => number_format($total_worth,2)));
  }
  print $output;
}