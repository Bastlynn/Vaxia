<?php
/**
 * @file
 * Code for the Vaxia feature.
 */

include_once('vaxia.features.inc');

include_once('vaxia.dice.inc');

include_once('vaxia.character_sheet.inc');

/**
 * Implements hook_permission().
 */
function vaxia_permission() {
  return array(
    'change art owner'=> array(
      'title' => t('change art owner'),
      'description' => t('Change the owner of art.'),
    ),
    'change item owner'=> array(
      'title' => t('change item owner'),
      'description' => t('Change the owner of an item.'),
    ),
    'post in narrative format' => array(
      'title' => t('post in narrative format'),
      'description' => t('Post in narrative format.'),
    ),
    'transfer rxp' => array(
      'title' => t('transfer rxp'),
      'description' => t('Transfer RXP of your own sheets.'),
    ),
    'transfer others sheets' => array(
      'title' => t('transfer others sheets'),
      'description' => t('Transfer the XP of others sheets.'),
    ),
    'create SHs' => array(
      'title' => t('create SHs'),
      'description' => t('Create SHs for running games.'),
    ),
    'create NPCs' => array(
      'title' => t('create NPCs'),
      'description' => t('Create NPCs for posting.'),
    ),
    'create open NPCs' => array(
      'title' => t('create open NPCs'),
      'description' => t('Create open NPCs for posting.'),
    ),
    'use NPCs' => array(
      'title' => t('use NPCs'),
      'description' => t('Use NPCs for posting.'),
    ),
    'edit SH notes' => array(
      'title' => t('edit SH notes'),
      'description' => t('Edit SH notes.'),
    ),
//    'edit own SH notes' => array(
//      'title' => t('edit own SH notes'),
//      'description' => t('Edit own SH notes.'),
//    ),
    'edit private SH notes' => array(
      'title' => t('edit private SH notes'),
      'description' => t('Edit private SH notes.'),
    ),
//    'edit own private SH notes' => array(
//      'title' => t('edit own private SH notes'),
//      'description' => t('Edit own private SH notes.'),
//    ),
  );
}

/**
 * Implements hook_menu().
 */
function vaxia_menu() {
  $items['node/%node/v_ownership'] = array(
    'title' => 'Ownership',
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_vaxia_menu_ownership_access_callback',
    'access arguments' => array(1),
    'page callback' => '_vaxia_ownership',
    'page arguments' => array(1),
    'weight' => 3,
  );
  $items['vaxia/transfer_xp'] = array(
    'title' => 'Transfer XP autocomplete',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'page callback' => '_vaxia_transfer_xp_autocomplete',
  );
  $items['vaxia/dice_proof'] = array(
    'title' => 'Vaxia diceroller',
    'access arguments' => array('view dice rolls'),
    'page callback' => '_vaxia_dice_proof',
  );
  return $items;
}

/**
 * Implements hook_rules_event_info().
 */
function vaxia_rules_event_info() {
  $items = array(
    'vaxia_gain_kxp' => array(
      'label' => t('Vaxia gain kxp'),
      'group' => t('Vaxia'),
      'variables' => array(
        'user' => array(
            'type' => 'user',
            'label' => t('Player'),
        ),
        'character' => array(
            'type' => 'node',
            'label' => t('Character'),
        ),
        'location' => array(
            'type' => 'node',
            'label' => t('Location'),
        ),
        'xp_amount' => array(
            'type' => 'integer',
            'label' => t('XP Amount'),
         ),
      ),
    ),
    'vaxia_gain_xp' => array(
      'label' => t('Vaxia gain xp'),
      'group' => t('Vaxia'),
      'variables' => array(
        'user' => array(
            'type' => 'user',
            'label' => t('Player'),
        ),
        'character' => array(
            'type' => 'node',
            'label' => t('Character'),
        ),
        'xp_amount' => array(
            'type' => 'integer',
            'label' => t('XP Amount'),
         ),
        'xp_type' => array(
            'type' => 'text',
            'label' => t('XP type'),
         ),
      ),
    ),
  );
  return $items;
}

/**
* Implements hook_cron_queue_info().
*/
function vaxia_cron_queue_info() {
  $queues = array();
  $queues['vaxiaSilverQueue'] = array(
    'worker callback' => '_vaxia_character_daily_silver',
    'time' => 60,
  );
  return $queues;
}

/**
 * Implements hook_cron().
 */
function vaxia_cron() {
  $last_run = variable_get('vaxia_character_sheet_cron', 0);
  $yesterday = strtotime('-1 day');
  if ($last_run < $yesterday) {
    $queue = DrupalQueue::get('vaxiaSilverQueue');
    $last_run = variable_set('vaxia_character_sheet_cron', strtotime('now'));
    // On cron. Go through ALL character sheets.
    // Using this query to make swure we don't load anything we really don't need to.
    // So only nodes that have an economy and exist.
    $sheets = db_query('SELECT n.nid FROM {field_data_field_economy} e ' . // With an economy value
      'LEFT JOIN {node} n ON e.entity_id = n.nid AND e.revision_id = n.vid ' .
      'WHERE n.status = 1 ' . // Active character sheet
      'AND n.nid NOT IN (' .
      'SELECT npc.entity_id FROM {field_data_field_is_npc} npc WHERE npc.field_is_npc_value = 1' . // Not an NPC
      ')'.
      'AND n.nid NOT IN (' .
      'SELECT onpc.entity_id FROM {field_data_field_is_open_npc} onpc WHERE onpc.field_is_open_npc_value = 1' . // Not an open NPC
      ')');
    foreach ($sheets as $node_data) {
      $item = array(
        'nid' => $node_data->nid
      );
      $queue->createItem($item);
    }
  }
}

/**
 * Helper function, calculate money for economy on cron.
 */
function _vaxia_character_daily_silver($node_data) {
  // For each sheet, calculate money to add based on the economy level.
  $node = node_load($node_data['nid']);
  if (_character_sheet_is_enabled($node) && _character_sheet_is_playable($node)) {
    $level = isset($node->field_economy[$node->language][0]['value']) ?
      $node->field_economy[$node->language][0]['value'] : 0;
    $silver = _character_sheet_get_xp($node->nid, 'silver');
    $silver_spent = _character_sheet_get_xp($node->nid, 'spent_silver');
    $silver_invested = _character_sheet_get_xp($node->nid, 'invest_silver');
    $available_silver = $silver - ($silver_spent + $silver_invested);
    $income = _vaxia_get_month_income($level);
    $daily = _vaxia_get_daily_pay($level);
    // If silver on hand > income reduce it by daily pay, else add it.
    if ($available_silver > $income) {
      // Reduce silver.
      _character_sheet_update_xp($node->nid, $daily * -1, 'silver');
      watchdog('vaxia_slv', 'Removed ' . $daily .' to # '. $node->nid . ' ' . $node->title);
    }
    else {
      // Add silver.
      _character_sheet_update_xp($node->nid, $daily, 'silver');
      watchdog('vaxia_slv', 'Added ' . $daily .' to # '. $node->nid . ' ' . $node->title);
    }
  }
}

/**
 * Menu access callback.
 */
function _vaxia_menu_ownership_access_callback($node) {
  $vaxia_ownership_managed = array('artwork', 'item');
  if (in_array($node->type, $vaxia_ownership_managed)) {
    global $user;
    if ((user_access('change art owner') || user_access('change item owner'))
      || ($user->uid == $node->uid && 
        (user_access('edit any ' . $node->type . ' content')
          || user_access('edit own ' . $node->type . ' content')))) {
      return TRUE;
    }
    return FALSE;
  }
}

/**
 * Menu callback, transfer ownership pages for items and artwork.
 */
function _vaxia_ownership($node) {
  return drupal_get_form('_vaxia_change_ownership_form', $node);
}

/*
 * Implements hook_node_view().
 */
function vaxia_node_view($node, $view_mode, $langcode) {
  // If node is a character sheet.
  if (_character_sheet_is_enabled($node)) {
    unset($node->content['character_sheet_log']);
    global $user;
    // Disable all the fields from view if you're not the owner.
    if (!($user->uid == $node->uid || user_access('edit SH notes'))) {
      $display = array('field_description', 'field_age_app', 'field_sex', 'field_race',
        'field_appearance', 'field_charisma', 'field_presence');
      foreach ($node->content as $index => $value) {
        if (strpos($index, '#') === FALSE && !in_array($index, $display)) {
          unset($node->content[$index]);
        }
      }
    }
    // Disable the private note if you can't edit it or not your char.
    if (!($user->uid == $node->uid || user_access('edit SH notes'))) {
      unset($node->content['field_sh_notes']);
    }
    // Hide the private note if you can't edit it. Can't see your own.
    if (!($user->uid != $node->uid && user_access('edit private SH notes'))) {
      unset($node->content['field_sh_private_notes']);
    }
    // Hide the private note if you can't edit it.
    if (!($user->uid == $node->uid || user_access('edit SH notes'))) {
      unset($node->content['field_player_notes']);
    }
  }
  // If node is an RPG chatroom, add the js for additional behaviors.
  if ($node->type == 'rpg_chatroom') {
    drupal_add_js( drupal_get_path('module', 'vaxia') . '/js/vaxia.js' );
  }
}

/*
 * Implements hook_node_update().
 */
function vaxia_node_update($node) {
  if (_character_sheet_is_enabled($node)) {
    // Flush Entity Cache record.
    if (module_exists('entitycache')) {
      cache_clear_all('*', 'cache_entity_node', TRUE);
    }
  }
}

/**
 * Implements hook_workflow().
 */
function vaxia_workflow($op, $old_state, $new_state, $node, $force = FALSE) {
  switch ($op) {
    case 'transition post';
      // Flush Entity Cache record.
      if (module_exists('entitycache')) {
        cache_clear_all('*', 'cache_entity_node', TRUE);
      }
    break;
  }
}

/*
 * Form callback function from nodeapi view, adds moderation form to node display.
 */
function _vaxia_change_ownership_form($form, &$form_state, $node) {
  $context['owner_uid'] = $node->uid;
  $form = node_assign_owner_action_form($context);
  // From node.module, generate an ownership form.
  $form['owner_name']['#title'] = t('Owner');
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update ownership'),
  );
  return $form;
}

/*
 * Form callback validation for _vaxia_change_ownership_form.
 */
function _vaxia_change_ownership_form_validate($form, $form_state) {
  $count = db_query('SELECT COUNT(*) FROM {users} WHERE name = :name',
    array(':name' => $form_state['values']['owner_name']))->fetchField();
  if (intval($count) != 1) {
    form_set_error('owner_name', t('Please enter a valid username.'));
  }
}

/*
 * Form callback submission for _vaxia_change_ownership_form.
 */
function _vaxia_change_ownership_form_submit($form, $form_state) {
  $values = $form_state['values'];
  $node = node_load($values['nid']);
  global $user;
  if (!empty($node) && user_access('change art owner') || ($user->uid == $node->uid && 
      (user_access('edit any ' . $node->type . ' content') || user_access('edit own ' . $node->type . ' content'))
    )) {
    $uid = db_query("SELECT uid from {users} WHERE name = :name", array(':name' => $values['owner_name']))->fetchField();
    if (!empty($uid)) {
      $node->uid = $uid;
    }
    node_save($node);
  }
}

/**
 * Implements process suggestion for comment theme. This allows us to override parts of the comment form.
 */
function vaxia_process_comment(&$variables) {

  // Update the user image for submission to no image.
  $comment = $variables['comment'];
  $lang = $comment->language;
  // Check for user profile settings.
  $user = user_load($comment->uid);
  $variables['picture'] = _vaxia_create_avatar_image_link(-1, $user->name);
  if (isset($user->field_artwork[$lang][0]['nid'])) {
    $artwork = node_load($user->field_artwork[$lang][0]['nid']);
    if (isset($artwork->field_artwork_image[$lang][0]['fid'])) {
      $variables['picture'] = _vaxia_create_avatar_image_link(
        $artwork->field_artwork_image[$lang][0]['fid'], $user->name);
    }
  }
  // If not, fall back to the commment itself.
  if (isset($comment->field_artwork[$lang][0]['nid'])) {
    $artwork = node_load($comment->field_artwork[$lang][0]['nid']);
    if (isset($artwork->field_artwork_image[$lang][0]['fid'])) {
      $variables['picture'] = _vaxia_create_avatar_image_link(
        $artwork->field_artwork_image[$lang][0]['fid'], $user->name);
    }
  }

  // Check for character type only on RPG type nodes. (and do some other work as well on RPG chat nodes)
  if (_rpg_chat_is_enabled($variables['node']->type)) {
    // Add the variables for our narrative and colors.
    if(isset($comment->field_comment_narrative[$lang][0]['value'])
      && ($comment->field_comment_narrative[$lang][0]['value'] == 1) ) {
      $variables['classes'] .= ' rpg-chat-narrative';
    }
    // Add the style attribute for our content color.
    if (isset($comment->field_comment_color[$lang][0]['value'])) {
      $color = strtolower(trim($comment->field_comment_color[$lang][0]['value']));
      $color = PREG_REPLACE("/[^0-9a-z]/i", '', $color); // Filter non-alphanumeric out.
      $color_codes = array('aqua', 'black', 'blue', 'fuchsia', 'gray', 'green', 'lime', 'maroon',
        'navy', 'olive', 'purple', 'red', 'silver', 'teal', 'white', 'yellow');
      if (!in_array($color, $color_codes)) {
        $color = '#'. $color;
      }
      $variables['content']['comment_body']['#prefix'] = '<span style="color:' . $color . '">';
      $variables['content']['comment_body']['#suffix'] = '</span>';
    }
  }

  // Apply picture rules to All node types.
  // Redo the submitted field for RPG chatrooms only.
  $variables['submitted'] = t('!username </br> !datetime',
    array('!username' => $variables['author'], '!datetime' => $variables['created']));
  // Now check for user pictures again.
  // Good thing node_load caches else calling this for Every Comment would get really ugly.
  if (isset($comment->field_comment_character[$lang][0]['nid'])) {
    $character = node_load($comment->field_comment_character[$lang][0]['nid']);
    if (isset($character->nid)) {
      $character_name = $character->title;
      // Set character title to name.
      if (isset($character->field_titles[$lang][0]['value'])) {
        $character_name = $character->field_titles[$lang][0]['value'] .' ' . $character_name;
      } 
      // Set character last name.
      if (isset($character->field_last_name[$lang][0]['value'])) {
        $character_name .= ' ' . $character->field_last_name[$lang][0]['value'];
      }
      // Set the submitted variable with the updated character name.
      global $base_url;
      $variables['submitted'] = t('!username </br> !datetime',
        array('!username' => l($character_name, 'node/' . $character->nid), '!datetime' => $variables['created']));

      // Set the character picture.
      $alt = t('Presence: @pre, Charisma: @char, Appearance: @app',
        array('@pre' => $character->field_presence[$lang][0]['value'],
          '@char' => $character->field_charisma[$lang][0]['value'],
          '@app' => $character->field_appearance[$lang][0]['value']));
      $link_options = array('html' => TRUE, 'attributes' => array('target' => '_blank'));
      $variables['picture'] = l( _vaxia_create_avatar_image_link(-1, $character_name, $alt), 'node/' . $character->nid, $link_options);
      // Check first against the selected comment, it should by default be the character selected on load.
      // If not, fall back to the character itself.
      if (isset($comment->field_artwork[$lang][0]['nid'])) {
        $artwork = node_load($comment->field_artwork[$lang][0]['nid']);
        if (isset($artwork->field_artwork_image[$lang][0]['fid'])) {
          $variables['picture'] = l( _vaxia_create_avatar_image_link(
            $artwork->field_artwork_image[$lang][0]['fid'], $character->title, $alt), 'node/' . $character->nid, $link_options);
        }
      }
    }
  }
}

/**
 * Helper function, given a fid return the image link.
 */
function _vaxia_create_avatar_image_link($fid, $name, $alt = '') {
  $artwork_image = file_load($fid);
  $default_filepath = drupal_get_path('module', 'vaxia').'/images/vaxialogo.gif';
  $filepath = isset($artwork_image->uri) ? $artwork_image->uri : $default_filepath;
  if (isset($filepath)) {
    if (empty($alt)) {
      $alt = t("@user's picture.", array('@user' => $name));
    }
    // If the image does not have a valid Drupal scheme (for eg. HTTP) don't load image styles.
    if (module_exists('image') && file_valid_uri($filepath) 
      && $style = variable_get('user_picture_style', '')) {
      $picture = theme('image_style',
        array('style_name' => $style, 'path' => $filepath, 'alt' => $alt, 'title' => $alt));
    }
    else {
      $picture = theme('image', array('path' => $filepath, 'alt' => $alt, 'title' => $alt));
    }
    $attributes = array(
      'attributes' => array('title' => t('View profile.')),
      'html' => TRUE,
    );
    return $picture;
  }
}

/**
 * Implements hook_theme().
 *
 * Register themes used by this module.
 */
function vaxia_theme($existing, $type, $theme, $path) {
  return array(
    'vaxia_dice_roller' => array(
      'render element' => 'element',
      'function' => 'theme_vaxia_dice_roller',
    ),
  );
}

/**
 * Theme the dice roller.
 */
function theme_vaxia_dice_roller($element) {
  $element = $element['element'];
  $header = array( t('#'), t('d'), t('stat'), t('skill'));
  $rows = array();
  $i = 0;
  if (isset($element['dice']) && is_array($element['dice'])) {
    foreach (element_children($element['dice']) as $dice) {
      $number = drupal_render($element['dice'][$i]['number']);
      $size = drupal_render($element['dice'][$i]['size']);
      $stat = drupal_render($element['dice'][$i]['stat']);
      $skill = drupal_render($element['dice'][$i]['skill']);
      $rows[] = array($number, $size, $stat, $skill);
      $i++;
    }
  }
  if (!empty($rows)) {
    return theme('table', array('header' => $header, 'rows' => $rows))
      . drupal_render($element['items'])
      . drupal_render($element['notes']);
  }
  else {
    return '';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vaxia_form_character_sheet_node_form_alter(&$form, &$form_state, $form_id) {
  $node = isset($form['#node']) ? $form['#node'] : '';
  if (_character_sheet_is_enabled($node) && _character_sheet_is_playable($node)) {
    $disabled = FALSE;
    $lang = $form['field_is_npc']['#language'];
    if (isset($form['field_is_npc'][$lang]['#default_value']) && $form['field_is_npc'][$lang]['#default_value'] == TRUE) {
      $disabled = TRUE;
    }
    $lang = $form['field_is_open_npc']['#language'];
    if (isset($form['field_is_open_npc'][$lang]['#default_value']) && $form['field_is_open_npc'][$lang]['#default_value'] == TRUE) {
      $disabled = TRUE;
    }
    if ($disabled) {
      $allowed_edit = array('field_age_app', 'field_background', 'field_personality', 'field_description', 'field_occupation',
        'field_last_name', 'field_titles', 'field_is_open_npc', 'field_race', 'field_sex', 'field_age_real',
        'field_character_owner', 'field_sh_notes', 'field_sh_private_notes', 'field_player_notes');
      foreach (element_children($form) as $child) {
        if ((strpos($child, 'field_') === 0 || $child == 'title') && !in_array($child, $allowed_edit)) {
          $form[$child]['#disabled'] = TRUE;
        }
      }
      drupal_set_message('You are attempting to edit an NPC that has already been approved for play. NPC numbers cannot be further edited ' .
        'after approval. Please revert this NPC to draft, and take it through the approval process again if you need to update numbers.');
    }
  }
  $form['#after_build'][] = '_vaxia_node_form_workflow_after_build';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vaxia_form_items_node_form_alter(&$form, &$form_state, $form_id) {
  $node = isset($form['#node']) ? $form['#node'] : '';
  if (empty($node->clone_from_original_nid) && isset($node->workflow) && ($node->workflow_state_name == t('approved') || $node->workflow == 4)) {
    $allowed_edit = array('field_item_desc', 'field_item_history',
      'field_character_owner', 'field_sh_notes', 'field_sh_private_notes', 'field_player_notes');
    foreach (element_children($form) as $child) {
      if ((strpos($child, 'field_') === 0 || $child == 'title') && !in_array($child, $allowed_edit)) {
        $form[$child]['#disabled'] = TRUE;
      }
    }
    drupal_set_message('You are attempting to edit an Item that has already been approved for play. Item numbers cannot be further edited ' .
      'after approval. Please revert this Item to draft, and take it through the approval process again if you need to update numbers.');
  }
  $form['#after_build'][] = '_vaxia_node_form_workflow_after_build';
}

/**
 * Implements form after build.
 */
function _vaxia_node_form_workflow_after_build($form, $form_state) {
  global $user;
  $node = isset($form['#node']) ? $form['#node'] : '';
  if (!empty($form['#wf']->name) && !empty($node) && $user->uid == $node->uid) {
    if ($node->type == 'character_sheet' || $node->type == 'items') {
      $workflow_name = $form['#wf']->name;
      $options = $form['workflow'][$workflow_name]['#options'];
      $index = array_search('approved', $options);
      if ($index !== FALSE && $index != $node->workflow) {
        drupal_set_message(t('You own this node, you cannot set it to approved. Currently: ' . $node->workflow_state_name));
        unset($options[$index]);
        unset($form['workflow'][$workflow_name][$index]);
        $form['workflow'][$workflow_name]['#options'] = $options;
        $form['workflow'][$workflow_name]['#default_value'] = $node->workflow;
      }
    }
  }
  if ($node->type == 'items') {
    $lang = $node->language;
    $character_owner = isset($node->field_character_owner[$lang][0]['nid'])
      ? node_load($node->field_character_owner[$lang][0]['nid']) : FALSE;
    if ($character_owner && !empty($form['#wf']->name) && !empty($node) && $user->uid == $character_owner->uid) {
      $workflow_name = $form['#wf']->name;
      $options = $form['workflow'][$workflow_name]['#options'];
      $index = array_search('approved', $options);
      if ($index !== FALSE && $index != $node->workflow) {
        drupal_set_message(t('You own the character that owns this item, you cannot set it to approved. ' .
          'Currently: ' . $node->workflow_state_name));
        unset($options[$index]);
        unset($form['workflow'][$workflow_name][$index]);
        $form['workflow'][$workflow_name]['#options'] = $options;
        $form['workflow'][$workflow_name]['#default_value'] = $node->workflow;
      }
    }
  }
  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vaxia_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $form['picture']['picture_delete']['#access'] = FALSE;
  $form['picture']['picture_upload']['#access'] = FALSE;
  $form['picture']['field_artwork'] = $form['field_artwork'];
  unset($form['field_artwork']);
  $form['field_comment_color']['#access'] = FALSE;
  $form['field_current_character']['#access'] = FALSE;
  $form['field_refresh_rate']['#access'] = FALSE;
  $form['field_took_ash1']['#access'] = FALSE;
  $form['field_took_ash2']['#access'] = FALSE;
  $form['field_took_ash3']['#access'] = FALSE;
  $form['field_became_sh']['#access'] = FALSE;
  $form['field_xp_over_time']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vaxia_form_workflow_tab_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $node = isset($form['node']['#value']) ? $form['node']['#value'] : '';
  if (!empty($node) && $user->uid == $node->uid) {
    if ($node->type == 'character_sheet') {
      $workflow_name = $form['#wf']->name;
      $options = $form['workflow'][$workflow_name]['#options'];
      $index = array_search('approved', $options);
      if ($index !== FALSE && $index != $node->workflow) {
        drupal_set_message(t('You own this node, you cannot set it to approved. Currently: ' . $node->workflow_state_name));
        unset($options[$index]);
        $form['workflow'][$workflow_name]['#options'] = $options;
        $form['workflow'][$workflow_name]['#default_value'] = $node->workflow;
      }
    }
  }
  if ($node->type == 'items') {
    $lang = $node->language;
    $character_owner = isset($node->field_character_owner[$lang][0]['nid'])
      ? node_load($node->field_character_owner[$lang][0]['nid']) : FALSE;
    if ($character_owner && !empty($form['#wf']->name) && !empty($node) && $user->uid == $character_owner->uid) {
      $workflow_name = $form['#wf']->name;
      $options = $form['workflow'][$workflow_name]['#options'];
      $index = array_search('approved', $options);
      if ($index !== FALSE && $index != $node->workflow) {
        drupal_set_message(t('You own the character that owns this item, you cannot set it to approved. ' .
          'Currently: ' . $node->workflow_state_name));
        unset($options[$index]);
        unset($form['workflow'][$workflow_name][$index]);
        $form['workflow'][$workflow_name]['#options'] = $options;
        $form['workflow'][$workflow_name]['#default_value'] = $node->workflow;
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function vaxia_form_alter(&$form, &$form_state, $form_id) {
  // If we're viewing a comment form, allow for user profile to set RPG chat additional fields.
  if (substr($form_id, 0, 7) == 'comment' && isset($form['#node'])) {
    $type = $form['#node']->type;
    if (!_rpg_chat_is_enabled($type)) {
      return;
    }
    global $user;
    $this_player = user_load($user->uid);
    $lang = $form['language']['#value'];
    // Set character controls.
    if (isset($this_player->field_current_character[$lang][0]['nid'])) {
      $character = node_load($this_player->field_current_character[$lang][0]['nid']);
      if (isset($character->title)) {
        $form['field_comment_character'][$lang]['#default_value'][0] = $character->nid;
        if (isset($character->field_artwork[$lang][0]['nid'])) {
          $form['field_artwork'][$lang]['#default_value'][0] = $character->field_artwork[$lang][0]['nid'];
        }
        $kxp = _character_sheet_get_xp($character->nid, 'kxp');
        $xp = _character_sheet_get_xp($character->nid, 'xp');
        $spent_xp = _character_sheet_get_xp($character->nid, 'spent_xp');
        
        $form['field_comment_character'][$lang]['#description'] = $kxp . ' / 70 KXP, ' . ($xp - $spent_xp) . ' XP';
      }
    }
    else {
      if (isset($this_player->field_artwork[$lang][0]['nid'])) {
        $form['field_artwork'][$lang]['#default_value'][0] = $this_player->field_artwork[$lang][0]['nid'];
      }
    }
    $limbo_room = variable_get('vaxia_limbo_room', array());
    if (!in_array($form['#node']->nid, $limbo_room)) {
      $options = $form['field_comment_character'][$lang]['#options'];
      $options = array_diff($options, array('_none' => '- None -'));
      $form['field_comment_character'][$lang]['#options'] = $options;
    }
    $form['field_comment_character'][$lang]['#ajax'] = array(
      'callback' => '_vaxia_character_pick',
      'wrapper' => 'vaxia-dice-roller',
      'method' => 'replace',
      'effect' => 'fade',
    );
    // Set comment color controls.
    if (isset($this_player->field_comment_color[$lang][0]['safe_value'])) {
      $form['field_comment_color'][$lang][0]['value']['#default_value'] =
        $this_player->field_comment_color[$lang][0]['safe_value'];
    }
    // Set narrative checkbox access.
    if (!user_access('post in narrative format')) {
      $form['field_comment_narrative'][$lang]['#value'] = 0;
      $form['field_comment_narrative'][$lang]['#access'] = FALSE;
      $form['field_comment_narrative'][$lang]['#type'] = 'hidden';
    }
    // Add new fields.
    $form['field_refresh_rate'] = array(
      '#type' => 'hidden',
      '#default_value' => isset($this_player->field_refresh_rate[$lang][0]['value']) ?
        $this_player->field_refresh_rate[$lang][0]['value'] : 30,
      '#size' => 6,
      '#title' => t('Refresh rate'),
      '#weight' => 6,
    );
    $form['uid'] = array(
      '#type' => 'hidden',
      '#value' => $this_player->uid,
    );
    $form['actions']['submit']['#value'] = t('Post');
    $form['#submit'][] = '_vaxia_comment_set_profile_values_submit';
    $form['#submit'][] = '_vaxia_comment_add_kxp_submit';
    $form['#submit'][] = '_vaxia_comment_redirect_submit';
    $new_post = $form['actions']['submit'];
    $new_post['#weight'] = -10;
    array_unshift($form, $new_post);
    $new_refresh = $form['actions']['refresh_chat'];
    $new_refresh['#weight'] = -11;
    array_unshift($form, $new_refresh);
  }
  return $form;
}

/**
 * Ajax callback for character selection.
 */
function _vaxia_character_pick($form, $form_state) {
  $roll_form = $form['vaxia_rolls'];
  return $roll_form;
}

/**
 * Additional submit handler for comment forms to set profile values for default.
 */
function _vaxia_comment_set_profile_values_submit($form, $form_state) {
  // Get the values from the comment submit handler.
  $lang = $form_state['values']['language'];
  $character = $form_state['values']['field_comment_character'][$lang][0]['nid'];
  $artwork = $form_state['values']['field_artwork'][$lang][0]['nid'];
  $color = $form_state['values']['field_comment_color'][$lang][0]['value'];
  $refresh_rate = $form_state['values']['field_refresh_rate'];
  $uid = $form_state['values']['uid'];
  // Save them to the profile sheet.
  $this_player = user_load($uid);
  $this_player->field_current_character[$lang][0]['nid'] = $character;
  $this_player->field_comment_color[$lang][0]['value'] = $color;
  $this_player->field_artwork[$lang][0]['nid'] = $artwork;
  if (is_numeric($refresh_rate) && $refresh_rate > 4) {
    $this_player->field_refresh_rate[$lang][0]['value'] = $refresh_rate;
  }
  user_save($this_player);
}

/**
 * Additional submit handler to add kxp for commenting as a character, not narrative.
 */
function _vaxia_comment_add_kxp_submit($form, $form_state) {
  $limbo_room = variable_get('vaxia_limbo_room', array());
  if (in_array($form['#node']->nid, $limbo_room)) {
    return;
  }
  $lang = $form_state['values']['language'];
  // If posted as a character and not as narrative.
  if (!empty($form_state['values']['field_comment_character'][$lang][0]['nid']) ) {
    if (!empty($form['cid']['#value'])) {
      drupal_set_message('Editting an existing comment - no kxp will be awarded.');
      return;
    }
    // The character gains XP per wordcount.
    $wordcount = strlen($form_state['values']['comment_body'][$lang][0]['value']);
    if (is_numeric($wordcount)) {
      //$kxp = floor( $wordcount / variable_get('vaxia_kxp_per_words', 20) );
      $kxp = (81.6) * ( exp( (0.00008) * ($wordcount)) - 1 );
      $kxp = substr($kxp, 0, 4);
      $max_kxp = variable_get('vaxia_max_kxp_post', 10);
      $kxp = $kxp <= $max_kxp ? $kxp : $max_kxp;
      $character = node_load($form_state['values']['field_comment_character'][$lang][0]['nid']);
      // Posting with an NPC? Mark the XP to the SH character.
      if ($character->field_is_npc[$character->language][0]['value'] == 1 
        || $character->field_is_open_npc[$character->language][0]['value'] == 1) {
        global $user;
        $sh_characters = _vaxia_get_SH_characters($user->uid);
        foreach ($sh_characters as $nid => $sh_character) {
          $character = $sh_character;
        }
      }
      // Mark the XP.
      if ($character->type == 'character_sheet') {
        _vaxia_add_xp($character->nid, $kxp, 'kxp');
        if (function_exists('rules_invoke_event')) {
          $player = user_load($character->uid);
          $location = $form['#node'];
          rules_invoke_event('vaxia_gain_xp', $player, $character, $location, $kxp, 'kxp');
        }
      }
    }  
  }
}

/**
 * Redirection submit handler to clip the anchor.
 */
function _vaxia_comment_redirect_submit($form, &$form_state) {
  $form_state['redirect'] = 'node/' . $form_state['values']['nid'];
}

/**
 * Implements hook_rpg_chat_user_refresh().
 */
function vaxia_rpg_chat_user_refresh($refresh) {
  global $user;
  $this_player = user_load($user->uid);
  $lang = $this_player->language;
  $refresh = isset($this_player->field_refresh_rate[$lang][0]['value']) ?
    $this_player->field_refresh_rate[$lang][0]['value'] : 60;
  return $refresh;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vaxia_form_comment_form_alter(array &$form, array &$form_state) {
  // Disable the extra box on comment forms.
  $form['author']['subscriptions_notify']['#access'] = FALSE;
}

/**
 * Menu callback.
 */
function _vaxia_dice_proof() {
  // Given dice patterns in the past, provide a page to analyze the dice rolled to date and calculate results as proof.
  $dice_rolls = db_query('SELECT roll_result FROM {dice_roller} WHERE roll_command LIKE :rolls', array(':rolls' => '1d100%'));
  $roll_set = array();
  $count = 0;
  $average = 0;
  foreach ($dice_rolls as $dice_roll) {
    $result = explode('=', $dice_roll->roll_result);
    $rolls = explode(',', $result[0]);
    $roll = trim($rolls[0]);
    if (is_numeric($roll)) {
      $count++;
      $average += $roll;
      if (!isset($roll_set[$roll])) {
        $roll_set[$roll] = 0;
      }
      $roll_set[$roll]++;
    }
  }
  $average = $average / $count;
  // Display.
  $output = '<style>';
  $output .= '.dice_proof_row{}';
  $output .= '.dice_proof_label{padding-left:0.5em;}';
  $output .= '.dice_proof_average{border-right:solid 1px #111;display:block;}';
  $output .= '.dice_proof_value{background:green;display:block;}';
  $output .= '</style>';
  $output .= '<div class="dice_proof_title">Across ' . $count . ' Rolls:</div>';
  $counts = array_sum($roll_set) / 100;
  $cut = $counts > 100 ? $counts / 2 : 0;
  $mark = $counts - $cut;
  for ($n = 1; $n < 101; $n++) {
    if (!isset($roll_set[$n])) {
      $roll_set[$n] = 0;
    }
    $width = $roll_set[$n] - $cut;
    $output .= '<div>' .
      '<span class="dice_proof_value" style="width:' . $width . 'em;">' .
      '  <span class="dice_proof_average" style="width:' . $mark . 'em;">&nbsp;' .
      '    <span class="dice_proof_label">' . $n .
      '    </span>' .
      '  </span>' .
      '</span>' .
      '</div>';
  }
  $output .= '<div class="dice_proof_title">Expected mathematical average of all rolls: 50 / 51</div>';
  $output .= '<div class="dice_proof_title">Actual mathematical average of all rolls: ' . $average . '</div>';
  return $output;
}

/**
 * Helper function, retrieve SH information from player.
 */
function _vaxia_get_SH_characters($uid) {
  $character_nids = array();
  $nodes = node_load_multiple(array(), array('type' => 'character_sheet', 'uid' => $uid));
  foreach ($nodes as $nid => $node) {
    if ($node->field_is_storyteller[$node->language][0]['value'] == 1) {
      $character_nids[$nid] = $node;
    }
  }
  return $character_nids;
}