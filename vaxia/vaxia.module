<?php
/**
 * @file
 * Code for the Vaxia feature.
 */

include_once('vaxia.features.inc');

include_once('vaxia.dice.inc');

include_once('vaxia.character_sheet.inc');

/**
 * Implements hook_permission().
 */
function vaxia_permission() {
  return array(
    'post in narrative format' => array(
      'title' => t('post in narrative format'),
      'description' => t('Post in narrative format.'),
    ),
    'transfer rxp' => array(
      'title' => t('transfer rxp'),
      'description' => t('Transfer RXP of your own sheets.'),
    ),
    'use SH dice options' => array(
      'title' => t('use SH dice options'),
      'description' => t('Use SH dice options.'),
    ),
    'transfer others sheets' => array(
      'title' => t('transfer others sheets'),
      'description' => t('Transfer the XP of others sheets.'),
    ),
    'create SHs' => array(
      'title' => t('create SHs'),
      'description' => t('Create SHs for running games.'),
    ),
    'edit SH notes' => array(
      'title' => t('edit SH notes'),
      'description' => t('Edit SH notes.'),
    ),
    'edit private SH notes' => array(
      'title' => t('edit private SH notes'),
      'description' => t('Edit private SH notes.'),
    ),
    'admin vaxia settings' => array(
      'title' => t('admin vaxia settings'),
      'description' => t('Administrate Vaxia settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function vaxia_menu() {
  $items['vaxia/transfer_xp'] = array(
    'title' => 'Transfer XP autocomplete',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'page callback' => '_vaxia_transfer_xp_autocomplete',
  );
  // Menu items that are basically just menu blocks.
  $items['admin/vaxia'] = array(
    'title' => 'Vaxia',
    'description' => 'Administer Vaxia settings',
    'position' => 'right',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('admin vaxia settings'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  return $items;
}

/**
 * Implements hook_rules_event_info().
 */
function vaxia_rules_event_info() {
  $items = array(
    'vaxia_gain_kxp' => array(
      'label' => t('Vaxia gain kxp'),
      'group' => t('Vaxia'),
      'variables' => array(
        'user' => array(
            'type' => 'user',
            'label' => t('Player'),
        ),
        'character' => array(
            'type' => 'node',
            'label' => t('Character'),
        ),
        'location' => array(
            'type' => 'node',
            'label' => t('Location'),
        ),
        'xp_amount' => array(
            'type' => 'integer',
            'label' => t('XP Amount'),
         ),
      ),
    ),
    'vaxia_gain_xp' => array(
      'label' => t('Vaxia gain xp'),
      'group' => t('Vaxia'),
      'variables' => array(
        'user' => array(
            'type' => 'user',
            'label' => t('Player'),
        ),
        'character' => array(
            'type' => 'node',
            'label' => t('Character'),
        ),
        'xp_amount' => array(
            'type' => 'integer',
            'label' => t('XP Amount'),
         ),
        'xp_type' => array(
            'type' => 'text',
            'label' => t('XP type'),
         ),
      ),
    ),
  );
  return $items;
}

/**
 * Implements hook_cron().
 */
function vaxia_cron() {
  _vaxia_cron_dblog_cleanup();
}

/**
 * Cron job for cleaning up useless dblog entries.
 */
function _vaxia_cron_dblog_cleanup() {
  if (module_exists('dblog') && variable_get('vaxia_clean_dblog', TRUE)) {
    // Severity levels to remove.
    $severity_levels = array(
//    WATCHDOG_EMERGENCY,
//    WATCHDOG_ALERT,
//    WATCHDOG_CRITICAL,
//    WATCHDOG_ERROR,
//    WATCHDOG_WARNING,
      WATCHDOG_NOTICE,
      WATCHDOG_INFO,
      WATCHDOG_DEBUG,
    );
    // Cleanup.
    foreach ($severity_levels as $severity_level) {
      db_delete('watchdog')
        ->condition('severity', $severity_level)
        ->execute();
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function vaxia_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['artwork'] = array(
    'label' => t('Secondary'),
    'custom settings' => TRUE,
  );
}

/*
 * Implements hook_node_view().
 */
function vaxia_node_view($node, $view_mode, $langcode) {

  // If node is a character sheet.
  if (_character_sheet_is_enabled($node)) {
    unset($node->content['character_sheet_log']);
    global $user;
    // Disable all the fields from view if you're not the owner.
    if (!($user->uid == $node->uid || user_access('edit SH notes'))) {
      $display = array('field_description', 'field_age_app', 'field_sex', 'field_race',
        'field_appearance', 'field_charisma', 'field_presence');
      foreach ($node->content as $index => $value) {
        if (strpos($index, '#') === FALSE && !in_array($index, $display)) {
          unset($node->content[$index]);
        }
      }
    }
    // Disable the private note if you can't edit it or not your char.
    if (!($user->uid == $node->uid || user_access('edit SH notes'))) {
      unset($node->content['field_sh_notes']);
    }
    // Hide the private note if you can't edit it. Can't see your own.
    if (!($user->uid != $node->uid && user_access('edit private SH notes'))) {
      unset($node->content['field_sh_private_notes']);
    }
    // Hide the private note if you can't edit it.
    if (!($user->uid == $node->uid || user_access('edit SH notes'))) {
      unset($node->content['field_player_notes']);
    }
  }

  // If node is an RPG chatroom, add the js, css for additional behaviors for Vaxia specifically.
  if ($node->type == 'rpg_chatroom') {
    drupal_add_js(drupal_get_path('module', 'vaxia') . '/js/vaxiaPullouts.js');
    drupal_add_css(drupal_get_path('module', 'vaxia') . '/css/vaxiaPullouts.css');
  }
}

/**
 * Implements hook_node_update().
 */
function vaxia_node_update($node) {
  if (_character_sheet_is_enabled($node)) {
    // Flush Entity Cache record.
    if (module_exists('entitycache')) {
      cache_clear_all('*', 'cache_entity_node', TRUE);
    }
  }
}

/**
 * Implements hook_workflow().
 */
function vaxia_workflow($op, $old_state, $new_state, $node, $force = FALSE) {
  switch ($op) {
    case 'transition post';
      // Flush Entity Cache record.
      if (module_exists('entitycache')) {
        cache_clear_all('*', 'cache_entity_node', TRUE);
      }
    break;
  }
}

/**
 * Implements process suggestion for comment theme. This allows us to override parts of the comment form.
 * This code is executed on display of the comment.
 */
function vaxia_process_comment(&$variables) {
  // Set the defaults
  $comment = $variables['comment'];
  $lang = $comment->language;

  // Check for character type only on RPG type nodes. (and do some other work as well on RPG chat nodes)
  if (_rpg_chat_is_enabled($variables['node']->type)) {
    // Add the variables for our narrative and colors.
    if(isset($comment->field_comment_narrative[$lang][0]['value'])
      && ($comment->field_comment_narrative[$lang][0]['value'] == 1) ) {
      $variables['classes'] .= ' rpg-chat-narrative';
    }
    // Add the style attribute for our content color.
    if (isset($comment->field_comment_color[$lang][0]['value'])) {
      $color = strtolower(trim($comment->field_comment_color[$lang][0]['value']));
      $color = PREG_REPLACE("/[^0-9a-z]/i", '', $color); // Filter non-alphanumeric out.
      $color_codes = array('aqua', 'black', 'blue', 'fuchsia', 'gray', 'green', 'lime', 'maroon',
        'navy', 'olive', 'purple', 'red', 'silver', 'teal', 'white', 'yellow');
      if (!in_array($color, $color_codes)) {
        $color = '#'. $color;
      }
      $variables['content']['comment_body']['#prefix'] = '<span style="color:' . $color . '">';
      $variables['content']['comment_body']['#suffix'] = '</span>';
    }
  }

  // Update the user image for submission to no image.
  // Check for user profile settings.
  $user = user_load($comment->uid);
  $variables['picture'] = _vaxia_create_avatar_image_link(-1, $user->name);
  if (isset($user->field_artwork_image[$lang][0]['fid'])) {
    $variables['picture'] = _vaxia_create_avatar_image_link(
      $user->field_artwork_image[$lang][0]['fid'], $user->name);
  }
  // If not, fall back to the commment itself.
  if (isset($comment->field_artwork[$lang][0]['nid'])) {
    $artwork = node_load($comment->field_artwork[$lang][0]['nid']);
    if (isset($artwork->field_artwork_image[$lang][0]['fid'])) {
      $variables['picture'] = _vaxia_create_avatar_image_link(
        $artwork->field_artwork_image[$lang][0]['fid'], $user->name);
    }
  }

  // Apply picture rules to All node types.
  // Redo the submitted field for RPG chatrooms only.
  $variables['submitted'] = t('!username </br> !datetime',
    array('!username' => $variables['author'], '!datetime' => $variables['created']));
  // Now check for user pictures again.
  // Good thing node_load caches else calling this for Every Comment would get really ugly.
  if (isset($comment->field_comment_character[$lang][0]['nid'])) {
    $character = node_load($comment->field_comment_character[$lang][0]['nid']);
    if (isset($character->nid)) {
      $character_name = $character->title;
      // Set character title to name.
      if (isset($character->field_titles[$lang][0]['value'])) {
        $character_name = $character->field_titles[$lang][0]['value'] .' ' . $character_name;
      } 
      // Set character last name.
      if (isset($character->field_last_name[$lang][0]['value'])) {
        $character_name .= ' ' . $character->field_last_name[$lang][0]['value'];
      }
      // Set character description.
      $char_desc = isset($character->field_description[$lang][0]['value']) ? $character->field_description[$lang][0]['value'] : '';
      $char_desc = check_plain($char_desc);
      if (strlen($char_desc) > 595) {
        $char_desc = drupal_substr($char_desc, 0, 600) . '...';
      }
      $options = array('attributes' => array('title' => $char_desc));
      // Update the submission variables with name, description information.
      $variables['submitted'] = t('!username </br> !datetime',
        array(
          '!username' => l($character_name, 'node/' . $character->nid, $options),
          '!datetime' => $variables['created'])
        );
      // Now work on the character art display. Setup the link options for the character pic.
      $alt = t('Presence: @pre, Charisma: @char, Appearance: @app',
        array('@pre' => $character->field_presence[$lang][0]['value'],
          '@char' => $character->field_charisma[$lang][0]['value'],
          '@app' => $character->field_appearance[$lang][0]['value']));
      $link_options = array('html' => TRUE, 'attributes' => array('target' => '_blank'));    
      // Set picture to the default value (vaxia logo) as the fallback if no other resource found.
      $variables['picture'] = l( _vaxia_create_avatar_image_link(-1, $character_name, $alt),
        'node/' . $character->nid, $link_options);
      // Check first against the selected comment for an artwork node.
      if (!empty($comment->field_artwork[$lang][0]['nid'])) {
        // Set picture to the attached art node for the comment.
        $artwork = node_load($comment->field_artwork[$lang][0]['nid']);
        if (!empty($artwork->field_artwork_image[$lang][0]['fid'])) {
          $variables['picture'] = l( _vaxia_create_avatar_image_link(
            $artwork->field_artwork_image[$lang][0]['fid'], $character->title, $alt),
              'node/' . $character->nid, $link_options);
        }
      }
      // Else, if the character has it's own artwork file, use that.
      elseif (!empty($character->field_artwork_image[$lang][0]['fid'])) {
        // Set picture to the attached file for the character node.
        $variables['picture'] = l( _vaxia_create_avatar_image_link(
          $character->field_artwork_image[$lang][0]['fid'], $character->title, $alt),
            'node/' . $character->nid, $link_options);
      }
      // And done, the art is set for the comment.
    } // End character exists.
  } // End character on comment.
}

/**
 * Helper function, given a fid return the image link.
 */
function _vaxia_create_avatar_image_link($fid, $name, $alt = '') {
  $artwork_image = file_load($fid);
  $default_filepath = drupal_get_path('module', 'vaxia') . '/images/vaxialogo.gif';
  $filepath = isset($artwork_image->uri) ? $artwork_image->uri : $default_filepath;
  if (isset($filepath)) {
    if (empty($alt)) {
      $alt = t("@user's picture.", array('@user' => $name));
    }
    // If the image does not have a valid Drupal scheme (for eg. HTTP) don't load image styles.
    if (module_exists('image') && file_valid_uri($filepath) 
      && $style = variable_get('user_picture_style', '')) {
      $picture = theme('image_style',
        array('style_name' => $style, 'path' => $filepath, 'alt' => $alt, 'title' => $alt));
    }
    else {
      $picture = theme('image', array('path' => $filepath, 'alt' => $alt, 'title' => $alt));
    }
    $attributes = array(
      'attributes' => array('title' => t('View profile.')),
      'html' => TRUE,
    );
    return $picture;
  }
}

/**
 * Implements hook_theme().
 *
 * Register themes used by this module.
 */
function vaxia_theme($existing, $type, $theme, $path) {
  return array(
    'vaxia_dice_roller' => array(
      'render element' => 'element',
      'function' => 'theme_vaxia_dice_roller',
    ),
  );
}

/**
 * Theme the dice roller.
 */
function theme_vaxia_dice_roller($element) {
  $element = $element['element'];
  $header = array( t('#'), t('d'), t('stat'), t('skill'));
  $rows = array();
  $i = 0;
  if (isset($element['dice']) && is_array($element['dice'])) {
    foreach (element_children($element['dice']) as $dice) {
      $number = drupal_render($element['dice'][$i]['number']);
      $size = drupal_render($element['dice'][$i]['size']);
      $stat = drupal_render($element['dice'][$i]['stat']);
      $skill = drupal_render($element['dice'][$i]['skill']);
      $rows[] = array($number, $size, $stat, $skill);
      $i++;
    }
  }
  if (!empty($rows)) {
    return theme('table', array('header' => $header, 'rows' => $rows))
      . drupal_render($element['items'])
      . drupal_render($element['notes']);
  }
  else {
    return '';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vaxia_form_workflow_tab_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $node = isset($form['node']['#value']) ? $form['node']['#value'] : '';
  if (!empty($node) && $user->uid == $node->uid) {
    if ($node->type == 'character_sheet') {
      $workflow_name = $form['#wf']->name;
      $options = $form['workflow'][$workflow_name]['#options'];
      $index = array_search('approved', $options);
      if ($index !== FALSE && $index != $node->workflow) {
        drupal_set_message(t('You own this character, you cannot set it to approved. Currently: ' . $node->workflow_state_name));
        unset($options[$index]);
        $form['workflow'][$workflow_name]['#options'] = $options;
        $form['workflow'][$workflow_name]['#default_value'] = $node->workflow;
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function vaxia_form_alter(&$form, &$form_state, $form_id) {

  // If we're viewing a comment form, allow for user profile to set RPG chat additional fields.
  if (substr($form_id, 0, 7) == 'comment' && isset($form['#node'])) {
    // Eject if this is not a chat room type.
    $type = $form['#node']->type;
    if (!_rpg_chat_is_enabled($type)) {
      return;
    }
    // Set character controls.
    global $user;
    $character = node_load(variable_get('vaxia_last_character_' . $user->uid, -1));
    if (isset($character->title)) {
      $lang = $character->language;
      $form['field_comment_character'][$lang]['#default_value'][0] = $character->nid;
      if (isset($character->field_artwork[$lang][0]['nid'])) {
        $form['field_artwork'][$lang]['#default_value'][0] = $character->field_artwork[$lang][0]['nid'];
      }
      $kxp = _character_sheet_get_xp($character->nid, 'kxp');
      $xp = _character_sheet_get_xp($character->nid, 'xp');
      $spent_xp = _character_sheet_get_xp($character->nid, 'spent_xp');       
      $form['field_comment_character'][$lang]['#description'] = $kxp . ' / 70 KXP, ' . ($xp - $spent_xp) . ' XP';
    }
    // Set limits in limbo rooms.
    $lang = isset($form_state['values']['language']) ? $form_state['values']['language'] : 'und';
    $limbo_room = variable_get('vaxia_limbo_room', array());
    // Set narrative checkbox access and no access in limbo rooms.
    if (!user_access('post in narrative format') || in_array($form['#node']->nid, $limbo_room)) {
      $form['field_comment_narrative'][$lang]['#value'] = 0;
      $form['field_comment_narrative'][$lang]['#access'] = FALSE;
      $form['field_comment_narrative'][$lang]['#type'] = 'hidden';
    }
    // Remove the no character setting for non-Limbo rooms.
    if (!in_array($form['#node']->nid, $limbo_room)) {
      $options = $form['field_comment_character'][$lang]['#options'];
      if (is_array($options)) {
        $options = array_diff($options, array('_none' => '- None -'));
      }
      else {
        $options = array('_none' => '- None -');
      }
      $form['field_comment_character'][$lang]['#options'] = $options;
    }
    // Set up diceroller callbacks on character selection.
    $form['field_comment_character'][$lang]['#ajax'] = array(
      'callback' => '_vaxia_character_pick',
      'wrapper' => 'vaxia-dice-roller',
      'method' => 'replace',
      'effect' => 'fade',
    );
    // Set player uid for pickup.
    $form['uid'] = array(
      '#type' => 'hidden',
      '#value' => $user->uid,
    );
    // Set submissions.
    $form['actions']['submit']['#value'] = t('Post');
    $form['#submit'][] = '_vaxia_comment_add_kxp_submit';
    $form['#submit'][] = '_vaxia_comment_redirect_submit';
    // Move things around to duplicate submit buttons.
    $new_post = $form['actions']['submit'];
    $new_post['#weight'] = -10;
    array_unshift($form, $new_post);
    $new_refresh = $form['actions']['refresh_chat'];
    $new_refresh['#weight'] = -11;
    array_unshift($form, $new_refresh);
  } // End alter for comment forms.

  return $form;
}

/**
 * Ajax callback for character selection.
 */
function _vaxia_character_pick($form, $form_state) {
  $roll_form = $form['vaxia_rolls'];
  return $roll_form;
}

/** 
 * Additional submit handler to add kxp for commenting as a character, not narrative.
 */
function _vaxia_comment_add_kxp_submit($form, $form_state) {
  // Set the last posted character or none as needed.
  global $user;
  $lang = $form_state['values']['language'];
  variable_set('vaxia_last_character_' . $user->uid, $form_state['values']['field_comment_character'][$lang][0]['nid']);
  // Ignore kxp for limbo rooms.
  $limbo_room = variable_get('vaxia_limbo_room', array());
  if (in_array($form['#node']->nid, $limbo_room)) {
    return;
  }
  // Otherwise, figure out how much kxp we're giving.
  // If posted as a character and not as narrative.
  if (!empty($form_state['values']['field_comment_character'][$lang][0]['nid']) ) {
    if (!empty($form['cid']['#value'])) {
      drupal_set_message('Editing an existing comment - no kxp will be awarded.');
      return;
    }
    // The character gains XP per wordcount.
    if (!empty($form_state['values']['comment_body'][$lang][0]['value'])) {
      $kxp = _vaxia_figure_kxp($form_state['values']['comment_body'][$lang][0]['value']);
      $character = node_load($form_state['values']['field_comment_character'][$lang][0]['nid']);
      // Posting with an NPC? Mark the XP to the SH character.
      if ($character->field_is_npc[$character->language][0]['value'] == 1 
        || $character->field_is_open_npc[$character->language][0]['value'] == 1) {
        global $user;
        $sh_character = _vaxia_get_SH_characters($user->uid);
        if (!empty($sh_character)) {
          $character = $sh_character;
        }
      }
      // Mark the XP.
      if ($character->type == 'character_sheet') {
        _vaxia_add_xp($character->nid, $kxp, 'kxp');
        if (function_exists('rules_invoke_event')) {
          $player = user_load($character->uid);
          $location = $form['#node'];
          rules_invoke_event('vaxia_gain_xp', $player, $character, $location, $kxp, 'kxp');
        }
      }
    }  
  }
}

/** 
 * Helper function, calculate kxp to give based on text.
 */
function _vaxia_figure_kxp($text) {
  $wordcount = strlen($text);
  if (is_numeric($wordcount)) {
    //$kxp = floor( $wordcount / variable_get('vaxia_kxp_per_words', 20) );
    $kxp = (81.6) * ( exp( (0.00008) * ($wordcount)) - 1 );
    $kxp = substr($kxp, 0, 4);
    $max_kxp = variable_get('vaxia_max_kxp_post', 10);
    return $kxp <= $max_kxp ? $kxp : $max_kxp;
  }
  return 0;
}

/**
 * Redirection submit handler to clip the anchor.
 * This avoids wierd scroll down issues in the display.
 */
function _vaxia_comment_redirect_submit($form, &$form_state) {
  $form_state['redirect'] = 'node/' . $form_state['values']['nid'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vaxia_form_comment_form_alter(array &$form, array &$form_state) {
  // Disable the extra box on comment forms.
  $form['author']['subscriptions_notify']['#access'] = FALSE;
}

/**
 * Helper function, retrieve SH information from player.
 */
function _vaxia_get_SH_characters($uid) {
  static $SH_characters;
  if (!empty($SH_characters[$uid])) {
    return $SH_characters[$uid];
  }
  // Not in the cache? Look it up from the user.
  $user = user_load($uid);
  if (!empty($user->field_storyhost_character[$user->language][0]['value'])) {
    $SH_characters[$uid] = node_load( $user->field_storyhost_character[$user->language][0]['value'] );
    return $SH_characters[$uid];
  }
  // Not on the user either? Check nodes - and worse comes to worse, add it to the user.
  if (empty($user->field_storyhost_character[$user->language][0]['value'])) {
    $nodes = node_load_multiple(array(), array('type' => 'character_sheet', 'uid' => $uid));
    foreach ($nodes as $nid => $node) {
	  if (isset($node->field_is_storyteller[$node->language][0]['value']) &&
	    $node->field_is_storyteller[$node->language][0]['value'] == 1) {
	    $SH_characters[$uid] = $node;
	  }
    }
    // Save this value so we don't have to dig this deep again.
    $user->field_storyhost_character[$user->language][0]['value'] = $SH_characters[$uid];
    user_save($user);
    return $SH_characters[$uid];
  }
  // Still nothing? Ok - maybe there's actually nothing there. Set and return;
  $SH_characters[$uid] = array();
  return $SH_characters[$uid];
}

/**
 * Views helper function.
 */
function _vaxia_get_character_ref_types($nid) {
  global $user;
  $node = node_load($nid);
  $lang = $node->language;
  $field_is_open_npc = isset($node->field_is_open_npc[$lang][0]['value']) ?
    $node->field_is_open_npc[$lang][0]['value'] : 0;
  $field_is_npc = isset($node->field_is_npc[$lang][0]['value']) ?
    $node->field_is_npc[$lang][0]['value'] : 0;
  if (!empty($field_is_open_npc) && $field_is_open_npc == 1) {
    return 'Open NPCs';
  }
  if (!empty($field_is_npc) && $field_is_npc == 1) {
    return 'Personal NPCs';
  }
  return 'Characters';
}

/**
 * Blocks helper function.
 */
function _vaxia_piggybank($average_cost, $in_account, $start_date) {
  $end_date = 'now';
  $diff = abs(strtotime($end_date) - strtotime($start_date));
  $years = floor($diff / (365*60*60*24));
  $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));
  $estimated_left = $in_account - ($months * $average_cost);
  $output = '';
  $output .= '<div style="text-align:center;">Account info last updated: ' . $start_date . '</div>';
  if ($estimated_left >= $average_cost) {
    $output .= '<div style="text-align:center;">Estimated in account: $' . $estimated_left . '</div>';
    $estimated_months_left = floor($estimated_left / $average_cost);
    $output .= '<div style="text-align:center;">Estimated months left: ' . $estimated_months_left . '</div>';
  }
  else {
    $output .= '<div style="text-align:center;">Vaxia\'s donation account needs topping off. We have less than a month of funding left.</div>';
  }
  $output .= '<div style="text-align:center;"><br />' .
    '<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">' .
    '<input type="hidden" name="cmd" value="_donations">' .
    '<input type="hidden" name="business" value="tia@tia-marie.com">' .
    '<input type="hidden" name="lc" value="US">' .
    '<input type="hidden" name="item_name" value="Vaxia Donation">' .
    '<input type="hidden" name="no_note" value="0">' .
    '<input type="hidden" name="currency_code" value="USD">' .
    '<input type="hidden" name="bn" value="PP-DonationsBF:btn_donateCC_LG.gif:NonHostedGuest">' .
    '<input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!">' .
    '<img alt="" border="0" src="https://www.paypalobjects.com/en_US/i/scr/pixel.gif" width="1" height="1">' .
    '</form>' .
    '</div>';
  return $output;
}

/**
 * Rules helper function.
 */
function _vaxia_filter_characters_by_room($nid) {
  $room = node_load(arg(1));
  if ($room) {
    $realm = isset($room->field_realm[$room->language][0]['value']) ? $room->field_realm[$room->language][0]['value'] : '';
    if (!empty($realm) && $realm != 'storyhost') {
      return $realm . '+storyhost';
    }
  }
  return 'all';
}