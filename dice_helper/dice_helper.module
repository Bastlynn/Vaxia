<?php

/**
 * @file
 * Provide additional javascript to supplement the dice roller.
 */

/**
 * Implements hook_permission().
 */
function dice_helper_permission() {
  return array(
    'use dice helper' => array(
      'title' => t('Use the dice helper javascript'),
      'description' => t('Use the dice helper javascript.'),
    ),
  );
}

/**
 * Implements hook_node_view().
 */
function dice_helper_node_view($node, $view_mode = 'full', $langcode) {
  if (_rpg_chat_is_enabled($node->type) && $view_mode == 'full' ) {
    if (user_access('use dice helper')) {
      drupal_add_js(drupal_get_path('module', 'dice_helper').'/js/dice_helper.js');
    }
  }
}

/**
 * Implements hook_menu().
 */
function dice_helper_menu() {
  $items['dice_helper/dice_proof'] = array(
    'title' => 'Diceroller proof',
    'access arguments' => array('view dice rolls'),
    'page callback' => '_dice_helper_dice_proof',
  );
  return $items;
}

/**
 * Menu callback.
 */
function _dice_helper_dice_proof() {
  // Given dice patterns in the past, provide a page to analyze the dice rolled to date and calculate results as proof.
  $dice_rolls = db_query('SELECT roll_result FROM {dice_roller} WHERE roll_command LIKE :rolls LIMIT 0, 1000', array(':rolls' => '1d100%'));
  $roll_set = array();
  $count = 0;
  $average = 0;
  foreach ($dice_rolls as $dice_roll) {
    $result = explode('=', $dice_roll->roll_result);
    $rolls = explode(',', $result[0]);
    $roll = trim($rolls[0]);
    if (is_numeric($roll)) {
      $count++;
      $average += $roll;
      if (!isset($roll_set[$roll])) {
        $roll_set[$roll] = 0;
      }
      $roll_set[$roll]++;
    }
  }
  $average = $average / $count;
  // Display.
  $output = '<style>';
  $output .= '.dice_proof_row{}';
  $output .= '.dice_proof_label{padding-left:0.5em;}';
  $output .= '.dice_proof_average{border-right:solid 1px #111;display:block;}';
  $output .= '.dice_proof_value{background:green;display:block;}';
  $output .= '</style>';
  $output .= '<div class="dice_proof_title">Across ' . $count . ' Rolls:</div>';
  $counts = array_sum($roll_set) / 100;
  $cut = $counts > 100 ? $counts / 2 : 0;
  $mark = $counts - $cut;
  for ($n = 1; $n < 101; $n++) {
    if (!isset($roll_set[$n])) {
      $roll_set[$n] = 0;
    }
    $width = $roll_set[$n] - $cut;
    $output .= '<div>' .
      '<span class="dice_proof_value" style="width:' . $width . 'em;">' .
      '  <span class="dice_proof_average" style="width:' . $mark . 'em;">&nbsp;' .
      '    <span class="dice_proof_label">' . $n .
      '    </span>' .
      '  </span>' .
      '</span>' .
      '</div>';
  }
  $output .= '<div class="dice_proof_title">Expected mathematical average of all rolls: 50 / 51</div>';
  $output .= '<div class="dice_proof_title">Actual mathematical average of all rolls: ' . $average . '</div>';
  return $output;
}
