<?php
/**
 * @file
 * Provide a clean UI for item creation from a player crafter PoV.
 */

/**
 * Implements hook_permission().
 */
function item_helper_permission() {
  return array(
    'use item helper' => array(
      'title' => t('use item helper'),
      'description' => t('Use item helper.'),
    ),
    'set numerical diff' => array(
      'title' => t('set numerical diff'),
      'description' => t('Set numerical difficulty for rolls.'),
    ),
    'administer item helper' => array(
      'title' => t('administer item helper'),
      'description' => t('Administer item helper.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function item_helper_menu() {
  $items['vaxia/item_helper/autocomplete/room'] = array(
    'title' => 'Item assist room lookup',
    'type' => MENU_CALLBACK,
    'page callback' => '_item_helper_autocomplete_room',
    'access arguments' => array('use item helper'),
  );
  $items['admin/vaxia/item_helper'] = array(
    'title' => 'Item assist settings',
    'description' => 'Configure content type association settings for item handling',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_item_helper_admin_settings'),
    'access arguments' => array('administer item helper'),
  );
  return $items;
}

/**
 * Implements hook_node_insert().
 */
function item_helper_node_insert($node) {
  item_helper_node_update($node);
}

/**
 * Implements hook_node_update().
 */
function item_helper_node_update($node) {
  $item_type = variable_get('item_helper_item_type', '');
  if (!empty($item_type) && $item_type == $node->type) {  
    $nid = $node->nid;
    // Collect content info.
    $save_comments = !empty($node->included_comments_table)
      ? $node->included_comments_table : array();
    // Save each one to the nid.
    if (empty($save_comments)) {
      return;
    }
    foreach ($save_comments as $cid => $comment) {
      // If marked, and not already in the list, add it.
      $this_comment = (object) $comment;
      $this_comment->nid = $nid;
      $this_comment->cid = $cid;
      $save_comments[$cid] = $this_comment;
    }
    foreach ($save_comments as $cid => $item_comment) {
      // Don't save what's marked for removal.
      if ($item_comment->remove == 0) {
        $item_comment->roll_type = isset($item_comment->roll_type) ? $item_comment->roll_type : 'gen_pp';
        $item_comment->override_might = isset($item_comment->mights['override_might']) ? $item_comment->mights['override_might'] : 0;
        $item_comment->might_1 = isset($item_comment->mights['might_1']) ? $item_comment->mights['might_1'] : 0;
        $item_comment->might_2 = isset($item_comment->mights['might_2']) ? $item_comment->mights['might_2'] : 0;    
        $item_comment->set_bonus = isset($item_comment->set_bonus) ? $item_comment->set_bonus : 0;
        $item_comment->difficulty = isset($item_comment->difficulty) ? $item_comment->difficulty : 45;
        $item_comment->rp_bonus = isset($item_comment->rp_bonus) ? $item_comment->rp_bonus : 5;
        _item_helper_update_comment($item_comment);
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function item_helper_node_delete($node) {
  _item_helper_delete_comments($node->nid);
}

/**
 * Implements hook_comment_delete().
 */
function item_helper_comment_delete($comment) {
  _item_helper_delete_comment($comment->nid, $comment->cid);
}

/**
 * Implements hook_node_view().
 */
function item_helper_node_view($node, $view_mode, $langcode) {
  $item_type = variable_get('item_helper_item_type', '');
  if ($view_mode == 'full' && user_access('use item helper') && !empty($item_type) && !empty($node->type) && $item_type == $node->type) {
    $set_comments = _item_helper_get_comments($node->nid);
    if (!empty($set_comments) && !empty($node->content['field_creation_history'])) {
      unset($node->content['field_creation_history']['#theme']);
      // Convert this display into a markup, so we don't double render the content table.
      $node->content['field_creation_history']['#markup'] = isset($node->content['field_creation_history']['#markup']) ?
        $node->content['field_creation_history']['#markup'] : '';
      foreach ($node->content['field_creation_history']['#items'] as $index => $value) {
        $count = $index + 1;
        $label = '<div class="field"><hr><div class="field-label">Creation history record #' . $count . ':&nbsp;</div><hr></div>';
        $node->content['field_creation_history']['#markup'] .= $label . $value['value'];
      }
    }
  }
}

/**
 * Implements hook_workflow().
 */
function item_helper_workflow($op, $old_state, $new_state, $node, $force = FALSE) {
  // If an item, and approved, then we take a copy of the assigned ruling comments.
  // And move it and all settings into a table on the item.
  $item_type = variable_get('item_helper_item_type', '');
  if (!empty($item_type) && $item_type == $node->type) {
    switch ($op) {
      case 'transition post';
        $new_state_info =  workflow_get_workflow_states_by_sid($new_state);
        if ($new_state_info->state == 'approved') {
          // If a table with states, grab and render the info as a table.
          // And save it to our record fields to disconnect the item assist from comment.
          $set_comments = _item_helper_get_comments($node->nid);
          if (!empty($set_comments)) {
            _item_helper_view_table($headers, $rows, $node, $set_comments);
            $table['value'] = theme('table', array('header' => $headers, 'rows' => $rows));
            $table['format'] = 'full_html';
            $node->field_creation_history[$node->language][] = $table;
            node_save($node);
          }
        }
      break;
    }
  }
}

/**
 * Return a display of the info as a renderable form.
 */
function _item_helper_view_table(&$headers, &$rows, $node, $set_comments) {
  $headers = array(
    t('Item creation posts'),
    t('Roll type'),
    t('Flat bonus'),
    t('Difficulty'),
    t('RP Bonus'),
    t('Result'),
  );
  $rows = array();
  // Create table data.
  $roll_types = array(
    'gen_pp' => t('PP for item'),
    'prep_bon' => t('1/7 PP might bon'),
    'prep_diff' => t('1/7 PP reduce diff'),
    'no_calcs' => t('No roll'),
  );
  $found_comments = array();
  foreach ($set_comments as $set_comment) {
    $found_comments[$set_comment->cid] = $set_comment;
  }
  // One last organization of all of these by cid.
  ksort($found_comments);
  // Get values.
  $found_comments = _item_helper_calculate_results($found_comments);
  // Loop for display.
  foreach ($found_comments as $cid => $item_comment) {
    // Get comment display.
    $comment = comment_load($cid);
    $comment_uri = comment_uri($comment);
    // Get the full text.
    $comment_text = '';
    if (!empty($comment->comment_body[$comment->language][0]['value'])) {
      $comment_text = check_markup($comment->comment_body[$comment->language][0]['value'], $comment->comment_body[$comment->language][0]['format']);
    }
    $comment_ooc = '';
    if (!empty($comment->field_ooc[$comment->language][0]['value'])) {
      $comment_ooc = check_markup($comment->field_ooc[$comment->language][0]['value'], $comment->field_ooc[$comment->language][0]['format']);
    }
    // Strip HTML - we can't use it in title overheads.
    $comment_text = strip_tags($comment_text);
    $comment_ooc = strip_tags($comment_ooc);
    $comment_title = check_plain($comment_text);
    if (!empty($comment_ooc)) {
      $comment_title .= "\n" . 'OOC: ' . check_plain($comment_ooc);
    }
    // Put together.
    $comment_display = '<a href="/' . $comment_uri['path'] . '#' . $comment_uri['options']['fragment'] . '" title="' . $comment_title . '">' .
      check_plain($comment->subject) . '</a>';
    // Add dice rolls if there are any.
    $dice_rolls = _dice_roller_get_roll($cid, 'c');
    $comment_display .= !empty($dice_rolls) ? theme('dice_roller_results', array('dice_rolls' => $dice_rolls)) : '';
    // Add to rows.
    $rows[] = array(
      $comment_display,
      $roll_types[$item_comment->roll_type],
      $item_comment->set_bonus,
      $item_comment->difficulty,
      $item_comment->rp_bonus,
      array(
        'data' => $item_comment->results,
        'nowrap' => array('nowrap'),
      ),
    );
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function item_helper_form_node_form_alter(&$form, &$form_state, $form_id) {
  $item_type = variable_get('item_helper_item_type', '');
  if (!empty($item_type) && !empty($form['#node']->type) && $item_type == $form['#node']->type) {
    // Collapsible interface.
    $form['item_helper'] = array(
      '#type' => 'fieldset',
      '#title' => t('Item Build Assistant'),
      '#description' => t('Use this assistant to attach item creation posts to the item and ' .
        'get an estimate of the PP generated over the course of the RP. Values calculated under ' .
        'this system are estimates ONLY. Once submitted the final ruling will be determined by ' .
        'the evaluator for this item. The assistant is only meant to make the math easier.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => -40,
    );

    // Part one, add more comments to this item!
    $form['item_helper']['add_comments'] = array(
      '#type' => 'fieldset',
      '#title' => t('Add new posts'),
      '#description' => t('Search for posts by room. Select the posts to apply to this item for ' .
        'calculating creation rolls.'),
      '#collapsible' => TRUE,
    );
    $form['item_helper']['add_comments']['search_room'] = array(
      '#title' => t('Posts from room'),
      '#type' => 'textfield',
      '#autocomplete_path' => 'vaxia/item_helper/autocomplete/room',
      '#ajax' => array(
        'callback' => '_item_helper_ajax_load_room_comments',
        'wrapper' => 'item-helper-add-comments-table',
        'method' => 'replace',
        'effect' => 'fade',
      ),
    );
    $room = !empty($form_state['values']['search_room']) ? $form_state['values']['search_room'] : '';
    $options = array();
    if (!empty($room)) {
      $room_nid = _item_helper_autocomplete_get_nid($room);
      if ($room_nid != FALSE) {
        $found_comments = _item_helper_get_comments_by_room($room_nid);
        foreach ($found_comments as $found_comment) {
          $comment = comment_load($found_comment->cid);
          $comment_uri = comment_uri($comment);
          // Get the full text.
          $comment_text = '';
          if (!empty($comment->comment_body[$comment->language][0]['value'])) {
            $comment_text = check_markup($comment->comment_body[$comment->language][0]['value'], $comment->comment_body[$comment->language][0]['format']);
          }
          $comment_ooc = '';
          if (!empty($comment->field_ooc[$comment->language][0]['value'])) {
            $comment_ooc = check_markup($comment->field_ooc[$comment->language][0]['value'], $comment->field_ooc[$comment->language][0]['format']);
          }
          // Strip HTML - we can't use it in title overheads.
          $comment_text = strip_tags($comment_text);
          $comment_ooc = strip_tags($comment_ooc);
          $comment_title = check_plain($comment_text);
          if (!empty($comment_ooc)) {
            $comment_title .= "\n" . 'OOC: ' . check_plain($comment_ooc);
          }
          // Put together.
          $comment_display = '<a href="/' . $comment_uri['path'] . '#' . $comment_uri['options']['fragment'] . '" title="' . $comment_title . '">' .
            check_plain($comment->subject) . '</a>';
          // Get the rest of the display info.
          $character = isset($comment->field_comment_character[$comment->language][0]['nid']) ?
            $comment->field_comment_character[$comment->language][0]['nid'] : '';
          $character = node_load($character);
          $character_name = isset($character->title) ? $character->title : '';
          $dice_rolls = _dice_roller_get_roll($found_comment->cid, 'c');
          $dice_rolls = !empty($dice_rolls)
            ? theme('dice_roller_results', array('dice_rolls' => $dice_rolls))
            : t('No rolls found');
          $options[$found_comment->cid] = array(
            $comment_display,
            check_plain($character_name),
            check_plain($comment->name),
            $dice_rolls,
            date('m/d/Y H:i:s', $comment->changed),
          );
        }
      }
    }
    $form['item_helper']['add_comments']['add_comments_table'] = array(
      '#prefix' => '<div id="item-helper-add-comments-table">',
      '#suffix' => '</div>',
      '#type' => 'tableselect',
      '#header' => array(
        t('Posts'),
        t('Character'),
        t('Player'),
        t('Rolls'),
        t('Date'),
      ),
      '#options' => $options,
      '#js_select' => FALSE,
      '#multiple' => TRUE,
      '#empty' => t('No posts found.'),
    );
    $form['item_helper']['add_comments']['add'] = array(
      '#type' => 'button',
      '#value' => t('Add Posts'),
      '#limit_validation_errors' => array(array('add_comments_table'), array('included_comments_table')),
      // DOUBLE ARRAY. Because drupal docs suck.
      '#ajax' => array(
        'callback' => '_item_helper_ajax_add_comments',
        'wrapper' => 'item-helper-included-comments-table',
        'method' => 'replace',
        'effect' => 'fade',
      ),
    );

    // Part two, given an included comment display the options for it!
    $form['item_helper']['included_comments'] = array(
      '#type' => 'fieldset',
      '#title' => t('Included posts'),
      '#collapsible' => TRUE,
    );
    // Set the user permissions that change the UI.
    global $user;
    $user_can_set_diffs = FALSE;
    // If this isn't a new node AND this is not the users own node.
    if (!empty($form['#node']->nid) && $form['#node']->uid != $user->uid) {
    	$user_can_set_diffs = user_access('set numerical diff');
    }

    // Gather comments for display from various sources.
    $found_comments = array();
    // Check for comments still saved on the node.
    if (isset($form['#node']->nid)) {
      $set_comments = _item_helper_get_comments($form['#node']->nid);
      foreach ($set_comments as $set_comment) {
        $found_comments[$set_comment->cid] = $set_comment;
      }
    }
    // Gather comments existing under AJAX.
    $exist_comments_table = !empty($form_state['values']['included_comments_table'])
      ? $form_state['values']['included_comments_table'] : array();
    foreach ($exist_comments_table as $existing_cid => $existing_comment) { 
      // If marked add it.
      if ($existing_comment['remove'] == 0) {
        $this_comment = (object) $existing_comment;
        $this_comment->cid = $existing_cid;
        $found_comments[$existing_cid] = $this_comment;
      }
      if ($existing_comment['remove'] == 1) {
        // Delete it as much as possible from the system.
        unset($form_state['values']['included_comments_table'][$existing_cid]);
        unset($found_comments[$existing_cid]);
        if (isset($form['#node']->nid)) {
          _item_helper_delete_comment($form['#node']->nid, $existing_cid);
        }
      }
    }
    // Gather comments added via AJAX.
    $add_comments_table = !empty($form_state['values']['add_comments_table']) ? $form_state['values']['add_comments_table'] : array();
    // Reverse the order to match posting order.
    $add_comments_table = array_reverse($add_comments_table, TRUE);
    foreach ($add_comments_table as $add_comment => $added) {
      // If marked, and not already in the list, add it.
      if ($added && !in_array($add_comment, array_keys($found_comments))) {
        $this_comment->cid = $add_comment;
        $found_comments[$add_comment] = $this_comment;
      }
    }
    // One last organization of all of these by cid.
    ksort($found_comments);

    // Collect the default difficulty from the last comment in the loop.
    // If you can't set the defaults in the form, then we wil need to pull from the dropdown.
    // But we should initially set the dropdown to be the value of the first comment.
    $default_diff_value = !empty($set_comment) ? $set_comment->difficulty : 45;
    $default_diff_value = !empty($form_state['input']['general_difficulty']) ? $form_state['input']['general_difficulty'] : $default_diff_value;
    $default_diff_value = !empty($form_state['values']['general_difficulty']) ? $form_state['values']['general_difficulty'] : $default_diff_value;
    // Collect the default RP bonus from the last comment in the loop.
    $default_rb_bon_value = !empty($set_comment) ? $set_comment->rp_bonus : 5;
    $default_rb_bon_value = !empty($form_state['input']['general_rp_bonus']) ? $form_state['input']['general_rp_bonus'] : $default_rb_bon_value;
    $default_rb_bon_value = !empty($form_state['values']['general_rp_bonus']) ? $form_state['values']['general_rp_bonus'] : $default_rb_bon_value;
    // Set the diff generic field.
    $diffs = array(
      '#title' => t('Difficulty for the item'),
      '#type' => 'select',
      '#options' => array(
        '5' => t('Ridiculously easy (5)'),
        '15' => t('Easy (15)'),
        '25' => t('Normal (25)'),
        '30' => t(' - (30)'),
        '35' => t(' - (35)'),
        '35' => t(' - (40)'),
        '45' => t('Skilled (45)'),
        '35' => t(' - (50)'),
        '35' => t(' - (55)'),
        '35' => t(' - (60)'),
        '65' => t('Mastery (65)'),
        '35' => t(' - (70)'),
        '35' => t(' - (75)'),
        '35' => t(' - (80)'),
        '35' => t(' - (85)'),
        '35' => t(' - (90)'),
        '35' => t(' - (95)'),
        '100' => t('Extremely Difficult (100)'),
        '35' => t(' - (105)'),
        '35' => t(' - (110)'),
        '35' => t(' - (115)'),
        '35' => t(' - (120)'),
      ),
      '#default_value' => $default_diff_value,
      '#access' => !$user_can_set_diffs, // If you have no permissions, you ALWAYS see this dropdown.
      '#limit_validation_errors' => array(array('included_comments_table')),
      // DOUBLE ARRAY. Because drupal docs suck.
      '#ajax' => array(
        'callback' => '_item_helper_ajax_add_comments',
        'wrapper' => 'item-helper-included-comments-table',
        'method' => 'replace',
        'effect' => 'fade',
      ),
    );
    $form['item_helper']['included_comments']['general_difficulty'] = $diffs;
    // Set the Diff as a general value, and set RP bonus that way too.
    $form['item_helper']['included_comments']['general_rp_bonus'] =  array(
      '#title' => t('RP Bonus for the scene'),
      '#type' => 'select',
      '#options' => array(
        '0' => t('None (0)'),
        '5' => t('Average (5)'),
        '10' => t('Good (10)'),
        '15' => t('Excellent (15)'),
      ),
      '#default_value' => $default_rb_bon_value,
      '#limit_validation_errors' => array(array('included_comments_table')),
      // DOUBLE ARRAY. Because drupal docs suck.
      '#ajax' => array(
        'callback' => '_item_helper_ajax_add_comments',
        'wrapper' => 'item-helper-included-comments-table',
        'method' => 'replace',
        'effect' => 'fade',
      ),
    );
    // Figure out the heads next.
    $headers =  array(
      t('Item creation posts'),
      t('Roll type'),
      '',
      '',
      '',
      t('Result'),
      t('(X)'),
    );
    if ($user_can_set_diffs) {
      $headers =  array(
        t('Item creation posts'),
        t('Roll type'),
        t('Flat bonus'),
        '',
        '',
        t('Result'),
        t('(X)'),
      );
    }
    // Setup table format.
    $form['item_helper']['included_comments']['included_comments_table'] = array(
      '#prefix' => '<div id="item-helper-included-comments-table">',
      '#suffix' => '</div>',
      '#theme' => 'table',
      '#header' => $headers,
      '#rows' => array(),
      '#attributes' => array('id' => 'item_helper_included_comments_table'),
      '#empty' => t('No posts found.'),
      '#tree' => TRUE, // So can be picked up later.
    );

    // Update the set values for the comments for RP bonuses.
    // This loop ensures all gathered values on display have the correct RP and Diff bonuses for
    // Their available settings.
    foreach ($found_comments as $index => $comment) {
      // Make sure the default is set correctly for the RP bonus.
      $found_comments[$index]->rp_bonus = $default_rb_bon_value;
      // Make sure the default is set correctly for the diff.
      $found_comments[$index]->difficulty = $default_diff_value;
      // Set the defaults if needed.
      $found_comments[$index]->might_1 = !empty($found_comments[$index]->might_1) ? $found_comments[$index]->might_1 : 0;
      $found_comments[$index]->might_2 = !empty($found_comments[$index]->might_2) ? $found_comments[$index]->might_2 : $found_comments[$index]->might_1;
    }
    // Calculate the results for the set
    $found_comments = _item_helper_calculate_results($found_comments);
    // Add the comments.
    foreach ($found_comments as $cid => $item_comment) {
      $comment = comment_load($cid);
      $comment_uri = comment_uri($comment);
      // Get the full text.
      $comment_text = '';
      if (!empty($comment->comment_body[$comment->language][0]['value'])) {
        $comment_text = check_markup($comment->comment_body[$comment->language][0]['value'], $comment->comment_body[$comment->language][0]['format']);
      }
      $comment_ooc = '';
      if (!empty($comment->field_ooc[$comment->language][0]['value'])) {
        $comment_ooc = check_markup($comment->field_ooc[$comment->language][0]['value'], $comment->field_ooc[$comment->language][0]['format']);
      }
      // Strip HTML - we can't use it in title overheads.
      $comment_text = strip_tags($comment_text);
      $comment_ooc = strip_tags($comment_ooc);
      $comment_title = check_plain($comment_text);
      if (!empty($comment_ooc)) {
        $comment_title .= "\n" . 'OOC: ' . check_plain($comment_ooc);
      }
      // Put together.
      $comment_display = '<a href="/' . $comment_uri['path'] . '#' . $comment_uri['options']['fragment'] . '" title="' . $comment_title . '">' .
        check_plain($comment->subject) . '</a>';
      $comment_display = array(
        '#type' => 'item',
        '#markup' => $comment_display,
      );
      $dice_rolls = _dice_roller_get_roll($cid, 'c');
      $comment_display['#markup'] .= !empty($dice_rolls)
        ? theme('dice_roller_results', array('dice_rolls' => $dice_rolls))
        : '</br>' . t('No rolls found');
      $mights['comment_text'] = $comment_display;
      $mights['override_might'] = array(
        '#type' => 'checkbox',
        '#title' => t('Override mights'),
        '#default_value' => isset($item_comment->override_might) ? $item_comment->override_might : FALSE,
        '#return_value' => TRUE,
        '#access' => $user_can_set_diffs,
        '#limit_validation_errors' => array(array('included_comments_table')),
        // DOUBLE ARRAY. Because drupal docs suck.
        '#ajax' => array(
          'callback' => '_item_helper_ajax_add_comments',
          'wrapper' => 'item-helper-included-comments-table',
          'method' => 'replace',
          'effect' => 'fade',
        ),
      );
      $mights['might_1'] = array(
        '#prefix' => '<table class="item_helper_mights" style="margin:0;padding:0;">' .
          '<tbody style="border:none;"><tr><td>',
        '#suffix' => '</td>',
        '#type' => 'textfield',
        '#title' => t('First might'),
        '#default_value' => $item_comment->might_1,
        '#size' => 4,
        '#states' => array(
          'visible' => array(
            ':input[name="included_comments_table[' . $item_comment->cid . '][mights][override_might]"]' => array('checked' => TRUE),
          ),
        ),
        '#access' => $user_can_set_diffs,
        '#limit_validation_errors' => array(array('included_comments_table')),
        // DOUBLE ARRAY. Because drupal docs suck.
        '#ajax' => array(
          'callback' => '_item_helper_ajax_add_comments',
          'wrapper' => 'item-helper-included-comments-table',
          'method' => 'replace',
          'effect' => 'fade',
        ),
      );
      $mights['might_2'] = array(
        '#prefix' => '<td style="padding-left:1em;">',
        '#suffix' => '</td></tr></tbody></table>',
        '#type' => 'textfield',
        '#title' => t('Second might'),
        '#default_value' => $item_comment->might_2,
        '#size' => 4,
        '#states' => array(
          'visible' => array(
            ':input[name="included_comments_table[' . $item_comment->cid . '][mights][override_might]"]' => array('checked' => TRUE),
          ),
        ),
        '#access' => $user_can_set_diffs,
        '#limit_validation_errors' => array(array('included_comments_table')),
        // DOUBLE ARRAY. Because drupal docs suck.
        '#ajax' => array(
          'callback' => '_item_helper_ajax_add_comments',
          'wrapper' => 'item-helper-included-comments-table',
          'method' => 'replace',
          'effect' => 'fade',
        ),
      );
      $roll_type = array(
        '#type' => 'radios',
        '#options' => array(
          'gen_pp' => t('PP for item'),
          'prep_bon' => t('1/7 PP might bon'),
          'prep_diff' => t('1/7 PP reduce diff'),
          'no_calcs' => t('No roll'),
        ),
        '#default_value' => isset($item_comment->roll_type) ? $item_comment->roll_type : 'gen_pp',
        '#limit_validation_errors' => array(array('included_comments_table')),
        // DOUBLE ARRAY. Because drupal docs suck.
        '#ajax' => array(
          'callback' => '_item_helper_ajax_add_comments',
          'wrapper' => 'item-helper-included-comments-table',
          'method' => 'replace',
          'effect' => 'fade',
        ),
      );
      // Configure the set a flat bonus field.
      $set_bonus = array(
        '#type' => 'textfield',
        '#default_value' => isset($item_comment->set_bonus) ? $item_comment->set_bonus : 0,
        '#size' => 4,
        '#access' => $user_can_set_diffs,
        '#limit_validation_errors' => array(array('included_comments_table')),
        // DOUBLE ARRAY. Because drupal docs suck.
        '#ajax' => array(
          'callback' => '_item_helper_ajax_add_comments',
          'wrapper' => 'item-helper-included-comments-table',
          'method' => 'replace',
          'effect' => 'fade',
        ),
      );
      // Add the default bonus to the table as a hidden value field.
      // That way the submission system still knows where to look for this in the end.
      $difficulty =  array(
        '#type' => 'hidden',
        '#value' => isset($item_comment->difficulty) ? $item_comment->difficulty : $default_diff_value,
      );
      // Add the default bonus to the table as a hidden value field.
      // That way the submission system still knows where to look for this in the end.
      $rp_bonus = array(
        '#type' => 'hidden',
        '#value' => isset($item_comment->rp_bonus) ? $item_comment->rp_bonus : $default_rb_bon_value,
      );
      // Display results.
      $results = array(
        '#type' => 'item',
        '#markup' => isset($item_comment->results) ? $item_comment->results : t('Not calculated'),
      );
      $remove = array(
        '#type' => 'checkbox',
        '#return_value' => 1,
        '#default_value' => 0,
      );
      $form['item_helper']['included_comments']['included_comments_table'][$cid] = array(
        'mights' => &$mights,
        'roll_type' => &$roll_type,
        'rp_bonus' => &$rp_bonus,
        'set_bonus'=> &$set_bonus,
        'difficulty' => &$difficulty,
        'results' => &$results,
        'order' => &$order,
        'remove' => &$remove,
      );
      $form['item_helper']['included_comments']['included_comments_table']['#rows'][] = array(
        'class' => array('draggable'),
        'data' => array(
          array('data' => &$mights),
          array('data' => &$roll_type),
          array('data' => &$set_bonus),
          array('data' => &$difficulty),
          array('data' => &$rp_bonus),
          array('data' => &$results),
          array('data' => &$remove),
        )
      );
      unset($mights);
      unset($roll_type);
      unset($rp_bonus);
      unset($set_bonus);
      unset($difficulty);
      unset($results);
      unset($remove);
    }
    // Add calculate button.
    $form['item_helper']['included_comments']['recalculate'] = array(
      '#type' => 'button',
      '#value' => t('Calculate PP'),
      '#limit_validation_errors' => array(array('included_comments_table')),
      // DOUBLE ARRAY. Because drupal docs suck.
      '#ajax' => array(
        'callback' => '_item_helper_ajax_add_comments',
        'wrapper' => 'item-helper-included-comments-table',
        'method' => 'replace',
        'effect' => 'fade',
      ),
    );
    // Check workflow state and disable from changing IFF workflow approved. We don't want meddling after the fact.
    if (isset($form['#node']->workflow) && (isset($form['#node']->workflow_state_name) && $form['#node']->workflow_state_name == t('approved'))) {
      unset($form['item_helper']['add_comments']);
      $form['item_helper']['included_comments']['#disabled'] = TRUE;
    }
    // Hide the field creation history elements. We don't want users meddling with those records.
    $form['field_creation_history']['#access'] = FALSE;
  }
}

/**
 * AJAX function, callback for load comments after room selected.
 */
function _item_helper_ajax_load_room_comments($form, $form_state) {
  return $form['item_helper']['add_comments']['add_comments_table'];
}

/**
 * AJAX function, callback for load comments after room selected.
 */
function _item_helper_ajax_add_comments($form, $form_state) {
  return isset($form['item_helper']['included_comments']['included_comments_table']) ?
    $form['item_helper']['included_comments']['included_comments_table'] : '';
}

/**
 * Autocomplete function, callback for room look up.
 */
function _item_helper_autocomplete_room($string = '') {
  $matches = array();
  $room_type = variable_get('item_helper_room_type', '');
  if (!empty($string) && !empty($room_type)) {
    $results = db_query('SELECT n.nid, n.title FROM {node} n ' .
      'WHERE n.type LIKE :type ' .
      'AND n.title LIKE :title',
      array(':type' => $room_type, ':title' => '%' . $string . '%'));
    foreach ($results as $result) {
      $label = $result->title . ' [nid:' . $result->nid . ']';
      $matches[ check_plain($label) ] = check_plain($label);
    }
  }
  drupal_json_output($matches);
}

/**
 * Implementation of admin settings form.
 */
function _item_helper_admin_settings($form, &$form_state) {
  // Setting for workflow to drop the NPCs into on being claimed.
  $content_types = node_type_get_types();
  $types = array();
  foreach ($content_types as $type_id => $content_type) {
    $types[$type_id] = $content_type->name;
  }
  $form['item_helper_item_type'] = array(
    '#title' => t('Item content type'),
    '#description' => t('Content type for items.'),
    '#type' => 'select',
    '#options' => $types,
    '#default_value' => variable_get('item_helper_item_type', ''),
  );
  $form['item_helper_room_type'] = array(
    '#title' => t('Room content type'),
    '#description' => t('Content type for rooms.'),
    '#type' => 'select',
    '#options' => $types,
    '#default_value' => variable_get('item_helper_room_type', ''),
  );
  $form['item_helper_num_posts'] = array(
    '#title' => t('Number of posts'),
    '#description' => t('Number of posts to display in interface.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('item_helper_num_posts', 50),
  );
  return system_settings_form($form);
}

/**
 * Helper function, given a set of partial or full comments, calculate results.
 */
function _item_helper_calculate_results($found_comments) {
  $ongoing_PP = 0;
  $ongoing_100 = 0;
  $ongoing_1 = 0;
  $ongoing_prep_bonus = 0;
  $ongoing_prep_diff = 0;
  foreach ($found_comments as $cid => $item_comment) {
    // Set defaults if not already set.
    $item_comment->roll_type = isset($item_comment->roll_type) ? $item_comment->roll_type : 'gen_pp';
    if (isset($item_comment->mights)) {
      $item_comment->override_might = isset($item_comment->mights['override_might']) ? $item_comment->mights['override_might'] : 0;
      $item_comment->might_1 = isset($item_comment->mights['might_1']) ? $item_comment->mights['might_1'] : 0;
      $item_comment->might_2 = isset($item_comment->mights['might_2']) ? $item_comment->mights['might_2'] : $item_comment->mights['might_1'];
    }
    $item_comment->set_bonus = isset($item_comment->set_bonus) ? $item_comment->set_bonus : 0;
    $item_comment->difficulty = isset($item_comment->difficulty) ? $item_comment->difficulty : 45;
    $diff_txt = t('Difficulty @difficulty.', array('@difficulty' => $item_comment->difficulty));
    $item_comment->rp_bonus = isset($item_comment->rp_bonus) ? $item_comment->rp_bonus : 5;
    $rp_bonus = isset($item_comment->rp_bonus) ? $item_comment->rp_bonus : 5;
    // Grab rolls and start calculations.
    $dice_rolls = _dice_roller_get_roll($cid, 'c');
    $set_bonus_txt = '';
    $no_roll_txt = '';
    if (!empty($item_comment->set_bonus)) {
      $ongoing_prep_bonus += $item_comment->set_bonus;
      $set_bonus_txt = t('Add @set_bonus flat circumstance bonus.', array('@set_bonus' => $item_comment->set_bonus));
    }
    $roll_txt = t('No roll on this post.');
    if (!empty($dice_rolls)) {
      $mights = array();
      $rolls = array();
      foreach ($dice_rolls as $index => $dice_roll) {
        $results = explode(',', $dice_rolls[$index]['roll_result']);
        if (!empty($item_comment->override_might)) {
          $mights[] = $item_comment->might_1;
          if (!empty($item_comment->might_2)) {
            $mights[] = $item_comment->might_2;
          }
        }
        else {
          $might = array_pop($results);
          $might = explode('=', $might);
          $mights[] = isset($might[0]) ? trim($might[0]) : 0;
        }
        $rolls[] = isset($results[0]) ? trim($results[0]) : 0;
      }
      $roll_ruling = array();
      if (count($mights) == 1) {
        $roll_ruling = _dice_ruler_make_ruling(
          $mights[0] + $rp_bonus + $ongoing_prep_bonus,
          $item_comment->difficulty - $ongoing_prep_diff,
          0,
          $rolls[0]
        );
        if ($rolls[0] == 1) {
          $ongoing_1++;
        }
        if ($rolls[0] == 100) {
          $ongoing_100++;
        }
      }
      if (count($mights) > 1) {
        $roll_ruling = _dice_ruler_make_two_trait_ruling(
          $mights[0] + $rp_bonus + $ongoing_prep_bonus,
          $item_comment->difficulty - $ongoing_prep_diff,
          0,
          $rolls[0],
          $mights[1] + $rp_bonus + $ongoing_prep_bonus,
          $item_comment->difficulty - $ongoing_prep_diff,
          0,
          $rolls[1]
        );
        if ($rolls[0] == 1) {
          $ongoing_1++;
        }
        if ($rolls[0] == 100) {
          $ongoing_100++;
        }
        if ($rolls[1] == 1) {
          $ongoing_1++;
        }
        if ($rolls[1] == 100) {
          $ongoing_100++;
        }
      }
      if (!empty($roll_ruling)) {
        $winsby_generated = $roll_ruling[6];
        $PP_generated = $roll_ruling[7];
        if ($winsby_generated < 0 && $item_comment->roll_type == 'gen_pp') { // If just gen_add, then add.
          $lost_PP = floor( $ongoing_PP * (($winsby_generated * -1) / 100) );
          $roll_txt = t('Roll lost ' . $lost_PP . 'PP, ' . $winsby_generated . ' winsby.');
          $ongoing_PP -= $lost_PP;
        }
        if ($winsby_generated >= 0 && $item_comment->roll_type == 'gen_pp') { // If just gen_add, then add.
          $roll_txt = t('Roll generated ' . $PP_generated . ' PP, ' . $winsby_generated . ' winsby.');
          $ongoing_PP += $PP_generated;
        }
        if ($item_comment->roll_type == 'prep_diff') { // If prep_diff, divide, add.
          $roll_txt = t('Roll did not change diff for future rolls.');
          $new_prep_diff += floor($PP_generated / 7);
          if ($new_prep_diff > $ongoing_prep_diff) {
            $roll_txt = t('Roll reduces diff for future rolls.');
            $ongoing_prep_diff = $new_prep_diff; // Only apply if the bonus is greater.
          }
        }
        if ($item_comment->roll_type == 'prep_bon') { // If prep_bonus, divide, add.
          $roll_txt = t('Roll did not add bonus for future rolls.');
          $new_prep_bonus += floor($PP_generated / 7);
          if ($new_prep_bonus > $ongoing_prep_bonus) {
            $roll_txt = t('Roll added bonus for future rolls.');
            $ongoing_prep_bonus = $new_prep_bonus; // Only apply if the bonus is greater.
          }
        }
        if ($item_comment->roll_type == 'no_calcs') { // If just set_bonus, then add.
          $roll_txt = t('No roll on this post.');
        }
      }
    }
    $might_1 = empty($mights[0]) ? '' : $mights[0];
    $might_2 = empty($mights[1]) ? '' : '/ ' . $mights[1];
    $break_1 = empty($set_bonus_txt) ? '' : '</br>';
    $break_2 = empty($roll_txt) ? '' : '</br>';
    $ongoing_100_text = $ongoing_100;
    if ($ongoing_100 == 0) {
      $ongoing_100_text = 'no';
    }
    $ongoing_1_text = $ongoing_1;
    if ($ongoing_1 == 0) {
      $ongoing_1_text = 'no';
    }
    $item_comment->results = t(
      '%roll_txt' . $break_2 .
      '@diff_text </br>' .
      'Mights @might1 @might2 </br> ' .
      '@set_bonus_txt' . $break_1 .
      '@rp RP bonus </br> ' .
      '@prep Prep bonus / @diff Diff mod </br> ' .
      '<span style="font-weight:bold;">@PP PP / <span style="color:green;">@100 100s</span> / <span style="color:red;">@1 1s</span></span>' .
      '',
      array('@diff_text' => $diff_txt, '@set_bonus_txt' => $set_bonus_txt, '%roll_txt' => $roll_txt,
        '@might1' => !empty($might_1) ? $might_1 : 0, '@might2' => !empty($might_2) ? $might_2 : 0,
        '@PP' => number_format($ongoing_PP), '@100' => $ongoing_100_text, '@1' => $ongoing_1_text,
        '@rp' => $rp_bonus, '@prep' => $ongoing_prep_bonus, '@diff' => $ongoing_prep_diff * -1 ));
  }
  return $found_comments;
}

/**
 * Helper function, given a string retrieve any nid in the format [nid:XXX].
 * Or look for the node by title.
 */
function _item_helper_autocomplete_get_nid($room_selected) {
  $result = preg_match('/\[nid:([0-9]+)\]$/', $room_selected, $matches);
  if ($result > 0) {
    $nid = $matches[$result];
    $node = node_load($nid);
    if (empty($node)) {
      $nodes = node_load_multiple(array(), array('title' => $room_selected));
      foreach ($nodes as $nid => $this_node) {
        $node = $this_node;
      }
    }
    $room_type = variable_get('item_helper_room_type', '');
    if (!empty($node) && $node->type == $room_type && $node->status == 1) {
      return $node->nid;
    }
  }
  return FALSE;
}

/**
 * DB function, get comments per room.
 */
function _item_helper_get_comments_by_room($nid) {
  $post_limit = variable_get('item_helper_num_posts', 50);
  $results = db_query('SELECT * FROM {comment} ' .
    'WHERE nid = :nid ' .
    'ORDER BY created DESC LIMIT 0, ' . $post_limit,
    array(':nid' => $nid))->fetchAll();
  return $results;
}

/**
 * DB function, get comments by item nid.
 */
function _item_helper_get_comments($nid) {
  $results = db_query('SELECT * FROM {item_helper_item_comments} ' .
    'WHERE nid = :nid ' .
    'ORDER BY cid ASC',
    array(':nid' => $nid))->fetchAll();
  return $results;
}

/**
 * DB function, delete comment by item nid.
 */
function _item_helper_delete_comments($nid) {
  db_query('DELETE FROM {item_helper_item_comments} ' .
    'WHERE nid = :nid',
    array(':nid' => $nid));
}

/**
 * CRUD function, get comment by item nid, cid.
 */
function _item_helper_get_comment($nid, $cid) {
  $results = db_query('SELECT * FROM {item_helper_item_comments} ' .
    'WHERE nid = :nid AND cid = :cid',
    array(':nid' => $nid, ':cid' => $cid))->fetchAll();
  return $results;
}

/**
 * CRUD function, get comments by item nid.
 */
function _item_helper_insert_comment($data) {
  $data = (array) $data;
  $result = _item_helper_get_comment($data['nid'], $data['cid']);
  if (!empty($result)) {
    _item_helper_update_comment($data);
  }
  drupal_write_record('item_helper_item_comments', $data);
}

/**
 * CRUD function, get comments by item nid.
 */
function _item_helper_update_comment($data) {
  $data = (array) $data;
  $result = _item_helper_get_comment($data['nid'], $data['cid']);
  if (empty($result)) {
    _item_helper_insert_comment($data);
  }
  drupal_write_record('item_helper_item_comments', $data, array('nid', 'cid'));
}

/**
 * CRUD function, get comment by item nid, cid.
 */
function _item_helper_delete_comment($nid, $cid) {
  db_query('DELETE FROM {item_helper_item_comments} ' .
    'WHERE nid = :nid AND cid = :cid',
    array(':nid' => $nid, ':cid' => $cid));
}