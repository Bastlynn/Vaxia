<?php
/**
 * @file
 * Provide a vacation button for users to temp remove roles.
 */

/**
 * Implements hook_permission().
 */
function vacation_permission() {
  return array(
    'can go on vacation'=> array(
      'title' => t('can go on vacation'),
      'description' => t('Can go on vacation.'),
    ),
    'administer vacation'=> array(
      'title' => t('administer vacation'),
      'description' => t('Administer vacation.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function vacation_menu() {
  $items['admin/vaxia/vacation'] = array(
    'title' => 'Vacation configurations',
    'description' => 'Vacation configurations',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer vacation'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vacation_admin_form'),
  );
  return $items;
}

/**
 * Menu callback for admin page.
 */
function vacation_admin_form() {
  $form = array();
  $default_message = t('<b>If you know you will be absent for some time: Please let us know! '.
    'We need to know if you\'ll be around or not.</b> <br/> When you go on vacation mode all of ' .
    'your additional permissions are removed. During this time you will not receive emails, ' .
    'notifications, or other communications from the site.');
  $form['vacation_description'] = array(
    '#title' => t('Vacation descriptions'),
    '#type' => 'textarea',
    '#default_value' => variable_get('vacation_description', $default_message),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_cron().
 */
function vacation_cron() {
  $last_run = variable_get('vacation_cron', 0);
  $yesterday = strtotime('-1 day');
  if ($last_run < $yesterday) {
    $today = strtotime(date('m/d/Y') . ' 00:00:01'); // We always want to plan to run just after midnight.
    variable_set('vacation_cron', $today);
    // End all vacations.
    _vacation_end_todays_vacations();
  }
}

/**
 * Implements hook_cronapi().
 */
function vacation_cronapi($op, $job = NULL) {
  $items['_vacation_end_todays_vacations'] = array(
  	'description' => 'Vacation: Return users from vacation',
  	'rule' => '1 0 * * *', // Once a day at 12:01 AM.
  );
  return $items;
}

/**
 * Implements hook_user_delete().
 */
function vacation_user_delete($account) {
  _vacation_delete_vacation_by_uid($account->uid);
}

/**
 * Implements hook_rules_event_info().
 */
function vacation_rules_event_info() {
  $items = array(
    'vacation_start' => array(
      'label' => t('Vacation start'),
      'group' => t('Vacation'),
      'variables' => array(
        'user' => array(
            'type' => 'user',
            'label' => t('Vacation user'),
        ),
      ),
    ),
    'vacation_end' => array(
      'label' => t('Vacation end'),
      'group' => t('Vacation'),
      'variables' => array(
        'user' => array(
            'type' => 'user',
            'label' => t('Vacation user'),
        ),
      ),
    ),
  );
  return $items;
}

/**
 * Implements hook_rules_action_info().
 */
function vacation_rules_action_info() {
  $items = array(
    'vacation_rules_on' => array(
      'label' => t('Put a user on vacation'),
      'group' => t('Vacation'),
      'parameter' => array(
        'user' => array(
          'type' => 'user',
          'label' => t('User'),
        ),
        // How long to go.
        'duration' => array(
          'type' => 'date',
          'label' => t('Ends on'),
          'description' => t('The day the vacation ends.'),
        ),
      ),
    ),
    'vacation_rules_off' => array(
      'label' => t('Take a user off vacation'),
      'group' => t('Vacation'),
      'parameter' => array(
        // Account to put on vacation.
        'user' => array(
          'type' => 'user',
          'label' => t('User'),
        ),
      ),
    ),
  );
  return $items;
}

/**
 * Callback for rules action.
 */
function vacation_rules_on($user, $end_date) {
  // Mark the vacation in the system.
  $vacation = array(
    'uid' => $user->uid,
    'start' => strtotime('now'),
    'end' => $end_date,
    'positions' => $account->roles,
  );
  _vacation_create_vacation($vacation, $end);
}

/**
 * Callback for rules action.
 */
function vacation_rules_off($user) {
  $vacation = _vacation_get_current_vacation_uid($user->uid);
  _vacation_end_vacation($vacation);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vacation_form_user_profile_form_alter(&$form, &$form_state) {
  // If user account has any of the roles to watch for.
  $extra_roles = user_roles(FALSE, 'can go on vacation');
  $default_message = variable_get('vacation_description', '');
  $has_extra = FALSE;
  // If they have the extra roles, they're not by definition on vacation at this time.
  // So close any current vacation and move on.
  foreach ($extra_roles as $extra_role) {
    if (in_array($extra_role, $form['#user']->roles)) {
      $vacation = _vacation_get_current_vacation_uid($form['#user']->uid);
      _vacation_end_vacation($vacation);
      $has_extra = TRUE;
      break;
    }
  }
  // Display the form.
  $vacation = _vacation_get_current_vacation_uid($form['#user']->uid);
  if ($has_extra && !$vacation) {
    // Provide element.
    $form['vacation'] = array(
      '#type' => 'fieldset',
      '#title' => t('Vacation mode'),
      '#description' => $default_message,
      '#weight' => 1000,
    );
    $options = array(
      '3 days' => '3 days',
      '1 week' => '1 week',
      '2 weeks' => '2 weeks',
      '1 month' => '1 month',
      '2 months' => '2 months',
      '3 months' => '3 months',
      'indefinitely' => 'longer (resign)',
    );
    $form['vacation']['vacation_end'] = array(
      '#type' => 'select',
      '#options' => $options,
      '#default_option' => '1 week',
    );
    $form['vacation']['vacation_uid'] = array(
      '#type' => 'hidden',
      '#value' => $form['#user']->uid,
    );
    $form['vacation']['vacation_submit'] = array(
      '#type' => 'submit',
      '#value' => t('Go on vacation'),
      '#weight' => 100,
    );
    $form['vacation']['vacation_submit']['#submit'][] = '_vacation_go_on_vacation';
    $form = module_invoke_all('vacation', $form, $form_state);
  }
  elseif ($vacation) {
    // Provide element.
    $form['vacation'] = array(
     '#markup' => t('You are currently listed as on vacation. Based on the options selected ' .
       'when you went on vacation, you will be on vacation until: :end',
       array(':end' => date('m/d/Y', $vacation->end))),
      '#weight' => 1000,
    );
  }
  return $form;
}

/**
 * Implements form submit handler.
 */
function _vacation_go_on_vacation(&$form, &$form_state) {
  $uid = $form_state['values']['vacation_uid'];
  if ($form_state['values']['vacation_end'] != 'indefinitely') {
    // Mark the vacation in the system.
    $end = strtotime($form_state['values']['vacation_end']);
    $vacation = array(
      'uid' => $uid,
      'start' => strtotime('now'),
      'end' => $end,
    );
    _vacation_create_vacation($vacation);
  }
  else {
    // Retiring.
    // Set it into the user account roles.
    $account->roles = array(); // Preserve any additional roles in vacation mode with rules.
    _vacation_update_roles($account);
    // Trigger the rule for it.
    if (function_exists('rules_invoke_event')) {
      rules_invoke_event('vacation_start', $account);
    }
  }
}

/**
 * Helper function update roles for given user.
 */
function _vacation_update_roles($account) {
  // Remove all roles.
  db_delete('users_roles')->condition('uid', $account->uid)->execute();
  // Re-add the roles for the minimum drupal install.
  $query = db_insert('users_roles')->fields(array('uid', 'rid'));
  foreach (array_keys($account->roles) as $rid) {
    if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
      $query->values(array(
        'uid' => $account->uid,
        'rid' => $rid,
      ));
    }
  }
  $query->execute();
  // And destroy the session.
  drupal_session_destroy_uid($account->uid);
}

/**
 * CRUD function. Set or create vacation info for a node.
 */
function _vacation_create_vacation($vacation) {
  $data = (array) $vacation;
  if (isset($data['vid'])) {
    _vacation_update_vacation($vacation);
  }
  else {
    // Load the vacation user.
    $account = user_load($data['uid']);
    if (empty($data['uid'])) {
      return FALSE; // Can't create a vacation for a non-existant user.
    }
    // New vacation post. Set the new cycle and open time.
    $data['positions'] = !empty($data['positions']) ? $data['positions'] : $account->roles;
    $data['positions'] = serialize($data['positions']);
    // Write it.
    drupal_write_record('vacation', $data);
    // Set it into the user account roles.
    $account->roles = array(); // Preserve any additional roles in vacation mode with rules.
    _vacation_update_roles($account);
    // Trigger the rule for it.
    if (function_exists('rules_invoke_event')) {
      rules_invoke_event('vacation_start', $account);
    }
  }
  return (object) $data;
}

/**
 * CRUD function. Set or create vacation info for a node.
 */
function _vacation_update_vacation($vacation) {
  $data = (array) $vacation;
  if (isset($data['vid'])) {
    $old_data = _vacation_get_vacation_by_vid($data['vid']);
    $data = array_merge( (array) $old_data, $data);
    $data['positions'] = serialize($data['positions']);
    drupal_write_record('vacation', $data, 'vid');
  }
  else {
    _vacation_create_vacation($vacation);
  }
  return (object) $data;
}

/**
 * CRUD function. Get vacation info for an vacation.
 */
function _vacation_get_vacation($vid) {
  if (empty($vid)) {
    return FALSE; // Bail if error.
  }
  $vacation = db_query('SELECT * FROM {vacation} WHERE vid = :vid',
    array(':vid' => $vid))->fetchObject();
  if (empty($vacation->vid)) {
    return FALSE; // Bail if error.
  }
  if (!empty($vacation->positions)) {
    $vacation->positions = unserialize($vacation->positions);
  }
  return $vacation;
}

/**
 * DB function. Get vacation info for a node.
 */
function _vacation_get_vacations_by_uid($uid) {
  if (empty($uid)) {
    return FALSE; // Bail if error.
  }
  $vacations = db_query('SELECT * FROM {vacation} WHERE uid = :uid',
    array(':uid' => $uid))->fetchObject();
  $vacation_set = array();
  foreach ($vacations as $vacation) {
    if (!empty($vacation->positions)) {
      $vacation->positions = unserialize($vacation->positions);
    }
    $vacation_set[] = $vacation;
  }
  return $vacation_set;
}

/**
 * DB function. Get current vacation info - if exists.
 */
function _vacation_get_current_vacation_uid($uid) {
  if (empty($uid)) {
    return FALSE; // Bail if error.
  }
  $vacation = db_query('SELECT * FROM {vacation} ' .
    'WHERE uid = :uid ' .
    'AND :now BETWEEN start AND end',
    array(':uid' => $uid, ':now' => strtotime('now')))->fetchObject();
  if (empty($vacation->vid)) {
    return FALSE; // Bail - this user is not on vacation.
  }
  if (!empty($vacation->positions)) {
    $vacation->positions = unserialize($vacation->positions);
  }
  return $vacation;
}

/**
 * DB function. Force end a vacation.
 */
function _vacation_end_vacation($vacation) {
  if ($vacation && !empty($vacation->vid)) {
    _vacation_delete_vacation($vacation->vid);
    $account = user_load($vacation->uid);
    // Put the user's roles back.
    if (isset($vacation->uid)) {
      $account->roles = $vacation->positions;
      _vacation_update_roles($account);
    }
    // If there's a vacation ending, set it.
    if (function_exists('rules_invoke_event')) {  
      rules_invoke_event('vacation_end', $account);
    }
    return TRUE;
  }
  return FALSE;
}

/**
 * Cron handler.
 * DB function, remove all vacations ending today.
 */
function _vacation_end_todays_vacations() {
  // Today is passed as a timestamp.
  $today = strtotime(date('m/d/Y') . ' 00:00:01');
  $tomorrow = strtotime('+1 day', $today);
  // Get everything between today and tomorrow.
  $vacations = db_query('SELECT * FROM {vacation} ' .
    'WHERE end BETWEEN :today AND :tomorrow',
    array(':today' => $today, ':tomorrow' => $tomorrow));
  watchdog('vacation', 'Checking for vacations ending between ' .
     date('m/d/y H:i:s', $today) . 'and '
    . date('m/d/y H:i:s', $tomorrow) .' .');
  $count = 0;
  if (!$vacations) {
    return $count;
  }
  foreach ($vacations as $vacation) {
    if (!empty($vacation->vid)) {
      if (!empty($vacation->positions)) {
        $vacation->positions = unserialize($vacation->positions);
      }
      watchdog('vacation', 'Ending vacation ID #' . $vacation->vid .
        ' for user #' . $vacation->uid); 
      _vacation_end_vacation($vacation);
    }
  }
  return $count;
}

/**
 * CRUD function. Delete vacation info for a node.
 */
function _vacation_delete_vacation($vid) {
  if (empty($vid)) {
    return FALSE; // Bail if error.
  }
  db_query('DELETE FROM {vacation} WHERE vid = :vid',
    array(':vid' => $vid));
}

/**
 * CRUD function. Delete vacation info for a node.
 */
function _vacation_delete_vacation_by_uid($uid) {
  if (empty($uid)) {
    return FALSE; // Bail if error.
  }
  db_query('DELETE FROM {vacation} WHERE uid = :uid',
    array(':uid' => $uid));
}