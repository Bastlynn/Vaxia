<?php
/**
 * @file
 * Code for Reputations.
 */

// Once a month lower the reputation XP for everyone.

/**
 * Implements hook_cron().
 */
function rpg_rep_cron() {
  $last_run = variable_get('rpg_rep_sheet_cron', 0);
  $yesterday = strtotime('-1 day');
  if ($last_run < $yesterday) {
    variable_set('rpg_rep_sheet_cron', strtotime('now'));
    // Check if this is the first of the month.
    $day = date('j');
    if ($day == '1') {
      _rpg_rep_cron();
      watchdog('rpg_rep', 'Ran rpg rep updates.');
    }
  }
}
/**
 * Process the reputation crons.
 */
function _rpg_rep_cron() {
  // Run queries for each setting.
  $settings = variable_get('rpg_rep_settings', array('Vaxia', 'Sirian'));
  foreach ($settings as $setting) {
    $reps = array();
    foreach(_rpg_rep_get_groups($setting) as $gid => $group) {
      $reps[] = 'rep_' . $gid;
    }
    // Get all PCs with reps type.
    // Lower reps for those with positive.
    $sheets = db_query('UPDATE {character_sheet_xp} x ' . // With an XP score
      'SET x.xp = (x.xp - 1) ' . // For all reputations over 0, reduce by 1.
      'WHERE x.type IN (:rep) '.  // YES we want to do this to inactive PCs as well. So don't check status.
      'AND x.xp > 0 '. // Only for those greater than 1.
      'AND x.nid NOT IN ( ' .
      'SELECT npc.entity_id FROM {field_data_field_is_npc} npc WHERE npc.field_is_npc_value = 1 ' . // Not an NPC
      ') '.
      'AND x.nid NOT IN ( ' .
      'SELECT onpc.entity_id FROM {field_data_field_is_open_npc} onpc WHERE onpc.field_is_open_npc_value = 1 ' . // Not an open NPC
      ') '.
      'AND x.nid NOT IN ( ' .
      'SELECT st.entity_id FROM {field_data_field_is_storyteller} st WHERE st.field_is_storyteller_value = 1 ' . // Not a storyteller.
      ')', array(':rep' => $rep));
    // Increase reps for those with negative.
    $sheets = db_query('UPDATE {character_sheet_xp} x ' . // With an XP score
      'SET x.xp = (x.xp + 1) ' . // For all reputations under 0, add by 1.
      'WHERE x.type IN (:rep) '.  // YES we want to do this to inactive PCs as well. So don't check status.
      'AND x.xp < 0 '. // Only for those less than 1.
      'AND x.nid NOT IN ( ' .
      'SELECT npc.entity_id FROM {field_data_field_is_npc} npc WHERE npc.field_is_npc_value = 1 ' . // Not an NPC
      ') '.
      'AND x.nid NOT IN ( ' .
      'SELECT onpc.entity_id FROM {field_data_field_is_open_npc} onpc WHERE onpc.field_is_open_npc_value = 1 ' . // Not an open NPC
      ') '.
      'AND x.nid NOT IN ( ' .
      'SELECT st.entity_id FROM {field_data_field_is_storyteller} st WHERE st.field_is_storyteller_value = 1 ' . // Not a storyteller.
      ')', array(':rep' => $rep));
    // Done - do the next setting.
  }
}

/**
 * Implements hook_permission().
 */
function rpg_rep_permission() {
  return array(
    'view reputation xp' => array(
      'title' => t('view reputation xp'),
      'description' => t('View reputation xp.'),
    ),
    'view own reputation xp' => array(
      'title' => t('view own reputation xp'),
      'description' => t('View own reputation xp.'),
    ),
    'give reputation xp' => array(
      'title' => t('give reputation xp'),
      'description' => t('Give reputation xp.'),
    ),
    'admin reputation xp' => array(
      'title' => t('admin reputation xp'),
      'description' => t('Administrate reputation xp.'),
    ),
  );
}


/**
 * Implements hook_comment_view().
 */
function rpg_rep_comment_view($comment) {
  global $user;
  if (user_access('view reputation xp') || ($comment->uid == $user->uid && user_access('view own reputation xp'))) {
    if (!empty($comment->field_comment_character[$comment->language][0]['nid'])) {
      $node = node_load($comment->field_comment_character[$comment->language][0]['nid']);
      $reps = _rpg_rep_display($node);
      if (!empty($reps)) {
        $element = array(
          '#type' => 'fieldset',
          '#title' => t('Reputation'),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#attributes' => array('class' => array('collapsible collapsed')),
        );
        $element['amounts'] = array(
          //'#type' => 'markup',
          '#markup' => theme('item_list', array('items' => $reps)),
        );
        // Add to comment content.
        $comment->content['rpg_rep'] = array(
          '#weight' => !empty($weight) ? $weight : 90,
          '#markup' => drupal_render($element),
        );
      }
    }
  }
}

/**
 * Implements hook_scene_record_goal_info.
 */
function rpg_rep_scene_record_goal_info() {
  return array(
    '_rpg_rep_calculate_results' => array(
      'label'  => 'A running total for reputation.',
      'type' => array('fame'),
    ),
  );
}

/**
 * Implements hook_form_FORMID_alter().
 */
function rpg_rep_form__character_sheet_xp_form_alter(&$form, $form_state) {
  // Inject the rep form unto the character sheet XP form.
  return _rpg_rep_add_form($form, $form_state);
}

/**
 * Form for reputation.
 */
function _rpg_rep_add_form(&$form, $form_state) {
  global $user;
  // Add a display for the rep.
  $node = node_load($form['node_info']['nid']['#value']);
  if (user_access('view reputation xp') || ($node->uid == $user->uid && user_access('view own reputation xp'))) {
    $reps = _rpg_rep_display($node);
    if (!empty($reps)) {
      $form['node_info']['rpg_rep'] = array(
        '#type' => 'item',
        '#title' => t('Reputation details'),
        '#markup' => theme('item_list', array('items' => $reps)),
        '#weight' => 20,
      );
    }
  }
  // Add additional options for xp IIF allowed.
  // If not your own character.
  if (user_access('give reputation xp') && _rpg_rep_is_pc($node) && $node->uid != $user->uid) {
    // Add the UI for the rep.
    $groups = array();
    foreach (_rpg_rep_get_groups($node->field_realm[$node->language][0]['value']) as $gid => $group_name) {
      $groups[$gid] = $group_name;
    }
    // Add a form to handle reputation on it's own.
    $form['add_rpg_rep'] = array(
      '#type' => 'fieldset',
      '#title' => t('Add reputation'),
      '#collapsible' => TRUE,
    );
    $form['add_rpg_rep']['rpg_rep_amount'] = array(
      '#type' => 'textfield',
      '#title' => t('Add reputation'),
      '#size' => 6,
      '#description' => t('Adding a negative value will subtract reputation.'),
    );
    $form['add_rpg_rep']['rpg_rep_group'] = array(
      '#type' => 'select',
      '#options' => $groups,
      '#title' => t('For group'),
      '#description' => t('Select the group to add reputation for.'),
    );
    $form['add_rpg_rep']['add_rpg_rep_submit'] = array(
      '#type' => 'submit',
      '#value' => t('Add reputation'),
      '#validate' => array('_rpg_rep_add_validate'),
      '#submit' => array('_rpg_rep_add_submit'),
    );
  }
  return $form;
}

/**
 * Form validation handler.
 */
function _rpg_rep_add_validate(&$form, &$form_state) {
  $rpg_rep_amount = $form_state['values']['rpg_rep_amount'];
  if (empty($rpg_rep_amount)) {
    form_set_error('rpg_rep_amount', t('Empty value given for reputation.'));
  }
  if (!is_numeric($rpg_rep_amount)) {
    form_set_error('rpg_rep_amount', t('Reputation given is not a numeric value'));
  }
}

/**
 * Form submit handler for reputation.
 */
function _rpg_rep_add_submit(&$form, &$form_state) {
  global $user;
  $nid = $form_state['values']['nid'];
  $node = node_load($form_state['values']['nid']);
  $xp = $form_state['values']['rpg_rep_amount'];
  $gid = $form_state['values']['rpg_rep_group'];
  $groups = _rpg_rep_get_groups($node->field_realm[$node->language][0]['value']);
  $group = $groups[$gid];
  // Clear the cache if need be.
  if (module_exists('entitycache')) {
    cache_clear_all($nid, 'cache_entity_node');
  }
  // Make sure we don't go over or under 25.
  $current = _character_sheet_get_xp($nid, 'rep_' . $gid);
  // If positive, add as per standard XP.
  if ($xp > 0) {
    $new = $xp + $current;
    _character_sheet_update_xp($nid, $xp, 'rep_' . $gid);
    drupal_set_message(t('@xp reputation for @group has been added to this sheet.',
      array('@xp' => $xp, '@group' => $group)));
    $message = t('@xp reputation for @group added to @title by @user.',
      array('@xp' => $xp, '@group' => $group, '@title' => $character->title, '@user' => $user->name));
    _character_sheet_update_log($nid, 'rep_' . $gid, $message);
    return;
  }
  // If positive, remove as per standard XP.
  if ($xp < 0) {
    _character_sheet_update_xp($nid, $xp, 'rep_' . $gid);
    drupal_set_message(t('@xp reputation for @group  has been removed from this sheet.',
      array('@xp' => $xp, '@group' => $group)));
    $message = t('@xp reputation for @group added to @title by @user.',
      array('@xp' => $xp, '@group' => $group, '@title' => $character->title, '@user' => $user->name));
    _character_sheet_update_log($nid, 'rep_' . $gid, $message);
    return;
  }
}

function _rpg_rep_display($node) {
  // Cache reps early in case we can use them.
  static $reps = array();
  if (empty($node->nid)) {
    return array();
  }
  if (!empty($reps[$node->nid])) {
    return $reps[$node->nid];
  }
  // Nope? Ok look it up and save it then.
  if (!is_object($node)) {
    $node = node_load($node);
  }
  $groups = _rpg_rep_get_groups($node->field_realm[$node->language][0]['value']);
  $char_reps = array();
  foreach ($groups as $gid => $group_name) {
    $gxp = _character_sheet_get_xp($node->nid, 'rep_' . $gid);
    if ($gxp != 0) {
      $bonus = $gxp;
      // You can only get up to a cap in bonus.
      $cap = variable_get('rpg_rep_cap', 25);
      if (abs($gxp) > $cap) {
        $bonus = ($gxp > 0) ? $cap : $cap * -1;
      }
      $char_reps[$gid] = t('@group_name: @gxp rep for a modifier of @bonus to rolls.',
        array('@group_name' => $group_name, '@gxp' => $gxp, '@bonus' => $bonus));
    }
  }
  // Save it so we don't reload this info on every request.
  $reps[$node->nid] = $char_reps;
  return $reps[$node->nid];
}

function _rpg_rep_get_groups($realm) {
  // Check for empty realms and trim.
  $groups = array();
  $realm = trim($realm);
  if (empty($realm)) {
    return $groups;
  }
  // Filter return by matching realm for the character.
  // Get all group ids where the group is in the realm AND flagged.
  $results = db_query('SELECT n.title, f.entity_id ' .
    'FROM {field_data_field_provides_reputation} f ' .
    'LEFT JOIN {node} n ON n.nid = f.entity_id ' .
    'LEFT JOIN {field_data_field_tag_realm} r ON r.entity_id = f.entity_id ' .
    'LEFT JOIN {taxonomy_term_data} t ON t.tid = r.field_tag_realm_tid ' .
    'WHERE f.field_provides_reputation_value = 1 ' .
    'AND t.name LIKE :realm', array(':realm' => $realm));
  foreach ($results as $result) {
    $groups[$result->entity_id] = $result->title;
  }
  return $groups;
}

function _rpg_rep_is_pc($node) {
  if (!is_object($node)) {
    $node = node_load($node);
  }
  if ($node->field_is_storyteller[$node->language][0]['value'] == 0 &&
    $node->field_is_npc[$node->language][0]['value'] == 0 &&
    $node->field_is_open_npc[$node->language][0]['value'] == 0) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Scene result handler.
 */
function _rpg_rep_calculate_results($comment, &$context) {
  $message_items = array();
  // Set defaults.
  $context['posts'] = !empty($context['posts']) ? $context['posts'] : 0;
  if (strlen($comment->comment_body[$comment->language][0]['value']) > 100) {
    $context['posts']++;
  }
  // Set silver XP amount.
  $message_items[] = '<b>Up to ' . floor($context['posts'] / 2) . ' total reputation across all posters.</b>';
  return $message_items;
}

