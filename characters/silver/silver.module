<?php
/**
 * @file
 * Code for Silver.
 */

/**
* Implements hook_cron_queue_info().
*/
function silver_cron_queue_info() {
  $queues = array();
  $queues['vaxiaSilverQueue'] = array(
    'worker callback' => '_silver_character_daily_silver',
    'time' => 60,
  );
  return $queues;
}

/**
 * Implements hook_cron().
 */
function silver_cron() {
  $last_run = variable_get('vaxia_character_sheet_cron', 0);
  $yesterday = strtotime('-1 day');
  if ($last_run < $yesterday) {
    variable_set('vaxia_character_sheet_cron', strtotime('now'));
    _silver_cron_silver();
  }
}

/**
 * Cron handler.
 */
function _silver_cron_silver() {
    // On cron. Go through ALL character sheets.
    // Using this query to make sure we don't load anything we really don't need to.
    // So only nodes that have an economy and exist.
    $queue = DrupalQueue::get('vaxiaSilverQueue');
    $sheets = db_query('SELECT n.nid FROM {field_data_field_economy} e ' . // With an economy value
      'LEFT JOIN {node} n ON e.entity_id = n.nid AND e.revision_id = n.vid ' .
      'WHERE n.status = 1 ' . // Active character sheet
      'AND n.nid NOT IN (' .
      'SELECT npc.entity_id FROM {field_data_field_is_npc} npc WHERE npc.field_is_npc_value = 1' . // Not an NPC
      ')'.
      'AND n.nid NOT IN (' .
      'SELECT onpc.entity_id FROM {field_data_field_is_open_npc} onpc WHERE onpc.field_is_open_npc_value = 1' . // Not an open NPC
      ')'.
      'AND n.nid NOT IN (' .
      'SELECT st.entity_id FROM {field_data_field_is_storyteller} st WHERE st.field_is_storyteller_value = 1' . // Not a storyteller.
      ')');
    foreach ($sheets as $node_data) {
      $item = array(
        'nid' => $node_data->nid
      );
      $queue->createItem($item);
    }
}

/**
 * Implements hook_scene_record_goal_info.
 */
function silver_scene_record_goal_info() {
  return array(
    '_silver_scene_calculate_silver' => array(
      'label'  => 'A running total for silver.',
      'type' => array('silver'),
    ),
  );
}

/**
 * Helper function, calculate money for economy on cron.
 */
function _silver_character_daily_silver($node_data) {
  // For each sheet, calculate money to add based on the economy level.
  $node = node_load($node_data['nid']);
  if (_character_sheet_is_enabled($node) && _character_sheet_is_playable($node)) {
    $level = isset($node->field_economy[$node->language][0]['value']) ?
      $node->field_economy[$node->language][0]['value'] : 0;
    $silver = _character_sheet_get_xp($node->nid, 'silver');
    $silver_spent = _character_sheet_get_xp($node->nid, 'spent_silver');
    $silver_invested = _character_sheet_get_xp($node->nid, 'invest_silver');
    $available_silver = $silver - ($silver_spent + $silver_invested);
    $income = _silver_get_month_income($level);
    $daily = _silver_get_daily_pay($level);
    // If silver on hand > income reduce it by daily pay, else add it.
    if ($available_silver > $income) {
      // Reduce silver.
      _character_sheet_update_xp($node->nid, $daily * -1, 'silver');
      $message = 'Removed ' . $daily .' to # '. $node->nid . ' ' . $node->title;
      _character_sheet_update_log($node->nid, 'daily_silver', $message);
    }
    else {
      // Add silver.
      _character_sheet_update_xp($node->nid, $daily, 'silver');
      $message = 'Added ' . $daily .' to # '. $node->nid . ' ' . $node->title;
      _character_sheet_update_log($node->nid, 'daily_silver', $message);
    }
  }
}

/**
 * Implements hook_form_FORMID_alter().
 */
function silver_form__character_sheet_xp_form_alter(&$form, $form_state) {
  // Load.
  $node = node_load($form['node_info']['nid']['#value']);
  // Add the economy form for owned forms.
  global $user;
  $silver = _character_sheet_get_xp($node->nid, 'silver');
  $silver_spent = _character_sheet_get_xp($node->nid, 'spent_silver');
  $silver_invested = _character_sheet_get_xp($node->nid, 'invest_silver');
  $available_silver = $silver - ($silver_spent + $silver_invested);
  $econ[] = t('You have %posted silver.', array('%posted' => number_format($available_silver, 2)));
  $level = isset($node->field_economy[$node->language][0]['value']) ? $node->field_economy[$node->language][0]['value'] : 0;
  $econ[] = t('Your current economy level is %level.', array('%level' => $level));
  $income = (float) _silver_get_month_income($level);
  $econ[] = t('Your monthly disposable income is %income.', array('%income' => number_format($income, 2)));
  $pay = _silver_get_daily_pay($level);
  $econ[] = t('You get paid %pay a day.', array('%pay' => number_format($pay, 2)));
  $worth = _silver_calculate_worth($level);
  $econ[] = t('Your total worth is %worth if you cashed in all of your economy levels.', array('%worth' => number_format($worth, 2)));
  // Display info.
  $form['node_info']['economy'] = array(
    '#type' => 'item',
    '#title' => t('Economy details'),
    '#markup' => theme('item_list', array('items' => $econ)),
    '#weight' => 10,
  );
  $silver = _character_sheet_get_xp($node->nid, 'silver');
  $silver_spent = _character_sheet_get_xp($node->nid, 'spent_silver');
  $silver_invested = _character_sheet_get_xp($node->nid, 'invest_silver');
  $available_silver = $silver - ($silver_spent + $silver_invested);
  $cost = _silver_invest_calculate_cost_to_improve($level);
  $invest = $cost - $silver_invested;
  // Invested silver is spent_silver, adjusted to show the difference between spent and the cost of the current economy level.
  $desc = t('You have %available silver available to invest. You need to invest %invest more silver before you will reach %level economy. Invested so far %so_far.',
    array('%available' => floor($available_silver), '%invest' => ceil($invest), '%level' => $level + 1, '%so_far' => $silver_invested));

  global $user;
  if ($user->uid == $node->uid) {
    $form['invest_silver'] = array(
      '#type' => 'fieldset',
      '#title' => t('Invest silver'),
      '#collapsible' => TRUE,
      );
    if ($available_silver >= 1) {
      $available_silver = floor($available_silver);
      $invest = 0;
      // Figure out how many given current silver you can add.
      $form['invest_silver']['invest_silver'] = array(
        '#title' => t('Invest silver'),
        '#type' => 'textfield',
        '#description' => $desc,
        '#size' => 15,
      );
      $form['invest_silver']['submit_economy'] = array(
        '#type' => 'submit',
        '#value' => t('Invest silver'),
        '#validate' => array(),
        '#submit' => array('_silver_invest_silver_submit'),
      );
    }
    else {
      $form['invest_silver']['invest_silver'] = array(
        '#type' => 'item',
        '#value' => t('You currectly have no silver available to invest.'),
        '#description' => $desc,
      );
    }
  }

  // Add additional options for xp IIF allowed.
  if (isset($form['add_xp']) && $node->field_is_storyteller[$node->language][0]['value'] == 0
    && $node->field_is_npc[$node->language][0]['value'] == 0 && $node->field_is_open_npc[$node->language][0]['value'] == 0) {
    // Add a form to handle silver on it's own.
    $form['add_silver'] = array(
      '#type' => 'fieldset',
      '#title' => t('Add silver'),
      '#collapsible' => TRUE,
    );
    $form['add_silver']['add_silver'] = array(
      '#type' => 'textfield',
      '#title' => t('Add silver'),
      '#size' => 6,
      '#description' => t('Adding a negative value will subtract silver. First from available silver, then from the economy level, reducing economy.'),
    );
    $form['add_silver']['add_silver_submit'] = array(
      '#type' => 'submit',
      '#value' => t('Add silver'),
      '#validate' => array('_silver_add_validation_form'),
      '#submit' => array('_silver_add_submit_form'),
    );
  }
}

/**
 * Form validation handler for silver.
 */
function _silver_add_validation_form(&$form, &$form_state) {
  $add_silver = $form_state['values']['add_silver'];
  if (empty($add_silver)) {
    form_set_error('add_silver', t('Empty value given for silver.'));
  }
  if (!is_numeric($add_silver)) {
    form_set_error('add_silver', t('Silver given is not a numeric value'));
  }
}


/**
 * Form submit handler for silver.
 */
function _silver_add_submit_form(&$form, &$form_state) {
  global $user;
  $nid = $form_state['values']['nid'];
  $character = node_load($nid);
  $add_silver = $form_state['values']['add_silver'];
  // Clear the cache if need be.
  if (module_exists('entitycache')) {
    cache_clear_all($nid, 'cache_entity_node');
  }
  // If positive, add silver as per standard XP.
  if ($add_silver > 0) {
    _character_sheet_update_xp($nid, $add_silver, 'silver');
    drupal_set_message(t('@add_silver silver has been added to this sheet.', array('@add_silver' => $add_silver)));
    $message = t('@xp silver added to @title by @user.',
      array('@xp' => $add_silver, '@title' => $character->title, '@user' => $user->name));
    _character_sheet_update_log($nid, 'silver', $message);
    return;
  }
  // If negative. First check if we can just subtract off of given XP.
  if ($add_silver < 0) {
    _silver_add_submit_form_remove_silver($nid, $add_silver);
    drupal_set_message(t('%add_silver silver has been removed from this sheet.',
      array('%add_silver' => $add_silver)));
    $message = t('@xp silver removed from @title by @user.',
      array('@xp' => $add_silver, '@title' => $character->title, '@user' => $user->name));
    _character_sheet_update_log($nid, 'silver', $message);
  }
}

/**
 * Recursive call to convert silver down.
 */
function _silver_add_submit_form_remove_silver($nid, $add_silver) {
  $silver = _character_sheet_get_xp($nid, 'silver');
  $silver_spent = _character_sheet_get_xp($nid, 'spent_silver');
  $silver_invested = _character_sheet_get_xp($nid, 'invest_silver');
  $available_silver = $silver - ($silver_spent + $silver_invested);
  //If yes, do so.
  if ($available_silver >= -1 * $add_silver) {
    _character_sheet_update_xp($nid, $add_silver, 'silver');
    return;
  }
  // If not, subtract to zero and start digging into the economy.
  if ($available_silver <  -1 * $add_silver) {
    _character_sheet_update_xp($nid, $available_silver * -1, 'silver');
    // Subtract the silver you've accounted for already.
    $add_silver += $available_silver;
    // Then convert one economy level and subtract until all silver is removed.
    if ($add_silver < 0) {
      // Convert a level, and add to silver.
      $node = node_load($nid);
      $economy = isset($node->field_economy[$node->language][0]['value']) ?
        $node->field_economy[$node->language][0]['value'] : 0;
      $converted_silver = _silver_invest_calculate_cost_to_remove($economy);
      _character_sheet_update_xp($nid, $converted_silver, 'silver');
      $message = t('Converted economy from level @economy to @less_economy, for @converted silver.',
        array('@economy' => $economy, '@less_economy' => $economy - 1,
        '@converted' => number_format($converted_silver, 2)));
      _character_sheet_update_log($node->nid, 'silver', $message);
      drupal_set_message($message);
      // Remove econmy.
      $economy--;
      $node->field_economy[$node->language][0]['value'] = $economy;
      node_save($node);
      // And repeat for the next debt.
      // NOTE: RECURSION.
      _silver_add_submit_form_remove_silver($nid, $add_silver);
    }
  }
}

/**
 * Helper function, figure out how much it costs to remove economy by one.
 */
function _silver_invest_calculate_cost_to_remove($economy) {
  // Given an economy value, figure out how much silver it would take to increase it by one.
  $total_worth = _silver_calculate_worth($economy);
  $economy--;
  $new_worth = _silver_calculate_worth($economy);
  return $total_worth - $new_worth;
}

/**
 * Helepr function, given an economy level, figure out how much income in a month.
 */
function _silver_get_month_income($economy) {
  $total_worth = _silver_calculate_worth($economy);
  $income = (($total_worth) * (3.5 / 100)) + (0.05);
  return $income;
}

/**
 * Helepr function, given an economy level, figure out how much income in a day.
 */
function _silver_get_daily_pay($economy) {
  $monthly = _silver_get_month_income($economy);
  $daily = $monthly / 30;
  return $daily;
}

/**
 * Helper function, figure out how much you're worth in silver.
 */
function _silver_calculate_worth($economy) {
  $power = (0.04 * $economy) + 1.853 + (-4 * ( 1 / ($economy + 1) ));
  return pow(10, $power) + (0.5);
}


/**
 * Helper function, figure out how much it costs to improve economy by one.
 */
function _silver_invest_calculate_cost_to_improve($economy) {
  // Given an economy value, figure out how much silver it would take to increase it by one.
  $total_worth = _silver_calculate_worth($economy);
  $economy++;
  $new_worth = _silver_calculate_worth($economy);
  return $new_worth - $total_worth;
}

/**
 * Submit callback for investing silver.
 */
function _silver_invest_silver_submit($form, $form_state) {
  $nid = $form_state['values']['nid'];
  $invest = $form_state['values']['invest_silver'];
  $node = node_load($nid);
  $silver = _character_sheet_get_xp($node->nid, 'silver');
  $silver_spent = _character_sheet_get_xp($node->nid, 'spent_silver');
  $silver_invested = _character_sheet_get_xp($node->nid, 'invest_silver');
  $available_silver = $silver - ($silver_spent + $silver_invested);
  // Act.
  $save_node = FALSE;
  // Clear the cache if need be.
  if (module_exists('entitycache')) {
    cache_clear_all($nid, 'cache_entity_node');
  }
  global $user;
  if (is_numeric($invest) && $invest > 0 && $invest <= $available_silver) {
    // Figure out how many to add based on added silver.
    $cost = _silver_invest_calculate_cost_to_improve($node->field_economy[$node->language][0]['value']);
    $silver_invested = _character_sheet_get_xp($node->nid, 'invest_silver');
    $silver_to_invest = 0;
    while ($invest > 0) {
      $invest--;
      $silver_invested++;
      $silver_to_invest++;
      if ($silver_invested >= $cost ) {
        // Pay the investment.
        $node->field_economy[$node->language][0]['value']++;
        $save_node = TRUE;
        _character_sheet_update_xp($node->nid, $silver_invested, 'spent_silver');
        // Remove silver invested - back to zero.
        $current_invest = _character_sheet_get_xp($node->nid, 'invest_silver');
        _character_sheet_update_xp($node->nid, $current_invest * -1, 'invest_silver');
        $silver_to_invest = 0;
        $silver_invested = 0;
        $message = t('Economy improved through investment to @econ on @title by @user.',
          array('@econ' => $node->field_economy[$node->language][0]['value'],
          '@title' => $node->title, '@user' => $user->name));
        _character_sheet_update_log($nid, 'invest', $message);
      }
    }
    _character_sheet_update_xp($node->nid, $silver_to_invest, 'invest_silver');
    $message = t('@xp silver invested on @title by @user.',
      array('@xp' => $silver_to_invest, '@title' => $node->title, '@user' => $user->name));
    _character_sheet_update_log($nid, 'invest', $message);
  }
  // Flag to save the node if called for.
  if ($save_node) {
    node_save($node);
  }
}

/**
 * Scene results callback handler.
 */
function _silver_scene_calculate_silver($comment, &$context) {
  // Set defaults if not already set.
  $message_items = array();
  // Silver by character.
  $context['ongoing']['silver']['all'] = !empty($context['ongoing']['silver']['all']) ?
    $context['ongoing']['silver']['all'] : array();
  $character = !empty($context['character']) ? $context['character'] : 0;
  if (!empty($character)) {
    $context['ongoing']['_ruling']['PPs'] = !empty($context['ongoing']['_ruling']['PPs']) ?
      $context['ongoing']['_ruling']['PPs'] : 0;
    $context['ongoing']['silver']['all'][$character->title] = isset($context['ongoing']['silverrp']['all'][$character->title]) ?
      $context['ongoing']['silver']['all'][$character->title] : 0;
    $context['ongoing']['silver']['all'][$character->title] += $context['ongoing']['_ruling']['PPs'];
  }
  // Show amount.
  foreach ($context['ongoing']['silver']['all'] as $name => $count) {
    $message_items[] = t('Up to @amount silver for %name.', array('@amount' => number_format($count, 2) , '%name' => $name));
  }
  return $message_items;
}
