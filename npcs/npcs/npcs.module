<?php
/**
 * @file
 * Code for the Vaxia NPCs feature.
 */

include_once 'npcs.features.inc';

/**
 * Implements hook_permission().
 */
function npcs_permission() {
  return array(
    'administer NPC handler'=> array(
      'title' => t('administer NPC handler'),
      'description' => t('Administrate NPC handler'),
    ),
    'create NPCs' => array(
      'title' => t('create NPCs'),
      'description' => t('Create NPCs for posting.'),
    ),
    'use NPCs' => array(
      'title' => t('use NPCs'),
      'description' => t('Use NPCs for posting.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function npcs_menu() {
  $items['admin/vaxia/npcs'] = array(
    'title' => 'NPC handling',
    'description' => 'Configure NPC handling',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_npcs_admin_settings'),
    'access arguments' => array('administer NPC handler'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of admin settings form.
 */
function _npcs_admin_settings($form, &$form_state) {
  // Setting for workflow to drop the NPCs into on being claimed.
  $workflow_options = array();
  $workflows = workflow_get_workflows();
  foreach ($workflows as $workflow) {
    $states = workflow_get_workflow_states_by_wid($workflow->wid);
    foreach ($states as $state) {
      $workflow_options[$state->sid] = $workflow->name . ':' . $state->state;
    }
  }
  $form['npcs_stat_cap'] = array(
    '#title' => 'NPC stat cap',
    '#description' => 'The max value an NPC stat can be: Default 70.',
    '#type' => 'textfield',
    '#default_value' => variable_get('npcs_stat_cap', 70),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function npcs_form_character_sheet_node_form_alter(&$form, &$form_state, $form_id) {
  $node = isset($form['#node']) ? $form['#node'] : '';
  if (_character_sheet_is_enabled($node) && _character_sheet_is_playable($node)) {
    if (_npcs_is_an_npc($node)) {
      $allowed_edit = array('field_age_app', 'field_background', 'field_personality', 'field_description', 'field_occupation',
        'field_last_name', 'field_titles', 'field_race', 'field_sex', 'field_age_real', 'field_post_color',
        'field_character_owner', 'field_sh_notes', 'field_sh_private_notes', 'field_player_notes', 'field_artwork_image');
      foreach (element_children($form) as $child) {
        if ((strpos($child, 'field_') === 0 || $child == 'title') && !in_array($child, $allowed_edit)) {
          $form[$child]['#disabled'] = TRUE;
          $form[$child]['#value'] = $form[$child]['#default_value'];
        }
      }
      drupal_set_message('You are attempting to edit an NPC that has already been approved for play. NPC numbers cannot be further edited ' .
        'after approval. Please revert this NPC to draft, and take it through the approval process again if you need to update numbers.');
    }
  }
  $form['#after_build'][] = '_npcs_node_form_workflow_after_build';
}

/**
 * Implements form after build.
 */
function _npcs_node_form_workflow_after_build($form, $form_state) {
  global $user;
  $node = isset($form['#node']) ? $form['#node'] : '';
  if (!empty($form['#wf']->name) && !empty($node) && $user->uid == $node->uid && $node->type == 'character_sheet') {
    $workflow_name = $form['#wf']->name;
    $options = $form['workflow'][$workflow_name]['#options'];
    $index = array_search('approved', $options);
    if ($index !== FALSE && $index != $node->workflow) {
      drupal_set_message(t('You own this NPC, you cannot set it to approved. Currently: ' . $node->workflow_state_name));
      unset($options[$index]);
      unset($form['workflow'][$workflow_name][$index]);
      $form['workflow'][$workflow_name]['#options'] = $options;
      $form['workflow'][$workflow_name]['#default_value'] = $node->workflow;
    }
  }
  return $form;
}

/**
 * Helper function, check for NPC status.
 */
function _npcs_is_an_npc($node) {
  if (isset($node->field_is_npc[$node->language][0]['value']) && $node->field_is_npc[$node->language][0]['value'] == TRUE) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Helper for rules. Check if the NPC is over limits.
 */
function npcs_check_needs_oversight($node) {
  $limit = variable_get('npcs_stat_cap', 70);
  $return_value = FALSE;
  $lang = $node->language;
  // Check each stat.
  $fields = array('life', 'endurance', 'strength', 'dexterity',
    'intelligence', 'spirituality', 'charisma');
  foreach ($fields as $field_name) {
    $field_name = 'field_' . $field_name;
    $stat = isset($node->{$field_name}[$lang][0]['value']) ?
    $node->{$field_name}[$lang][0]['value'] : 0;
    if ($stat >= $limit) {
      $return_value = TRUE;
    }
  }
  // Check each skill.
  if (!empty($node->field_skill[$lang]) && is_array($node->field_skill[$lang])) {
    foreach ($node->field_skill[$lang] as $delta => $skill) {
      $this_skill = field_collection_item_load($skill['value']);
      $skill_lang = isset($skill->language) ? $skill->language : $lang;
      $stat = isset($this_skill->field_skill_value[$skill_lang][0]['value']) ?
        $this_skill->field_skill_value[$skill_lang][0]['value'] : 0;
      if ($stat >= $limit) {
        $return_value = TRUE;
      }
    }
  }
  return $return_value;
}

/**
 * Helper for rules. Get NPC workflow settings in proper timing order.
 */
function npcs_mark_npc_pass($node) {
  // Update the timestamp for the latest workflow to avoid a timestamp collision.
  db_query('UPDATE {workflow_node_history} ' .
    'SET stamp = stamp+10 ' .
    'WHERE nid = :nid ' .
    'ORDER BY hid DESC ' .
    'LIMIT 1',
    array(':nid' => $node->nid)
  );
}
