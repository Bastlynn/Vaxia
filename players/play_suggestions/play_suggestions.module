<?php
/**
 * @file
 * Code for the Play Suggestions feature.
 */

include_once 'play_suggestions.features.inc';

/**
 * Implements hook_block_info().
 */
function play_suggestions_block_info() {
  $blocks = array();
  $blocks['play_suggestions'] = array(
    'info' => t('Play suggestions'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function play_suggestions_block_view($delta = '') {
  $nid = arg(1);
  $block = array();
  $block['subject'] = t('Play suggestions');
  if (!empty($nid) && is_numeric($nid)) {
    $block['content'] = drupal_get_form('_play_suggestions_search', $nid);
  }
  else {
    $block['content'] = t('Err: not a node.');
  }
  return $block;
}

/**
 * Search form.
 */
function _play_suggestions_search($form, &$form_state, $nid) {
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $nid,
  );
  $form['lets_play'] = array(
    '#type' => 'submit',
    '#value' => t('I\'m bored.'),
  );
  return $form;
}

/**
 * Submit handler.
 */
function _play_suggestions_search_validate($form, &$form_state) {
  // HACK. But pending figuring out why _play_suggestions_search_submit()
  // won't call correctly, this will have to do.
  _play_suggestions_search_submit($form, $form_state);
}

function _play_suggestions_search_submit($form, &$form_state) {
  $nid = $form_state['values']['nid'];
  $play_suggestion = _play_suggestions_get_suggestion();
  $realm = !empty($play_suggestion['realm']) ? $play_suggestion['realm'] : '';
  $suggestion = !empty($play_suggestion['suggestion']) ? $play_suggestion['suggestion'] : '';
  $location = !empty($play_suggestion['location']) ? $play_suggestion['location'] : '';
  if (empty($realm) || empty($suggestion) || empty($location)) {
    return;
  }
  $link = '[url=/node/add/play-suggestions]Click here.[/url]';
  $post = t('In @realm, @suggestion at !location.',
    array('@realm' => $realm, '@suggestion' => $suggestion, '!location' => $location));
  $ooc = t('Want to add some suggestions? !link', array('!link' => $link));
  // Programatically make a post as the BOT, narrative mode on.
  $comment = (object) array(
    'nid' => $nid,
    'cid' => 0,
    'pid' => 0,
    'uid' => 1,
    'revision' => 1, // Required by comment_revisions.
    'mail' => '',
    'is_anonymous' => 0,
    'homepage' => '',
    'status' => COMMENT_PUBLISHED,
    'subject' => 'Play suggestion',
    'language' => LANGUAGE_NONE,
    'comment_body' => array(
      LANGUAGE_NONE => array(
        0 => array (
          'value' => $post,
          'format' => 'wiki',
        ),
      ),
    ),
    'field_ooc' => array(
      LANGUAGE_NONE => array(
        0 => array (
          'value' => $ooc,
          'format' => 'wiki',
        ),
      ),
    ),
    'field_comment_narrative' => array(
      LANGUAGE_NONE => array(
        0 => array (
          'value' => 1,
        ),
      ),
    ),
  );
  comment_submit($comment);
  comment_save($comment);
}

/**
 * Helper function, get a suggestion.
 */
function _play_suggestions_get_suggestion() {
  // Get a random suggestion within the nid.
  $suggestion = _play_suggestions_random_submission();
  if (empty($suggestion['tid'])) {
    return array();
  }
  // Get realm name.
  $realm_term = taxonomy_term_load($suggestion['tid']);
  $suggestion['realm'] = !empty($realm_term->name) ? $realm_term->name : $realm;
  // Get a random location within the realm.
  $nid = _play_suggestions_random_location($suggestion['tid']);
  $node = node_load($nid);
  if ($node) {
    $suggestion['location'] = l($node->title, 'node/' . $node->nid);
  }
  return $suggestion;
}

/**
 * Helper function, get a random suggestion submission.
 */
function _play_suggestions_random_submission() {
  $count = db_query('SELECT COUNT(n.nid) FROM {node} n WHERE n.type = \'play_suggestions\'')->fetchField();
  $random = rand(0, $count - 1);
  $results = db_query('SELECT n.nid, n.title, t.field_tag_realm_tid FROM {node} n ' .
    'LEFT JOIN {field_data_field_tag_realm} t ON t.entity_id = n.nid AND t.revision_id = n.vid ' .
    'WHERE n.type = \'play_suggestions\' LIMIT ' . $random . ', 1');
  // Return result.
  foreach ($results as $result) {
    return array(
      'suggestion' => $result->title,
      'tid' => $result->field_tag_realm_tid,
    );
  }
  return array();
}

/**
 * Helper function, get a random location node.
 */
function _play_suggestions_random_location($realm) {
  $skip = 0;
  $count = 10;
  $sql = 'SELECT DISTINCT(c.nid) FROM {comment} c ' .
    'LEFT JOIN {node} n ON n.nid = c.nid ' .
    'LEFT JOIN {field_data_field_tag_realm} r ON r.entity_id = n.nid  AND r.revision_id = n.vid ' .
    'LEFT JOIN {field_data_field_private_room} p ON p.entity_id = n.nid  AND p.revision_id = n.vid ' .
    'LEFT JOIN {field_data_field_mature_posting} m ON m.entity_id = n.nid  AND m.revision_id = n.vid ' .
    'LEFT JOIN {field_data_field_locked_to_users} l ON l.entity_id = n.nid  AND l.revision_id = n.vid ' .
    // Where not private, mature, or locked.
    'WHERE n.type=\'rpg_chatroom\' AND n.status = 1 ' .
    'AND r.field_tag_realm_tid=:realm ' .
    'AND p.field_private_room_value=1 ' .
    'AND m.field_mature_posting_value=0 ' .
    'AND l.field_locked_to_users_value=0 ' .
    'ORDER BY c.cid LIMIT ' . $skip . ', ' . $count . '';
  $results = db_query($sql, array(':realm' => $realm));
  $nodes = array();
  foreach ($results as $result) {
    $nodes[] = $result->nid;
  }
  if (!empty($nodes)) {
    $count = count($nodes);
    $random = rand(0, $count);
    return isset($nodes[$random]) ? $nodes[$random] : '';
  }
  return '';
}
