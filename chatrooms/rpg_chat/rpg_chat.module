<?php
// $Id$

/**
 * @file
 * Reskin existing nodes and comments with a chat-room like UI.
 */

include_once('rpg_chat.features.inc');

/**
 * Implements hook_menu().
 */
function rpg_chat_menu() {
  // We use our own path, not normal AJAX because
  // we don't need to process the form to refresh
  // the comments placed on it since the user last
  // viewed it. So no need to do all that crunching.
  $items['system/rpg_chat'] = array(
    'title' => 'RPG Chat Refresh',
    'page callback' => 'rpg_chat_refresh',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_cron().
 */
function rpg_chat_cron() {
  _rpg_chat_cron();
}

/**
 * Implements hook_cronapi().
 */
function rpg_chat_cronapi($op, $job = NULL) {
  $items['_rpg_chat_cron'] = array(
  	'description' => 'RPG Chat: Clear users in room',
  	'rule' => '*/15 * * * *', // Every 15 minutes.
  );
  return $items;
}

/**
 * Cron handler.
 */
function _rpg_chat_cron() {
  db_query('DELETE FROM {rpg_chat_room_users} WHERE timestamp < :timestamp',
    array(':timestamp' => strtotime('-1 minutes')));
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter content type settings to add "Enable rpg chat?" checkbox.
 */
function rpg_chat_form_node_type_form_alter(&$form, &$form_state) {
  if (isset($form['type'])) {
    $form['rpg_chat'] = array(
      '#type' => 'fieldset',
      '#title' => t('RPG chat settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
    );
    $form['rpg_chat']['rpg_chat'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable RPG chat?'),
      '#default_value' => variable_get('rpg_chat_' . $form['#node_type']->type, FALSE),
      '#description' => t('Enable this checkbox if you want to provide a RPG chat UI '.  
        'for your users with this content type.'),
    );
  }
}

/**
 * Implements hook_permission().
 */
function rpg_chat_permission() {
  return array(
    'administer rpg chat' => array(
      'title' => t('Administer RPG chat'),
      'description' => t('Administer RPG chat configurations.'),
    ),
    'view rpg chat' => array(
      'title' => t('View RPG chat'),
      'description' => t('View RPG chat conversations.'),
    ),
  );
}

/**
 * Implements hook_node_access().
 */
function rpg_chat_node_access($node, $op, $account) {
  // This is a chat type and you're not allowed.
  if (_rpg_chat_is_enabled($node->type) && !_rpg_chat_node_access($node, $account)) {
    return NODE_ACCESS_DENY;
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_node_load().
 */
function rpg_chat_node_load($nodes) {
  foreach ($nodes as $node) {
    // Load all the chat related bits for this node.
    if (isset($node->type) && _rpg_chat_is_enabled($node->type)) {
      // Cleanup user lists.
      rpg_chat_cron();
      // Load the rooom.
      $room = _rpg_chat_get_room($node->nid);
      if ($room) {
        $nodes[$node->nid]->rpg_chat_current_users = _rpg_chat_get_room_users($node->nid);
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function rpg_chat_node_delete($node) {
  if (_rpg_chat_is_enabled($node->type)) {
    _rpg_chat_delete_room($node->nid);
  }
}

/**
 * Implements hook_node_view().
 */
function rpg_chat_node_view($node, $view_mode = 'full', $langcode) {
  if (_rpg_chat_is_enabled($node->type) && $view_mode == 'full' ) {
    // Modify the node with UI changes. This drives the reload.
    // Default is 60 seconds.
    $refresh = 60;
    // And add the JS we need to drive the conversation iff we are on the primary display page.
    // NOT on comment pages and other alternate views.
    if (arg(0) == 'node' && arg(0, request_path()) != 'comment') {
      drupal_add_js(array('rpg_chat' => array('refreshRate' => $refresh)), 'setting');
      drupal_add_js(drupal_get_path('module', 'rpg_chat') . '/js/rpg_chat.js');
      drupal_add_css(drupal_get_path('module', 'rpg_chat') . '/css/rpg_chat.css');
    }
  }
}

/**
 * Implements process suggestion for comment theme. This allows us to override parts of the comment form.
 */
function rpg_chat_process_comment(&$variables) {
  if (_rpg_chat_is_enabled($variables['node']->type)) {
    $variables['classes'] .= ' rpg-chat-post';
    // Looks for comment--rpg-chat.tpl.php in your theme directory. If not there, it uses the available comment theme.
    $variables['theme_hook_suggestion'] = 'comment__rpg_chat';
  }
}

/**
 * Implements process suggestion for node theme. This allows us to override parts of the node form.
 */
function rpg_chat_process_node(&$variables) {
  if (_rpg_chat_is_enabled($variables['node']->type)) {
    $variables['classes'] .= ' rpg-chat-node';
    // Looks for node--rpg-chat.tpl.php in your theme directory.
    $variables['theme_hook_suggestion'] = 'node__rpg_chat';
  }
}

/**
 * Implements hook_node_view_alter().
 * Wrap all comments in an ID wrapper for our AJAX to pick up.
 */
function rpg_chat_node_view_alter(&$build) {
  if (_rpg_chat_is_enabled($build['#node']->type) ) {
    // Get users for display in addition to the wrapper.
    $user_names = array();
    foreach ($build['#node']->rpg_chat_current_users as $found_user) {
      $user_names[] = !empty($found_user->name) ? $found_user->name : t('Lurker*');
    }
    $user_string = '<div id="rpg-chat-userlist">' .
      theme('item_list', array('title' => t('Users in this room'), 'items' => $user_names)) .
      '</div>';
    $build['comments']['comments']['#prefix'] = '<div id="rpg-chat-wrapper">' . $user_string . '<div id="rpg-chat">';
    $build['comments']['comments']['#suffix'] = '</div></div>';
  }
}

/**
 * Implements hook_form_FORM_ID_alter(). Alter the comment form with our controls.
 */
function rpg_chat_form_comment_form_alter(&$form, &$form_state, $form_id) {
  // Check to see if this node type is a rpg chatroom.
  if (_rpg_chat_is_enabled($form['#node']->type) ) {
    // Display the refresh submit.
    $form['actions']['refresh_chat'] = array(
      '#type' => 'submit',
      '#value' => t('Refresh'),
      '#access' => 1,
      '#submit' => array(),
      '#limit_validation_errors' => array(), // No validation for a refresh.
    );
    // When clicked refresh the comment display.
    $form['actions']['refresh_chat']['#ajax'] = array(
       // Using a path instead of normal callback allows us to avoid processing the form
       // Since all we really want to do is reload the display of comments.
      'path' => 'system/rpg_chat/' . $form['#node']->nid,
      'wrapper' => 'rpg-chat-wrapper',
      'method' => 'replace',
      'effect' => 'fade',
      'event' => 'click', // To allow our refresh script to hit it.
    );
    // If comment revisions is included prevent users stealth-edits.
    if (module_exists('comment_revisions')) {
      if (!empty($form['revision_information']['revision'])) {
        $form['revision_information']['revision']['#access'] = FALSE;
        $form['revision_information']['revision']['#default_value'] = TRUE;
        $form['revision_information']['revision']['#value'] = TRUE;
      }
    }
    // Refresh this user's last login to this room.
    global $user;
    global $user;
    if (function_exists('shadowban_is_banned_user') && !shadowban_is_banned_user($user)) {
      _rpg_chat_set_room_users($form['#node']->nid, $user->uid);
    }
    else {
      _rpg_chat_set_room_users($form['#node']->nid, $user->uid);
    }
  }
}

/**
 * AJAX callback, refreshes the comments displayed for this chatroom.
 */
function rpg_chat_refresh($nid) {
  // This is to remove the "Your comment has been posted" status message.
  if (!empty($_SESSION['messages']['status'])) {
    unset($_SESSION['messages']['status']);
  }
  // Refresh this user's last login to this room.
  global $user;
  if (function_exists('shadowban_is_banned_user') && !shadowban_is_banned_user($user)) {
    _rpg_chat_set_room_users($nid, $user->uid);
  }
  else {
    _rpg_chat_set_room_users($nid, $user->uid);
  }
  // And pull the room info with the updated room list.
  $node = node_load($nid);
  // Bail if we didn't find a node.
  if (empty($node)) {
    return '';
  }
  // Get users in the room.
  $user_names = array();
  foreach ($node->rpg_chat_current_users as $found_user) {
    $user_names[] = $found_user->name;
  }
  $return_string = '<div id="rpg-chat-userlist">' .
    theme('item_list', array('title' => t('Users in this room'), 'items' => $user_names)) .
    '</div>';
  $return_string .= '<div id="rpg-chat">';
  // COPIED from comment_node_page_additions();
  // Only attempt to render comments if the node has visible comments.
  // Unpublished comments are not included in $node->comment_count, so show
  // comments unconditionally if the user is an administrator.
  if (($node->comment_count && user_access('access comments')) || user_access('administer comments')) {
    $mode = COMMENT_MODE_FLAT;
    $comments_per_page = variable_get('comment_default_per_page_' . $node->type, 50);
    if ($cids = comment_get_thread($node, $mode, $comments_per_page)) {
      $found_comments = comment_load_multiple($cids);
      comment_prepare_thread($found_comments);
      $comments = comment_view_multiple($found_comments, $node);
    }
  }
  // Render results. At this point we have render arrays.
  if (!empty($comments) && is_array($comments)) {
    foreach ($comments as $cid => $comment) {
      if (is_numeric($cid)) {
        $return_string .= drupal_render($comment);
      }
    }
  }
  $return_string .= '</div></div>';
  // Set up the return array.
  $return_array[] = array(
    'command' => 'insert',
    'method' => NULL,
    'selector' => NULL,
    'data' => '<div id="rpg-chat-wrapper">' . $return_string . '</div>',
    'settings' => NULL,
  );
  // Echo the string, to avoid bootstrapping entire delivery system.
  echo drupal_json_encode($return_array);
  // And shortcircuit any other processing. We're done.
  exit;
}

/**
 * Implements hook_form_alter().
 *
 * Add RPG chat settings to node forms with RPG chat enabled.
 */
function rpg_chat_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($form['type']['#value']) || !_rpg_chat_is_enabled($form['type']['#value'])) {
    return;
  }
  // If this is a node form, add the rpg_chat feature set.
  if (strpos($form['#form_id'], '_node_form') !== FALSE) {
    // Load a node if it exists.
    if (isset($form_state['node'])) {
      $node = $form_state['node'];
    }
    $form['rpg_chat'] = array(
      '#type' => 'fieldset',
      '#title' => t('RPG chat settings'),
      '#description' => t('Configure RPG chat settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
    );
  }
}

/*
 * Implements hook_node_insert().
 */
function rpg_chat_node_insert($node) {
  if(_rpg_chat_is_enabled($node->type)) {
    rpg_chat_node_update($node);
  }
}

/*
 * Implements hook_node_update().
 */
function rpg_chat_node_update($node) {
  if(_rpg_chat_is_enabled($node->type)) {
    // Gather all values and save them.
    $variables = array();
    $variables['nid'] = $node->nid;
    $variables['min_refresh'] = 60;
    _rpg_chat_set_room($node->nid, $variables);
  }
}

/**
 * Helper function, determine access for a given node and account.
 */
function _rpg_chat_node_access($node, $account) {
  // You you can't view it, and you're not an admin for chat or the site.
  if (!user_access('view rpg chat', $account) && !user_access('administer rpg chat', $account)) {
    return FALSE;
  }
  // Still good? Great. Go chat.
  return TRUE;
}

/**
 * Helper function. Return RPG chat status.
 */
function _rpg_chat_is_enabled($type) {
  return variable_get('rpg_chat_' . $type, FALSE);
}

/**
 * DB function. Get room info for a node.
 */
function _rpg_chat_get_room($nid) {
  $results = db_query('SELECT * FROM {rpg_chat_room} WHERE nid = :nid', array(':nid' => $nid));
  foreach ($results as $result) {
    return $result;
  }
  return FALSE;
}

/**
 * DB function. Get nodes for all rooms.
 */
function _rpg_chat_get_rooms() {
  $results = db_query('SELECT r.nid, n.title FROM {rpg_chat_room} r ' .
    'LEFT JOIN {node} n ON r.nid = n.nid')->fetchAll();
  return $results;
}

/**
 * DB function. Set room info for a node.
 */
function _rpg_chat_set_room($nid, $values) {
  // Prepare the user arrays for input.
  $values['allowed_users'] = serialize(array());
  $values['banned_users'] = serialize(array());
  $room = _rpg_chat_get_room($nid);
  if ($room) {
    drupal_write_record('rpg_chat_room', $values, 'nid');
  }
  else {
    drupal_write_record('rpg_chat_room', $values);
  }
}

/**
 * DB function. Delete room info for a node.
 */
function _rpg_chat_delete_room($nid) {
  db_query('DELETE FROM {rpg_chat_room} WHERE nid = :nid', array(':nid' => $nid));
}

/**
 * DB function. Get users recently viewing a room.
 */
function _rpg_chat_get_room_users($nid) {
  // Clear out anything past a certain timeline / session for ALL ROOMS.
  db_query('DELETE FROM {rpg_chat_room_users} WHERE timestamp < :timestamp',
    array(':timestamp' => strtotime('-15 minutes') ));
  $users = array();
  $results = db_query('SELECT r.*, u.name FROM {rpg_chat_room_users} r ' .
    'LEFT JOIN {users} u ON u.uid = r.uid ' .
    'WHERE nid = :nid', array(':nid' => $nid));
  foreach ($results as $result) {
    $users[] = $result;
  }
  return $users;
}

/**
 * DB function. Set users recently viewing a room, clear out logouts.
 */
function _rpg_chat_set_room_users($nid, $uid) {
  // Clear out anything past a certain timeline / session for ALL ROOMS.
  db_query('DELETE FROM {rpg_chat_room_users} WHERE timestamp < :timestamp',
    array(':timestamp' => strtotime('-15 minutes') ));
  // Clear out this user and nid connection.
  db_query('DELETE FROM {rpg_chat_room_users} WHERE nid = :nid AND uid = :uid',
    array(':nid' => $nid, ':uid' => $uid));
  // Mark the timestamp for the nid/uid combination.
  $record = array(
    ':uid' => $uid,
    ':nid' => $nid,
    ':timestamp' => strtotime('now'),
  );
  // Because this is an async interaction, we're going to move to using REPLACE INTO.
  // Instead of the more expected write_record.
  // drupal_write_record('rpg_chat_room_users', $record);
  db_query('REPLACE INTO {rpg_chat_room_users} (nid, uid, timestamp) ' .
    'VALUES (:nid, :uid, :timestamp)', $record);
}

/**
 * DB function. Delete users recently viewing a room.
 */
function _rpg_chat_delete_room_users($nid) {
  db_query('DELETE FROM {rpg_chat_room_users} WHERE nid = :nid', array(':nid' => $nid));
}

